(set-info :status unsat)
(declare-fun aux!2_n () Real)
(declare-fun aux!9_n () Real)
(declare-fun aux!8_n () Real)
(declare-fun aux!7_n () Real)
(declare-fun aux!6_n () Real)
(declare-fun aux!5_n () Real)
(declare-fun aux!4_n () Real)
(declare-fun aux!3_n () Real)
(declare-fun INV_6_n () Real)
(declare-fun INV_5_n () Real)
(declare-fun INV_4_n () Real)
(declare-fun INV_3_n () Real)
(declare-fun INV_2_n () Real)
(declare-fun INV_1_n () Real)
(declare-fun INV_0_n () Real)
(declare-fun INV_6_0 () Real)
(declare-fun INV_5_0 () Real)
(declare-fun INV_3_0 () Real)
(declare-fun INV_4_0 () Real)
(declare-fun INV_2_0 () Real)
(declare-fun INV_1_0 () Real)
(declare-fun INV_0_0 () Real)
(declare-fun |vsolver#1| () Bool)
(declare-fun INV__tr1 () Bool)
(declare-fun INV__tr0 () Bool)
(declare-fun |INV#level_0!10| () Bool)
(declare-fun |INV#reach_tag_0_0| () Bool)
(declare-fun spacer_proxy!0 () Bool)
(declare-fun spacer_proxy!1 () Bool)
(declare-fun spacer_proxy!2 () Bool)
(declare-fun |INV#level_1!13| () Bool)
(declare-fun spacer_proxy!3 () Bool)
(declare-fun spacer_proxy!4 () Bool)
(declare-fun spacer_proxy!5 () Bool)
(declare-fun spacer_proxy!6 () Bool)
(declare-fun spacer_proxy!7 () Bool)
(declare-fun spacer_proxy!8 () Bool)
(declare-fun spacer_proxy!9 () Bool)
(declare-fun spacer_proxy!10 () Bool)
(declare-fun spacer_proxy!11 () Bool)
(declare-fun spacer_proxy!12 () Bool)
(declare-fun spacer_proxy!13 () Bool)
(declare-fun spacer_proxy!14 () Bool)
(declare-fun spacer_proxy!15 () Bool)
(declare-fun spacer_proxy!16 () Bool)
(declare-fun spacer_proxy!17 () Bool)
(declare-fun spacer_proxy!18 () Bool)
(declare-fun spacer_proxy!19 () Bool)
(declare-fun spacer_proxy!20 () Bool)
(declare-fun spacer_proxy!21 () Bool)
(declare-fun spacer_proxy!22 () Bool)
(declare-fun spacer_proxy!23 () Bool)
(declare-fun spacer_proxy!24 () Bool)
(declare-fun spacer_proxy!25 () Bool)
(declare-fun spacer_proxy!26 () Bool)
(declare-fun spacer_proxy!27 () Bool)
(declare-fun spacer_proxy!28 () Bool)
(declare-fun spacer_proxy!29 () Bool)
(declare-fun spacer_proxy!30 () Bool)
(declare-fun spacer_proxy!31 () Bool)
(declare-fun spacer_proxy!32 () Bool)
(declare-fun spacer_proxy!33 () Bool)
(declare-fun spacer_proxy!34 () Bool)
(declare-fun spacer_proxy!35 () Bool)
(declare-fun spacer_proxy!36 () Bool)
(declare-fun spacer_proxy!37 () Bool)
(declare-fun spacer_proxy!38 () Bool)
(declare-fun spacer_proxy!39 () Bool)
(declare-fun |INV#level_2!14| () Bool)
(declare-fun spacer_proxy!40 () Bool)
(declare-fun spacer_proxy!41 () Bool)
(declare-fun spacer_proxy!42 () Bool)
(declare-fun INV_ext0_n () Bool)
(declare-fun |INV#level_3!16| () Bool)
(declare-fun |INV#level_4!18| () Bool)
(declare-fun |INV#level_5!20| () Bool)
(assert (let ((a!1 (not (= (+ INV_0_n
                      (* (- (/ 3.0 32.0)) aux!2_n)
                      (* (/ 3.0 32.0) aux!3_n)
                      (* (/ 17.0 32.0) aux!4_n)
                      (* (- (/ 3.0 16.0)) aux!5_n)
                      (* (/ 11.0 16.0) aux!6_n)
                      (* (- (/ 1.0 32.0)) aux!7_n)
                      (* (- (/ 15.0 16.0)) aux!8_n)
                      (* (- (/ 7.0 16.0)) aux!9_n))
                   0.0)))
      (a!2 (not (= (+ INV_1_n
                      (* (/ 1.0 32.0) aux!2_n)
                      (* (/ 9.0 16.0) aux!3_n)
                      (* (/ 3.0 32.0) aux!4_n)
                      (* (- (/ 9.0 16.0)) aux!5_n)
                      (* (/ 11.0 32.0) aux!6_n)
                      (* (- (/ 7.0 32.0)) aux!7_n)
                      (* (/ 7.0 32.0) aux!8_n)
                      (* (- (/ 5.0 16.0)) aux!9_n))
                   0.0)))
      (a!3 (not (= (+ INV_2_n
                      (* (/ 1.0 32.0) aux!3_n)
                      (* (- (/ 1.0 4.0)) aux!4_n)
                      (* (/ 19.0 32.0) aux!5_n)
                      (* (- (/ 23.0 32.0)) aux!6_n)
                      (* (- (/ 13.0 16.0)) aux!7_n)
                      (* (/ 5.0 16.0) aux!8_n)
                      (* (- (/ 3.0 8.0)) aux!9_n))
                   (/ 1.0 32.0))))
      (a!4 (not (= (+ INV_3_n
                      (* (/ 1.0 8.0) aux!2_n)
                      (* (/ 1.0 32.0) aux!3_n)
                      (* (- (/ 3.0 32.0)) aux!4_n)
                      (* (/ 1.0 4.0) aux!5_n)
                      (* (- (/ 13.0 32.0)) aux!6_n)
                      (* (- (/ 3.0 8.0)) aux!7_n)
                      (* (- (/ 1.0 16.0)) aux!8_n)
                      (* (- (/ 5.0 32.0)) aux!9_n))
                   (- (/ 1.0 32.0)))))
      (a!5 (not (= (+ INV_4_n
                      (* (- (/ 1.0 16.0)) aux!2_n)
                      (* (/ 5.0 16.0) aux!3_n)
                      (* (- (/ 7.0 32.0)) aux!5_n)
                      (* (- (/ 3.0 8.0)) aux!6_n)
                      (* (- (/ 1.0 2.0)) aux!7_n)
                      (* (- (/ 1.0 32.0)) aux!8_n)
                      (* (- (/ 7.0 16.0)) aux!9_n))
                   0.0)))
      (a!6 (not (= (+ INV_5_n
                      (* (- (/ 1.0 16.0)) aux!2_n)
                      (* (/ 21.0 32.0) aux!3_n)
                      (* (- (/ 19.0 32.0)) aux!4_n)
                      (* (/ 3.0 4.0) aux!5_n)
                      (* (- (/ 3.0 8.0)) aux!6_n)
                      (* (/ 1.0 32.0) aux!7_n)
                      (* (/ 5.0 32.0) aux!8_n)
                      (* (- (/ 7.0 8.0)) aux!9_n))
                   (- (/ 1.0 16.0)))))
      (a!7 (not (= (+ INV_6_n
                      (* (- (/ 1.0 32.0)) aux!2_n)
                      (* (- (/ 19.0 32.0)) aux!3_n)
                      (* (- (/ 37.0 32.0)) aux!4_n)
                      (* (- (/ 9.0 16.0)) aux!5_n)
                      (* (/ 13.0 16.0) aux!6_n)
                      (* (- (/ 7.0 32.0)) aux!7_n)
                      (* (/ 11.0 32.0) aux!8_n)
                      (* (/ 3.0 4.0) aux!9_n))
                   (/ 1.0 32.0)))))
(let ((a!8 (or (not (ite (>= INV_0_0 0.0) (= aux!9_n INV_0_0) (= aux!9_n 0.0)))
               (not (ite (>= INV_1_0 0.0) (= aux!8_n INV_1_0) (= aux!8_n 0.0)))
               (not (ite (>= INV_2_0 0.0) (= aux!7_n INV_2_0) (= aux!7_n 0.0)))
               (not (ite (>= INV_4_0 0.0) (= aux!5_n INV_4_0) (= aux!5_n 0.0)))
               (not (ite (>= INV_3_0 0.0) (= aux!6_n INV_3_0) (= aux!6_n 0.0)))
               (not (ite (>= INV_5_0 0.0) (= aux!4_n INV_5_0) (= aux!4_n 0.0)))
               (not (ite (>= INV_6_0 0.0) (= aux!3_n INV_6_0) (= aux!3_n 0.0)))
               a!1
               a!2
               a!3
               a!4
               a!5
               a!6
               a!7
               (not (>= aux!2_n (/ 3.0 32.0)))
               (not (<= aux!2_n (/ 1.0 8.0))))))
  (or (not INV__tr1) (not |vsolver#1|) (not a!8)))))
(assert (let ((a!1 (not (or (not (= INV_0_n (/ 1.0 8.0)))
                    (not (= INV_1_n (/ 1.0 16.0)))
                    (not (= INV_2_n (/ 1.0 32.0)))
                    (not (= INV_3_n 0.0))
                    (not (= INV_4_n (/ 1.0 16.0)))
                    (not (= INV_5_n (- (/ 1.0 32.0))))
                    (not (= INV_6_n (- (/ 1.0 32.0))))))))
  (or (not INV__tr0) (not |vsolver#1|) a!1)))
(assert (or (not INV__tr1) |INV#level_0!10| (not |vsolver#1|)))
(assert (let ((a!1 (not (or (not (= INV_0_0 (/ 1.0 8.0)))
                    (not (= INV_1_0 (/ 1.0 16.0)))
                    (not (= INV_2_0 (/ 1.0 32.0)))
                    (not (= INV_3_0 0.0))
                    (not (= INV_4_0 (/ 1.0 16.0)))
                    (not (= INV_5_0 (- (/ 1.0 32.0))))
                    (not (= INV_6_0 (- (/ 1.0 32.0))))))))
  (or (not INV__tr1) |INV#reach_tag_0_0| a!1 (not |vsolver#1|))))
(assert (or (not spacer_proxy!0) (not (>= INV_0_n 0.0)) (not |vsolver#1|)))
(assert (or (not |vsolver#1|) (not (>= INV_0_n (/ 1.0 8.0))) (not spacer_proxy!1)))
(assert (or (not INV__tr1)
    (not |vsolver#1|)
    (>= INV_0_0 (/ 1.0 8.0))
    (not spacer_proxy!2)))
(assert (or |INV#level_0!10| (not |vsolver#1|) (>= INV_0_n (/ 1.0 8.0))))
(assert (or (not INV__tr1) |INV#level_1!13| (not |vsolver#1|) (>= INV_0_0 (/ 1.0 8.0))))
(assert (or (not |vsolver#1|) (not spacer_proxy!3) (not (>= INV_1_n 0.0))))
(assert (or (not |vsolver#1|) (not spacer_proxy!4) (not (>= INV_6_n 0.0))))
(assert (or (>= INV_0_n 0.0) (not |vsolver#1|) (not spacer_proxy!5)))
(assert (or (not |vsolver#1|) (not (>= INV_4_n 0.0)) (not spacer_proxy!6)))
(assert (let ((a!1 (not (>= (+ (* (/ 14.0 3.0) INV_0_n) (* (- (/ 17.0 3.0)) INV_5_n))
                    (- (/ 3.0 32.0))))))
  (or (not |vsolver#1|) a!1 (not spacer_proxy!7))))
(assert (or (not |vsolver#1|) (not (>= INV_2_n 0.0)) (not spacer_proxy!8)))
(assert (or (not |vsolver#1|) (not (>= INV_3_n 0.0)) (not spacer_proxy!9)))
(assert (or (not |vsolver#1|) (>= INV_5_n 0.0) (not spacer_proxy!10)))
(assert (or (not INV__tr1) (>= INV_3_0 0.0) (not |vsolver#1|) (not spacer_proxy!11)))
(assert (or |INV#level_0!10| (not |vsolver#1|) (>= INV_3_n 0.0)))
(assert (or (not INV__tr1) (>= INV_3_0 0.0) |INV#level_1!13| (not |vsolver#1|)))
(assert (or (= INV_3_n 0.0) (not |vsolver#1|) (not spacer_proxy!12)))
(assert (or (not |vsolver#1|) (not (>= INV_4_n (/ 1.0 16.0))) (not spacer_proxy!13)))
(assert (or (not INV__tr1)
    (not |vsolver#1|)
    (>= INV_4_0 (/ 1.0 16.0))
    (not spacer_proxy!14)))
(assert (or |INV#level_0!10| (not |vsolver#1|) (>= INV_4_n (/ 1.0 16.0))))
(assert (or (not INV__tr1) |INV#level_1!13| (not |vsolver#1|) (>= INV_4_0 (/ 1.0 16.0))))
(assert (let ((a!1 (not (>= (+ (* (/ 14.0 3.0) INV_0_n)
                       (* 2.0 INV_4_n)
                       (* (- (/ 17.0 3.0)) INV_5_n))
                    (- (/ 3.0 32.0))))))
  (or (not |vsolver#1|) (not spacer_proxy!15) a!1)))
(assert (or (not |vsolver#1|) (>= INV_4_n 0.0) (not spacer_proxy!16)))
(assert (or (not |vsolver#1|) (not (>= INV_2_n (/ 1.0 32.0))) (not spacer_proxy!17)))
(assert (or (not INV__tr1)
    (not |vsolver#1|)
    (>= INV_2_0 (/ 1.0 32.0))
    (not spacer_proxy!18)))
(assert (or |INV#level_0!10| (not |vsolver#1|) (>= INV_2_n (/ 1.0 32.0))))
(assert (or (not INV__tr1) |INV#level_1!13| (not |vsolver#1|) (>= INV_2_0 (/ 1.0 32.0))))
(assert (let ((a!1 (not (>= (+ (* (/ 14.0 3.0) INV_0_n)
                       (* (/ 1.0 3.0) INV_2_n)
                       (* 2.0 INV_4_n)
                       (* (- (/ 17.0 3.0)) INV_5_n))
                    (- (/ 3.0 32.0))))))
  (or (not |vsolver#1|) a!1 (not spacer_proxy!19))))
(assert (or (not |vsolver#1|) (>= INV_2_n 0.0) (not spacer_proxy!20)))
(assert (or (not |vsolver#1|) (not (<= INV_5_n (- (/ 1.0 32.0)))) (not spacer_proxy!21)))
(assert (or (not INV__tr1)
    (not |vsolver#1|)
    (<= INV_5_0 (- (/ 1.0 32.0)))
    (not spacer_proxy!22)))
(assert (or |INV#level_0!10| (not |vsolver#1|) (<= INV_5_n (- (/ 1.0 32.0)))))
(assert (or (not INV__tr1)
    |INV#level_1!13|
    (not |vsolver#1|)
    (<= INV_5_0 (- (/ 1.0 32.0)))))
(assert (or (not |vsolver#1|) (>= INV_6_n 0.0) (not spacer_proxy!23)))
(assert (let ((a!1 (not (>= (+ (* (/ 14.0 3.0) INV_0_n)
                       (* (/ 1.0 3.0) INV_2_n)
                       (* 2.0 INV_4_n)
                       (* (- 1.0) INV_6_n))
                    (- (/ 3.0 32.0))))))
  (or (not |vsolver#1|) a!1 (not spacer_proxy!24))))
(assert (or (not |vsolver#1|) (not spacer_proxy!25) (not (>= INV_5_n 0.0))))
(assert (or (not |vsolver#1|) (not (<= INV_6_n (- (/ 1.0 32.0)))) (not spacer_proxy!26)))
(assert (or (not INV__tr1)
    (not |vsolver#1|)
    (<= INV_6_0 (- (/ 1.0 32.0)))
    (not spacer_proxy!27)))
(assert (or |INV#level_0!10| (not |vsolver#1|) (<= INV_6_n (- (/ 1.0 32.0)))))
(assert (or (not INV__tr1)
    |INV#level_1!13|
    (not |vsolver#1|)
    (<= INV_6_0 (- (/ 1.0 32.0)))))
(assert (or (not |vsolver#1|) (>= INV_3_n 0.0) (not spacer_proxy!28)))
(assert (let ((a!1 (not (>= (+ (* (/ 14.0 3.0) INV_0_n)
                       (* (/ 1.0 3.0) INV_2_n)
                       (* (- (/ 22.0 3.0)) INV_3_n)
                       (* 2.0 INV_4_n))
                    (- (/ 3.0 32.0))))))
  (or (not |vsolver#1|) a!1 (not spacer_proxy!29))))
(assert (or (not |vsolver#1|) (not spacer_proxy!30) (= INV_1_n 0.0)))
(assert (or (not INV__tr1)
    (not |vsolver#1|)
    (not (= INV_1_0 0.0))
    (not spacer_proxy!31)))
(assert (or (not |vsolver#1|) (<= INV_1_n 0.0) (not spacer_proxy!32)))
(assert (or (not INV__tr1)
    (not |vsolver#1|)
    (not spacer_proxy!33)
    (not (<= INV_1_0 0.0))))
(assert (or |INV#level_0!10| (not |vsolver#1|) (not (<= INV_1_n 0.0))))
(assert (or (not INV__tr1) |INV#level_1!13| (not |vsolver#1|) (not (<= INV_1_0 0.0))))
(assert (or (not |vsolver#1|) (>= INV_1_n 0.0) (not spacer_proxy!34)))
(assert (let ((a!1 (not (>= (+ (* (/ 14.0 3.0) INV_0_n)
                       (* 10.0 INV_1_n)
                       (* (/ 1.0 3.0) INV_2_n)
                       (* (- (/ 22.0 3.0)) INV_3_n)
                       (* 2.0 INV_4_n))
                    (- (/ 3.0 32.0))))))
  (or (not |vsolver#1|) (not spacer_proxy!35) a!1)))
(assert (or (not |vsolver#1|) (not (<= INV_3_n 0.0)) (not spacer_proxy!36)))
(assert (or (not INV__tr1) (not |vsolver#1|) (<= INV_3_0 0.0) (not spacer_proxy!37)))
(assert (or |INV#level_0!10| (not |vsolver#1|) (<= INV_3_n 0.0)))
(assert (or (not INV__tr1) |INV#level_1!13| (not |vsolver#1|) (<= INV_3_0 0.0)))
(assert (or (not |vsolver#1|) (not spacer_proxy!38) (not (>= INV_0_n (/ 9.0 1024.0)))))
(assert (or (not INV__tr1)
    (not |vsolver#1|)
    (not spacer_proxy!39)
    (>= INV_0_0 (/ 9.0 1024.0))))
(assert (or |INV#level_1!13| (not |vsolver#1|) (>= INV_0_n (/ 9.0 1024.0))))
(assert (or (not INV__tr1)
    (not |vsolver#1|)
    |INV#level_2!14|
    (>= INV_0_0 (/ 9.0 1024.0))))
(assert (or |INV#level_1!13| (not |vsolver#1|) (>= INV_4_n (/ 1.0 16.0))))
(assert (or (not INV__tr1) (not |vsolver#1|) (>= INV_4_0 (/ 1.0 16.0)) |INV#level_2!14|))
(assert (or (not |vsolver#1|) (= INV_6_n 0.0) (not spacer_proxy!40)))
(assert (or (not |vsolver#1|) (<= INV_1_n (/ 1.0 16.0)) (not spacer_proxy!41)))
(assert (or (not INV__tr1)
    (>= INV_3_0 0.0)
    (not |vsolver#1|)
    (not (= INV_6_0 0.0))
    (not (<= INV_1_0 (/ 1.0 16.0)))
    (not spacer_proxy!42)))
;; extra clause
(assert (or INV_ext0_n INV__tr0 INV__tr1 ))
(check-sat |vsolver#1|
 spacer_proxy!42
 (not INV_ext0_n)
 |INV#level_0!10|
 (not |INV#level_1!13|)
 (not |INV#level_2!14|)
 (not |INV#level_3!16|)
 (not |INV#level_4!18|)
 (not |INV#level_5!20|)
 spacer_proxy!41
 spacer_proxy!9
 spacer_proxy!40
)
(exit)
(:added-eqs          731
 :arith-add-rows     1820
 :arith-assert-diseq 374
 :arith-assert-lower 1056
 :arith-assert-upper 940
 :arith-bound-prop   143
 :arith-conflicts    13
 :arith-eq-adapter   249
 :arith-fixed-eqs    93
 :arith-offset-eqs   22
 :arith-pivots       239
 :conflicts          70
 :decisions          702
 :del-clause         132
 :final-checks       18
 :minimized-lits     2
 :mk-bool-var        638
 :mk-clause          500
 :num-checks         59
 :propagations       3430
 :time               0.00)
(params arith.solver 2 random_seed 0 dump_benchmarks true dump_threshold 0.00 mbqi true arith.ignore_int true array.weak true)