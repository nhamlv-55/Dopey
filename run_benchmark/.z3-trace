-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
state_2_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_0_n state_3_n state_1_n state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_0_n state_3_n state_1_n state_2_n state_5_n)
into
(and state_0_n state_1_n state_2_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
state_1_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_3_n (not state_0_n) state_5_n state_2_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n state_3_n (not state_0_n) state_5_n state_2_n)
into
(and state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_4_n) state_0_n state_1_n state_2_n state_5_n state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_4_n) state_0_n state_1_n state_2_n state_5_n state_3_n)
into
(and state_0_n state_1_n state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
state_0_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_5_n)
     state_1_n
     (not state_4_n)
     (not state_2_n)
     (not state_3_n)
     (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_5_n)
     state_1_n
     (not state_4_n)
     (not state_2_n)
     (not state_3_n)
     (not state_0_n))
into
(and state_1_n (not state_4_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_5_n state_3_n state_1_n state_2_n (not state_0_n) (not state_4_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_5_n state_3_n state_1_n state_2_n (not state_0_n) (not state_4_n))
into
(and state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_2_n state_5_n state_0_n state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_4_n)
     state_0_n
     (not state_3_n)
     (not state_1_n)
     (not state_2_n)
     (not state_5_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_4_n)
     state_0_n
     (not state_3_n)
     (not state_1_n)
     (not state_2_n)
     (not state_5_n)
     (= state_782_n 1.0))
into
(and state_0_n
     (not state_3_n)
     (not state_4_n)
     (not state_5_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n
     (not state_4_n)
     (not state_2_n)
     (not state_5_n)
     (not state_0_n)
     (not state_3_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n
     (not state_4_n)
     (not state_2_n)
     (not state_5_n)
     (not state_0_n)
     (not state_3_n)
     (= state_782_n 1.0))
into
(and state_1_n
     (not state_3_n)
     (not state_4_n)
     (not state_5_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n (not state_0_n) state_5_n (not state_4_n) state_1_n state_2_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n (not state_0_n) state_5_n (not state_4_n) state_1_n state_2_n)
into
(and state_1_n state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n state_0_n state_5_n state_3_n state_1_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_1_n)
     (not state_3_n)
     state_0_n
     (not state_4_n)
     (not state_2_n)
     (not state_5_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_1_n)
     (not state_3_n)
     state_0_n
     (not state_4_n)
     (not state_2_n)
     (not state_5_n)
     (= state_782_n 1.0))
into
(and state_0_n
     (not state_2_n)
     (not state_3_n)
     (not state_4_n)
     (not state_5_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
state_5_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_0_n
     state_5_n
     state_3_n
     (not state_1_n)
     (not state_2_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_0_n
     state_5_n
     state_3_n
     (not state_1_n)
     (not state_2_n)
     (= state_782_n 1.0))
into
state_5_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n
     state_5_n
     (not state_0_n)
     (not state_4_n)
     (not state_2_n)
     state_1_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n
     state_5_n
     (not state_0_n)
     (not state_4_n)
     (not state_2_n)
     state_1_n)
into
state_5_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n
     state_5_n
     (not state_1_n)
     (not state_4_n)
     state_3_n
     state_0_n
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_2_n
     state_5_n
     (not state_1_n)
     (not state_4_n)
     state_3_n
     state_0_n
     (= state_782_n 1.0))
into
(and state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n
     (not state_4_n)
     (not state_2_n)
     (not state_0_n)
     (not state_5_n)
     (not state_3_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n
     (not state_4_n)
     (not state_2_n)
     (not state_0_n)
     (not state_5_n)
     (not state_3_n)
     (= state_782_n 1.0))
into
(and state_1_n
     (not state_2_n)
     (not state_3_n)
     (not state_4_n)
     (not state_5_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_5_n state_3_n state_2_n (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n state_5_n state_3_n state_2_n (not state_0_n))
into
(and state_1_n state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n state_5_n state_1_n state_0_n state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_3_n) state_2_n state_1_n state_5_n state_0_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_3_n) state_2_n state_1_n state_5_n state_0_n)
into
(and state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n
     state_5_n
     (not state_0_n)
     (not state_4_n)
     state_1_n
     (not state_2_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n
     state_5_n
     (not state_0_n)
     (not state_4_n)
     state_1_n
     (not state_2_n))
into
(and state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_0_n state_2_n (not state_4_n) state_5_n state_3_n (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_0_n state_2_n (not state_4_n) state_5_n state_3_n (not state_1_n))
into
(and state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n
     (not state_0_n)
     (not state_4_n)
     (not state_3_n)
     (not state_2_n)
     (not state_5_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n
     (not state_0_n)
     (not state_4_n)
     (not state_3_n)
     (not state_2_n)
     (not state_5_n)
     (= state_782_n 1.0))
into
(and state_1_n
     (not state_2_n)
     (not state_3_n)
     (not state_4_n)
     (not state_5_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_5_n state_3_n state_1_n (not state_4_n) (not state_0_n) state_2_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_5_n state_3_n state_1_n (not state_4_n) (not state_0_n) state_2_n)
into
(and state_1_n state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_4_n) state_2_n state_1_n state_0_n state_5_n state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_4_n) state_2_n state_1_n state_0_n state_5_n state_3_n)
into
(and state_0_n state_1_n state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_0_n state_2_n state_1_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_0_n state_2_n state_1_n state_5_n)
into
(and state_1_n state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_2_n) state_5_n (not state_0_n) state_1_n state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_2_n) state_5_n (not state_0_n) state_1_n state_3_n)
into
(and state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n (not state_1_n) state_5_n state_0_n (not state_4_n) state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_2_n (not state_1_n) state_5_n state_0_n (not state_4_n) state_3_n)
into
(and state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n
     (not state_4_n)
     (not state_2_n)
     (not state_5_n)
     (not state_0_n)
     (not state_3_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n
     (not state_4_n)
     (not state_2_n)
     (not state_5_n)
     (not state_0_n)
     (not state_3_n)
     (= state_782_n 1.0))
into
(and state_1_n
     (not state_2_n)
     (not state_3_n)
     (not state_4_n)
     (not state_5_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n (not state_0_n) state_3_n state_1_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_2_n (not state_0_n) state_3_n state_1_n state_5_n)
into
(and state_1_n state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_4_n) state_0_n state_1_n state_2_n state_5_n state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_4_n) state_0_n state_1_n state_2_n state_5_n state_3_n)
into
(and state_0_n state_1_n state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_3_n)
     state_0_n
     (not state_2_n)
     state_1_n
     state_5_n
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_3_n)
     state_0_n
     (not state_2_n)
     state_1_n
     state_5_n
     (= state_782_n 1.0))
into
(and state_1_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
state_4_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_5_n)
     state_1_n
     state_3_n
     (not state_2_n)
     state_0_n
     state_4_n
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_5_n)
     state_1_n
     state_3_n
     (not state_2_n)
     state_0_n
     state_4_n
     (= state_782_n 1.0))
into
state_4_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n state_4_n (not state_0_n) state_2_n state_1_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n state_4_n (not state_0_n) state_2_n state_1_n)
into
state_4_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_0_n (not state_1_n) (not state_3_n) state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_0_n (not state_1_n) (not state_3_n) state_5_n)
into
state_5_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_5_n
     state_2_n
     (not state_3_n)
     (not state_4_n)
     (not state_1_n)
     (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_5_n
     state_2_n
     (not state_3_n)
     (not state_4_n)
     (not state_1_n)
     (not state_0_n))
into
(and state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_5_n state_0_n (not state_3_n) state_1_n state_2_n (not state_4_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_5_n state_0_n (not state_3_n) state_1_n state_2_n (not state_4_n))
into
(and state_1_n state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_5_n
     (not state_2_n)
     state_3_n
     state_1_n
     (not state_4_n)
     (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_5_n
     (not state_2_n)
     state_3_n
     state_1_n
     (not state_4_n)
     (not state_0_n))
into
(and state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n state_0_n state_2_n (not state_4_n) state_5_n (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n state_0_n state_2_n (not state_4_n) state_5_n (not state_1_n))
into
(and state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_5_n)
     (not state_0_n)
     (not state_4_n)
     (not state_2_n)
     state_1_n
     (not state_3_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_5_n)
     (not state_0_n)
     (not state_4_n)
     (not state_2_n)
     state_1_n
     (not state_3_n)
     (= state_782_n 1.0))
into
(and state_1_n
     (not state_2_n)
     (not state_3_n)
     (not state_4_n)
     (not state_5_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n (not state_0_n) state_5_n state_3_n state_2_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n (not state_0_n) state_5_n state_3_n state_2_n)
into
(and state_1_n state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n state_5_n state_3_n state_0_n state_1_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n (not state_5_n) state_2_n state_1_n state_4_n (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n (not state_5_n) state_2_n state_1_n state_4_n (not state_0_n))
into
(and state_2_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_0_n
     state_5_n
     (not state_4_n)
     (not state_2_n)
     (not state_3_n)
     (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_0_n
     state_5_n
     (not state_4_n)
     (not state_2_n)
     (not state_3_n)
     (not state_1_n))
into
state_5_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n (not state_1_n) state_5_n (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_2_n (not state_1_n) state_5_n (not state_0_n))
into
(and state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_0_n state_5_n state_1_n (not state_4_n) (not state_3_n) state_2_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_0_n state_5_n state_1_n (not state_4_n) (not state_3_n) state_2_n)
into
(and state_1_n state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_5_n
     state_3_n
     state_1_n
     (not state_4_n)
     (not state_2_n)
     (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_5_n
     state_3_n
     state_1_n
     (not state_4_n)
     (not state_2_n)
     (not state_0_n))
into
(and state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n state_5_n state_2_n state_0_n (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n state_5_n state_2_n state_0_n (not state_1_n))
into
(and state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n
     (not state_3_n)
     (not state_4_n)
     (not state_2_n)
     (not state_5_n)
     (not state_0_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n
     (not state_3_n)
     (not state_4_n)
     (not state_2_n)
     (not state_5_n)
     (not state_0_n)
     (= state_782_n 1.0))
into
(and state_1_n
     (not state_2_n)
     (not state_3_n)
     (not state_4_n)
     (not state_5_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_2_n state_5_n state_3_n (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n state_2_n state_5_n state_3_n (not state_0_n))
into
(and state_1_n state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_0_n state_3_n state_1_n state_5_n state_2_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_4_n
     state_3_n
     (not state_2_n)
     state_0_n
     (not state_5_n)
     state_1_n
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_4_n
     state_3_n
     (not state_2_n)
     state_0_n
     (not state_5_n)
     state_1_n
     (= state_782_n 1.0))
into
(and state_0_n state_1_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_4_n
     state_3_n
     (not state_0_n)
     state_2_n
     state_1_n
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_4_n
     state_3_n
     (not state_0_n)
     state_2_n
     state_1_n
     (= state_782_n 1.0))
into
(and state_1_n state_2_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_3_n)
     state_5_n
     (not state_4_n)
     (not state_1_n)
     (not state_2_n)
     state_0_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_3_n)
     state_5_n
     (not state_4_n)
     (not state_1_n)
     (not state_2_n)
     state_0_n)
into
state_5_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_5_n state_2_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n state_0_n state_5_n state_1_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_2_n state_0_n state_5_n state_1_n)
into
(and state_1_n state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n state_5_n state_1_n (not state_0_n) (not state_2_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n state_5_n state_1_n (not state_0_n) (not state_2_n))
into
(and state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_5_n state_2_n state_0_n (not state_1_n) state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_5_n state_2_n state_0_n (not state_1_n) state_3_n)
into
(and state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n)
     (not state_4_n)
     (not state_2_n)
     state_1_n
     (not state_5_n)
     (not state_3_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n)
     (not state_4_n)
     (not state_2_n)
     state_1_n
     (not state_5_n)
     (not state_3_n)
     (= state_782_n 1.0))
into
(and state_1_n
     (not state_2_n)
     (not state_3_n)
     (not state_4_n)
     (not state_5_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n (not state_0_n) state_5_n state_2_n state_1_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n (not state_0_n) state_5_n state_2_n state_1_n)
into
(and state_1_n state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_0_n state_2_n (not state_4_n) state_5_n state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n state_0_n state_2_n (not state_4_n) state_5_n state_3_n)
into
(and state_0_n state_1_n state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_2_n) state_4_n (not state_1_n) state_3_n (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_2_n) state_4_n (not state_1_n) state_3_n (not state_0_n))
into
(and state_3_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_4_n state_0_n (not state_2_n) state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n state_4_n state_0_n (not state_2_n) state_3_n)
into
(and state_3_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_4_n state_2_n state_3_n (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n state_4_n state_2_n state_3_n (not state_0_n))
into
(and state_2_n state_3_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_2_n)
     (not state_1_n)
     (not state_3_n)
     (not state_4_n)
     state_0_n
     state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_2_n)
     (not state_1_n)
     (not state_3_n)
     (not state_4_n)
     state_0_n
     state_5_n)
into
state_5_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n
     (not state_3_n)
     (not state_1_n)
     state_5_n
     (not state_0_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_2_n
     (not state_3_n)
     (not state_1_n)
     state_5_n
     (not state_0_n)
     (= state_782_n 1.0))
into
(and state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n state_5_n state_1_n state_0_n (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_2_n state_5_n state_1_n state_0_n (not state_3_n))
into
(and state_0_n state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_2_n)
     state_3_n
     (not state_0_n)
     state_1_n
     (not state_4_n)
     state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_2_n)
     state_3_n
     (not state_0_n)
     state_1_n
     (not state_4_n)
     state_5_n)
into
(and state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n state_5_n state_2_n (not state_1_n) state_0_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n state_5_n state_2_n (not state_1_n) state_0_n)
into
(and state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n
     (not state_4_n)
     (not state_2_n)
     (not state_5_n)
     (not state_3_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n state_2_n state_1_n (not state_4_n) state_5_n (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n state_2_n state_1_n (not state_4_n) state_5_n (not state_0_n))
into
(and state_1_n state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n state_0_n state_1_n state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n state_0_n state_1_n state_4_n (not state_5_n) (not state_2_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n state_0_n state_1_n state_4_n (not state_5_n) (not state_2_n))
into
(and state_1_n state_3_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n) state_2_n state_4_n state_3_n state_1_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n) state_2_n state_4_n state_3_n state_1_n)
into
(and state_2_n state_3_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_2_n)
     (not state_1_n)
     (not state_3_n)
     (not state_4_n)
     state_0_n
     state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_2_n)
     (not state_1_n)
     (not state_3_n)
     (not state_4_n)
     state_0_n
     state_5_n)
into
state_5_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n (not state_1_n) (not state_3_n) (not state_0_n) state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_2_n (not state_1_n) (not state_3_n) (not state_0_n) state_5_n)
into
(and state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_5_n state_0_n (not state_3_n) (not state_4_n) state_1_n state_2_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_5_n state_0_n (not state_3_n) (not state_4_n) state_1_n state_2_n)
into
(and state_1_n state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_2_n) state_3_n state_5_n (not state_0_n) state_1_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_2_n) state_3_n state_5_n (not state_0_n) state_1_n)
into
(and state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n (not state_1_n) state_5_n (not state_4_n) state_3_n state_0_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_2_n (not state_1_n) state_5_n (not state_4_n) state_3_n state_0_n)
into
(and state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_3_n)
     (not state_4_n)
     (not state_2_n)
     state_1_n
     (not state_5_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_5_n (not state_0_n) state_2_n state_1_n state_3_n (not state_4_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_5_n (not state_0_n) state_2_n state_1_n state_3_n (not state_4_n))
into
(and state_1_n state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_3_n state_2_n (not state_4_n) state_0_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n state_3_n state_2_n (not state_4_n) state_0_n state_5_n)
into
(and state_0_n state_1_n state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_5_n)
     state_2_n
     state_1_n
     state_3_n
     (not state_0_n)
     (not state_4_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_5_n)
     state_2_n
     state_1_n
     state_3_n
     (not state_0_n)
     (not state_4_n))
into
(and state_1_n state_2_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
state_3_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_2_n)
     (not state_1_n)
     state_0_n
     (not state_4_n)
     (not state_5_n)
     state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_2_n)
     (not state_1_n)
     state_0_n
     (not state_4_n)
     (not state_5_n)
     state_3_n)
into
state_3_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_1_n)
     state_3_n
     (not state_0_n)
     state_2_n
     (not state_4_n)
     (not state_5_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_1_n)
     state_3_n
     (not state_0_n)
     state_2_n
     (not state_4_n)
     (not state_5_n))
into
state_3_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_3_n state_2_n (not state_4_n) state_0_n (not state_5_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n state_3_n state_2_n (not state_4_n) state_0_n (not state_5_n))
into
state_3_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n) state_4_n state_1_n (not state_2_n) (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n) state_4_n state_1_n (not state_2_n) (not state_3_n))
into
state_4_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_3_n) (not state_1_n) state_4_n state_0_n state_2_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_3_n) (not state_1_n) state_4_n state_0_n state_2_n)
into
(and state_2_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n (not state_1_n) state_4_n (not state_2_n) (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n (not state_1_n) state_4_n (not state_2_n) (not state_0_n))
into
(and state_3_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_5_n) state_0_n state_1_n (not state_2_n) state_3_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_5_n) state_0_n state_1_n (not state_2_n) state_3_n state_4_n)
into
(and state_1_n state_3_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n state_4_n state_1_n state_3_n (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_2_n state_4_n state_1_n state_3_n (not state_0_n))
into
(and state_2_n state_3_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_3_n)
     (not state_1_n)
     (not state_2_n)
     (not state_4_n)
     state_0_n
     state_5_n
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_3_n)
     (not state_1_n)
     (not state_2_n)
     (not state_4_n)
     state_0_n
     state_5_n
     (= state_782_n 1.0))
into
state_5_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n) state_2_n (not state_3_n) (not state_1_n) state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n) state_2_n (not state_3_n) (not state_1_n) state_5_n)
into
(and state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_5_n state_2_n state_0_n (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n state_5_n state_2_n state_0_n (not state_3_n))
into
(and state_0_n state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n
     state_3_n
     state_5_n
     (not state_4_n)
     (not state_2_n)
     (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n
     state_3_n
     state_5_n
     (not state_4_n)
     (not state_2_n)
     (not state_0_n))
into
(and state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n state_2_n state_5_n state_0_n (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n state_2_n state_5_n state_0_n (not state_1_n))
into
(and state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n)
     (not state_4_n)
     state_1_n
     (not state_2_n)
     (not state_5_n)
     (not state_3_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n)
     (not state_4_n)
     state_1_n
     (not state_2_n)
     (not state_5_n)
     (not state_3_n)
     (= state_782_n 1.0))
into
(and state_1_n
     (not state_2_n)
     (not state_3_n)
     (not state_4_n)
     (not state_5_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_5_n (not state_0_n) state_2_n state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n state_5_n (not state_0_n) state_2_n state_3_n)
into
(and state_1_n state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_0_n state_5_n state_1_n state_2_n state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_2_n state_0_n (not state_4_n) (not state_5_n) state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n state_2_n state_0_n (not state_4_n) (not state_5_n) state_3_n)
into
(and state_2_n state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_5_n) state_4_n state_1_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_5_n) state_4_n state_1_n)
into
state_4_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_3_n) state_0_n state_2_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_3_n) state_0_n state_2_n state_4_n)
into
(and state_2_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n state_4_n (not state_0_n) (not state_1_n) (not state_2_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n state_4_n (not state_0_n) (not state_1_n) (not state_2_n))
into
(and state_3_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_4_n state_3_n state_1_n (not state_2_n) (not state_5_n) state_0_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_4_n state_3_n state_1_n (not state_2_n) (not state_5_n) state_0_n)
into
(and state_0_n state_3_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_2_n state_4_n state_3_n (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n state_2_n state_4_n state_3_n (not state_0_n))
into
(and state_2_n state_3_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_2_n) state_0_n state_5_n (not state_1_n) (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_2_n) state_0_n state_5_n (not state_1_n) (not state_3_n))
into
state_5_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n) state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n) state_2_n state_5_n)
into
(and state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_0_n state_2_n state_1_n state_5_n (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_0_n state_2_n state_1_n state_5_n (not state_3_n))
into
(and state_1_n state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n) state_5_n state_1_n (not state_2_n) state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n) state_5_n state_1_n (not state_2_n) state_3_n)
into
(and state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n (not state_1_n) state_5_n state_3_n state_0_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_2_n (not state_1_n) state_5_n state_3_n state_0_n)
into
(and state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n)
     (not state_4_n)
     (not state_2_n)
     state_1_n
     (not state_5_n)
     (not state_3_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n)
     (not state_4_n)
     (not state_2_n)
     state_1_n
     (not state_5_n)
     (not state_3_n)
     (= state_782_n 1.0))
into
(and state_1_n
     (not state_2_n)
     (not state_3_n)
     (not state_4_n)
     (not state_5_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n (not state_0_n) state_2_n state_5_n state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n (not state_0_n) state_2_n state_5_n state_3_n)
into
(and state_1_n state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_0_n state_3_n state_1_n state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_5_n) state_3_n state_1_n (not state_4_n) state_0_n state_2_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_5_n) state_3_n state_1_n (not state_4_n) state_0_n state_2_n)
into
(and state_1_n state_2_n state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n
     state_4_n
     (not state_3_n)
     (not state_2_n)
     (not state_0_n)
     (not state_5_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n
     state_4_n
     (not state_3_n)
     (not state_2_n)
     (not state_0_n)
     (not state_5_n))
into
state_4_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n state_0_n (not state_3_n) state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_2_n state_0_n (not state_3_n) state_4_n)
into
(and state_2_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n (not state_1_n) (not state_0_n) (not state_2_n) state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n (not state_1_n) (not state_0_n) (not state_2_n) state_4_n)
into
(and state_3_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_3_n state_4_n state_0_n (not state_2_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n state_3_n state_4_n state_0_n (not state_2_n))
into
(and state_0_n state_3_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n state_4_n (not state_0_n) state_3_n state_1_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_2_n state_4_n (not state_0_n) state_3_n state_1_n)
into
(and state_2_n state_3_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_5_n
     (not state_1_n)
     (not state_3_n)
     state_0_n
     (not state_4_n)
     (not state_2_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_5_n
     (not state_1_n)
     (not state_3_n)
     state_0_n
     (not state_4_n)
     (not state_2_n))
into
state_5_n
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n)
     (not state_1_n)
     state_5_n
     (not state_4_n)
     state_2_n
     (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n)
     (not state_1_n)
     state_5_n
     (not state_4_n)
     state_2_n
     (not state_3_n))
into
(and state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_3_n) state_0_n state_5_n state_1_n state_2_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_3_n) state_0_n state_5_n state_1_n state_2_n)
into
(and state_1_n state_2_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n
     state_5_n
     (not state_4_n)
     (not state_2_n)
     state_3_n
     (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n
     state_5_n
     (not state_4_n)
     (not state_2_n)
     state_3_n
     (not state_0_n))
into
(and state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_5_n state_3_n state_2_n state_0_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_5_n state_3_n state_2_n state_0_n)
into
(and state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_5_n)
     (not state_0_n)
     (not state_4_n)
     (not state_2_n)
     state_1_n
     (not state_3_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_5_n)
     (not state_0_n)
     (not state_4_n)
     (not state_2_n)
     state_1_n
     (not state_3_n)
     (= state_782_n 1.0))
into
(and state_1_n
     (not state_2_n)
     (not state_3_n)
     (not state_4_n)
     (not state_5_n)
     (= state_782_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n state_2_n state_5_n state_1_n (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n state_2_n state_5_n state_1_n (not state_0_n))
into
(and state_1_n state_2_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_0_n state_5_n state_1_n state_2_n state_3_n)
------------------------------------------------
s.cpp:64 ---------
LEMMA:
(and (not state_4_n)
     (not state_2_n)
     state_0_n
     (not state_1_n)
     (not state_5_n)
     (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_4_n)
     (not state_2_n)
     state_0_n
     (not state_1_n)
     (not state_5_n)
     (not (>= state_702_n 0.0)))
into
(and state_0_n (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_2_n)
     (not state_4_n)
     (not state_5_n)
     (not state_3_n)
     state_1_n
     (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_2_n)
     (not state_4_n)
     (not state_5_n)
     (not state_3_n)
     state_1_n
     (not (>= state_702_n 0.0)))
into
(and state_1_n (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n)
     (not state_4_n)
     (not state_5_n)
     state_2_n
     state_1_n
     (not state_3_n)
     (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n)
     (not state_4_n)
     (not state_5_n)
     state_2_n
     state_1_n
     (not state_3_n)
     (not (>= state_702_n 0.0)))
into
(and state_2_n (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n
     (not state_4_n)
     state_0_n
     (not state_2_n)
     (not state_5_n)
     (not state_1_n)
     (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n
     (not state_4_n)
     state_0_n
     (not state_2_n)
     (not state_5_n)
     (not state_1_n)
     (not (>= state_702_n 0.0)))
into
(and state_0_n (not state_2_n) (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n)
     state_3_n
     (not state_5_n)
     state_2_n
     (not state_4_n)
     (not state_1_n)
     (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n)
     state_3_n
     (not state_5_n)
     state_2_n
     (not state_4_n)
     (not state_1_n)
     (not (>= state_702_n 0.0)))
into
(and state_3_n state_2_n (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n
     (not state_4_n)
     state_1_n
     state_2_n
     (not state_5_n)
     state_0_n
     (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n
     (not state_4_n)
     state_1_n
     state_2_n
     (not state_5_n)
     state_0_n
     (not (>= state_702_n 0.0)))
into
(and state_3_n state_1_n state_2_n (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_2_n)
     (not state_3_n)
     (not state_5_n)
     state_1_n
     (not state_0_n)
     state_4_n
     (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_2_n)
     (not state_3_n)
     (not state_5_n)
     state_1_n
     (not state_0_n)
     state_4_n
     (not (>= state_702_n 0.0)))
into
(and state_4_n (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_1_n)
     (not state_3_n)
     state_0_n
     (not state_5_n)
     state_2_n
     state_4_n
     (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_1_n)
     (not state_3_n)
     state_0_n
     (not state_5_n)
     state_2_n
     state_4_n
     (not (>= state_702_n 0.0)))
into
(and state_2_n state_4_n (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n
     (not state_0_n)
     (not state_5_n)
     state_4_n
     (not state_2_n)
     (not state_1_n)
     (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n
     (not state_0_n)
     (not state_5_n)
     state_4_n
     (not state_2_n)
     (not state_1_n)
     (not (>= state_702_n 0.0)))
into
(and state_3_n state_4_n (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n
     state_1_n
     (not state_5_n)
     state_4_n
     (not state_2_n)
     state_0_n
     (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n
     state_1_n
     (not state_5_n)
     state_4_n
     (not state_2_n)
     state_0_n
     (not (>= state_702_n 0.0)))
into
(and state_3_n state_0_n state_4_n (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n)
     state_1_n
     state_3_n
     state_2_n
     state_4_n
     (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n)
     state_1_n
     state_3_n
     state_2_n
     state_4_n
     (not (>= state_702_n 0.0)))
into
(and state_3_n state_2_n state_4_n (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n)
     (not state_1_n)
     (not state_3_n)
     (not state_4_n)
     state_5_n
     (not state_2_n)
     (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n)
     (not state_1_n)
     (not state_3_n)
     (not state_4_n)
     state_5_n
     (not state_2_n)
     (not (>= state_702_n 0.0)))
into
(and state_5_n (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_2_n)
     (not state_4_n)
     (not state_3_n)
     (not state_1_n)
     state_0_n
     state_5_n
     (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_2_n)
     (not state_4_n)
     (not state_3_n)
     (not state_1_n)
     state_0_n
     state_5_n
     (not (>= state_702_n 0.0)))
into
(and state_0_n state_5_n (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_5_n
     (not state_3_n)
     state_2_n
     (not state_0_n)
     (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_5_n
     (not state_3_n)
     state_2_n
     (not state_0_n)
     (not (>= state_702_n 0.0)))
into
(and state_2_n state_5_n (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_5_n
     (not state_3_n)
     state_0_n
     state_1_n
     state_2_n
     (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_5_n
     (not state_3_n)
     state_0_n
     state_1_n
     state_2_n
     (not (>= state_702_n 0.0)))
into
(and state_1_n state_2_n state_5_n (not (>= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n state_4_n state_1_n state_0_n (not state_5_n) state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_2_n state_4_n state_1_n state_0_n (not state_5_n) state_3_n)
into
(and state_3_n state_0_n state_1_n state_2_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_5_n)
     (not state_2_n)
     state_0_n
     (not state_4_n)
     (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_5_n)
     (not state_2_n)
     state_0_n
     (not state_4_n)
     (not (<= state_702_n 0.0)))
into
(and state_0_n (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n
     (not state_2_n)
     (not state_3_n)
     (not state_5_n)
     (not state_4_n)
     (not state_0_n)
     (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n
     (not state_2_n)
     (not state_3_n)
     (not state_5_n)
     (not state_4_n)
     (not state_0_n)
     (not (<= state_702_n 0.0)))
into
(and state_1_n (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n)
     (not state_3_n)
     (not state_4_n)
     state_2_n
     state_1_n
     (not state_5_n)
     (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n)
     (not state_3_n)
     (not state_4_n)
     state_2_n
     state_1_n
     (not state_5_n)
     (not (<= state_702_n 0.0)))
into
(and state_2_n (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n
     (not state_4_n)
     state_0_n
     (not state_2_n)
     (not state_1_n)
     (not state_5_n)
     (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n
     (not state_4_n)
     state_0_n
     (not state_2_n)
     (not state_1_n)
     (not state_5_n)
     (not (<= state_702_n 0.0)))
into
(and state_0_n (not state_2_n) (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_1_n)
     state_2_n
     (not state_5_n)
     (not state_0_n)
     (not state_4_n)
     state_3_n
     (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_1_n)
     state_2_n
     (not state_5_n)
     (not state_0_n)
     (not state_4_n)
     state_3_n
     (not (<= state_702_n 0.0)))
into
(and state_3_n state_2_n (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n
     state_1_n
     (not state_5_n)
     state_2_n
     (not state_4_n)
     state_0_n
     (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n
     state_1_n
     (not state_5_n)
     state_2_n
     (not state_4_n)
     state_0_n
     (not (<= state_702_n 0.0)))
into
(and state_3_n state_0_n state_2_n (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n)
     (not state_3_n)
     (not state_2_n)
     (not state_5_n)
     state_1_n
     state_4_n
     (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n)
     (not state_3_n)
     (not state_2_n)
     (not state_5_n)
     state_1_n
     state_4_n
     (not (<= state_702_n 0.0)))
into
(and state_4_n (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_1_n)
     state_2_n
     state_4_n
     (not state_3_n)
     state_0_n
     (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_1_n)
     state_2_n
     state_4_n
     (not state_3_n)
     state_0_n
     (not (<= state_702_n 0.0)))
into
(and state_2_n state_4_n (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n)
     (not state_1_n)
     (not state_5_n)
     state_3_n
     (not state_2_n)
     state_4_n
     (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n)
     (not state_1_n)
     (not state_5_n)
     state_3_n
     (not state_2_n)
     state_4_n
     (not (<= state_702_n 0.0)))
into
(and state_3_n state_4_n (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_2_n)
     state_1_n
     (not state_5_n)
     state_0_n
     state_3_n
     state_4_n
     (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_2_n)
     state_1_n
     (not state_5_n)
     state_0_n
     state_3_n
     state_4_n
     (not (<= state_702_n 0.0)))
into
(and state_3_n state_1_n state_4_n (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n
     (not state_0_n)
     (not state_5_n)
     state_4_n
     state_1_n
     state_2_n
     (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n
     (not state_0_n)
     (not state_5_n)
     state_4_n
     state_1_n
     state_2_n
     (not (<= state_702_n 0.0)))
into
(and state_3_n state_2_n state_4_n (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_5_n
     (not state_3_n)
     (not state_1_n)
     (not state_0_n)
     (not state_2_n)
     (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_5_n
     (not state_3_n)
     (not state_1_n)
     (not state_0_n)
     (not state_2_n)
     (not (<= state_702_n 0.0)))
into
(and state_5_n (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_1_n)
     (not state_4_n)
     (not state_3_n)
     (not state_2_n)
     state_0_n
     state_5_n
     (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_1_n)
     (not state_4_n)
     (not state_3_n)
     (not state_2_n)
     state_0_n
     state_5_n
     (not (<= state_702_n 0.0)))
into
(and state_0_n state_5_n (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n)
     (not state_4_n)
     state_2_n
     state_5_n
     (not state_3_n)
     (not state_1_n)
     (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n)
     (not state_4_n)
     state_2_n
     state_5_n
     (not state_3_n)
     (not state_1_n)
     (not (<= state_702_n 0.0)))
into
(and state_2_n state_5_n (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_5_n
     (not state_4_n)
     state_0_n
     state_1_n
     (not state_3_n)
     state_2_n
     (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_5_n
     (not state_4_n)
     state_0_n
     state_1_n
     (not state_3_n)
     state_2_n
     (not (<= state_702_n 0.0)))
into
(and state_1_n state_2_n state_5_n (not (<= state_702_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_4_n)
     state_3_n
     (not state_0_n)
     state_1_n
     state_5_n
     (not state_2_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_4_n)
     state_3_n
     (not state_0_n)
     state_1_n
     state_5_n
     (not state_2_n))
into
(and state_3_n state_1_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_0_n (not state_2_n) state_1_n state_3_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_0_n (not state_2_n) state_1_n state_3_n state_5_n)
into
(and state_3_n state_0_n state_1_n state_5_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_5_n (not state_0_n) state_3_n state_2_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_5_n (not state_0_n) state_3_n state_2_n)
into
(and state_3_n state_2_n state_5_n)
------------------------------------------------
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                -------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_4_n)
     (not state_2_n)
     (not state_1_n)
     (not state_0_n)
     (not state_3_n)
     state_5_n)
into
(and state_5_n (not state_0_n) (not state_1_n) (not state_2_n) (not state_4_n))
------------------------------------------------
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   -------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 10.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 9.0))
into
(and (= invariant_14_n 3.0) (= invariant_24_n 9.0) (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 9.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 9.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 8.0))
into
(and (= invariant_14_n 3.0) (= invariant_12_n 9.0) (= invariant_24_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 9.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 9.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 6.0))
into
(and (= invariant_14_n 3.0) (= invariant_12_n 9.0) (= invariant_24_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 9.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 3.0)
     (= invariant_25_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 9.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 3.0)
     (= invariant_25_n 3.0))
into
(and (= invariant_14_n 3.0) (= invariant_12_n 9.0) (= invariant_24_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_24_n 4.0)
     (= invariant_14_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_24_n 4.0)
     (= invariant_14_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 9.0))
into
(and (= invariant_14_n 3.0) (= invariant_12_n 9.0) (= invariant_24_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 9.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 9.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 7.0))
into
(and (= invariant_14_n 3.0) (= invariant_12_n 9.0) (= invariant_24_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_24_n 1.0)
     (= invariant_14_n 3.0)
     (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_24_n 1.0)
     (= invariant_14_n 3.0)
     (= invariant_12_n 3.0))
into
(and (= invariant_14_n 3.0) (= invariant_12_n 3.0) (= invariant_24_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_24_n 3.0))
     invariant_5_n
     (= invariant_12_n 3.0)
     (= invariant_14_n 3.0)
     (= invariant_28_n 3.0)
     (= invariant_27_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_24_n 3.0))
     invariant_5_n
     (= invariant_12_n 3.0)
     (= invariant_14_n 3.0)
     (= invariant_28_n 3.0)
     (= invariant_27_n 3.0))
into
(and (= invariant_14_n 3.0) (= invariant_12_n 3.0) (not (= invariant_24_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_24_n 5.0)
     (= invariant_12_n 10.0)
     (= invariant_14_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_24_n 5.0)
     (= invariant_12_n 10.0)
     (= invariant_14_n 3.0))
into
(and (= invariant_14_n 3.0) (= invariant_12_n 10.0) (= invariant_24_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_24_n 8.0)
     (= invariant_12_n 10.0)
     (= invariant_14_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_24_n 8.0)
     (= invariant_12_n 10.0)
     (= invariant_14_n 3.0))
into
(and (= invariant_14_n 3.0) (= invariant_24_n 8.0) (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_26_n 7.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_27_n 2.0)
     (= invariant_24_n 2.0)
     (= invariant_12_n 10.0)
     (= invariant_16_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_26_n 7.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_27_n 2.0)
     (= invariant_24_n 2.0)
     (= invariant_12_n 10.0)
     (= invariant_16_n 0.0))
into
(and (= invariant_14_n 3.0) (= invariant_12_n 10.0) (= invariant_24_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_24_n 4.0)
     (= invariant_14_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_24_n 4.0)
     (= invariant_14_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 10.0))
into
(and (= invariant_14_n 3.0) (= invariant_12_n 10.0) (= invariant_24_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_24_n 1.0)
     (= invariant_14_n 3.0)
     (= invariant_12_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_24_n 1.0)
     (= invariant_14_n 3.0)
     (= invariant_12_n 7.0))
into
(and (= invariant_14_n 3.0) (= invariant_24_n 1.0) (= invariant_12_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (not (= invariant_21_n 1.0))
     (= invariant_24_n 5.0)
     (= invariant_14_n 3.0)
     (= invariant_12_n 7.0)
     (= invariant_20_n 2.0)
     (= invariant_22_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_0_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (not (= invariant_21_n 1.0))
     (= invariant_24_n 5.0)
     (= invariant_14_n 3.0)
     (= invariant_12_n 7.0)
     (= invariant_20_n 2.0)
     (= invariant_22_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_0_n 0.0))
into
(and (= invariant_14_n 3.0) (= invariant_12_n 7.0) (= invariant_24_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_21_n 1.0))
     invariant_5_n
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 6.0)
     (= invariant_12_n 7.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 0.0)
     (= invariant_18_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_21_n 1.0))
     invariant_5_n
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 6.0)
     (= invariant_12_n 7.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 0.0)
     (= invariant_18_n 2.0))
into
(and (= invariant_14_n 3.0) (= invariant_24_n 6.0) (= invariant_12_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_18_n 1.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 3.0)
     (= invariant_12_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_18_n 1.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 3.0)
     (= invariant_12_n 7.0))
into
(and (= invariant_14_n 3.0) (= invariant_12_n 7.0) (= invariant_24_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 4.0)
     (= invariant_18_n 1.0)
     (= invariant_12_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 4.0)
     (= invariant_18_n 1.0)
     (= invariant_12_n 7.0))
into
(and (= invariant_14_n 3.0) (= invariant_12_n 7.0) (= invariant_24_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_24_n 2.0)
     (= invariant_12_n 7.0)
     (= invariant_14_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_15_n 2.0)
     (= invariant_0_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_24_n 2.0)
     (= invariant_12_n 7.0)
     (= invariant_14_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_15_n 2.0)
     (= invariant_0_n 0.0))
into
(and (= invariant_14_n 3.0) (= invariant_12_n 7.0) (= invariant_24_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_24_n (* (- 1.0) invariant_27_n)) 0.0))))
  (and (= invariant_17_n 3.0) a!1 (= invariant_14_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_38_n (* (- 1.0) invariant_40_n)) 0.0))))
  (and a!1 (= invariant_17_n 3.0) (= invariant_19_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_38_n (* (- 1.0) invariant_40_n)) 0.0))))
  (and a!1 (= invariant_17_n 3.0) (= invariant_19_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_27_n (* (- 1.0) invariant_29_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) (= invariant_17_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_27_n (* (- 1.0) invariant_29_n)) 0.0))))
  (and a!1 (= invariant_17_n 3.0) (= invariant_19_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 4.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 4.0) (= invariant_31_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 1.0)
     (= invariant_21_n 3.0)
     (= invariant_33_n 10.0)
     (= invariant_31_n 10.0)
     (= invariant_27_n 9.0)
     (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 1.0)
     (= invariant_21_n 3.0)
     (= invariant_33_n 10.0)
     (= invariant_31_n 10.0)
     (= invariant_27_n 9.0)
     (= invariant_0_n 1.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 10.0) (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 9.0)
     (= invariant_21_n 3.0)
     (= invariant_27_n 9.0)
     (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 9.0)
     (= invariant_21_n 3.0)
     (= invariant_27_n 9.0)
     (= invariant_12_n 3.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 3.0) (= invariant_31_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_31_n 1.0))
     invariant_5_n
     (= invariant_21_n 3.0)
     (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_31_n 1.0))
     invariant_5_n
     (= invariant_21_n 3.0)
     (= invariant_12_n 1.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 1.0) (not (= invariant_31_n 1.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_21_n 3.0)
     (= invariant_0_n 1.0)
     (= invariant_12_n 4.0)
     (= invariant_31_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_21_n 3.0)
     (= invariant_0_n 1.0)
     (= invariant_12_n 4.0)
     (= invariant_31_n 7.0))
into
(and (= invariant_0_n 1.0) (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 6.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 6.0) (= invariant_31_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 10.0)
     (= invariant_21_n 3.0)
     (= invariant_33_n 10.0)
     (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 10.0)
     (= invariant_21_n 3.0)
     (= invariant_33_n 10.0)
     (= invariant_12_n 6.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 10.0) (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 2.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 2.0) (= invariant_31_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (not (= invariant_15_n 2.0))
     (= invariant_0_n 0.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_23_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (not (= invariant_15_n 2.0))
     (= invariant_0_n 0.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_23_n 2.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 2.0) (not (= invariant_15_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 9.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 9.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 6.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 6.0) (= invariant_31_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (not (= invariant_22_n 1.0))
     (= invariant_31_n 5.0)
     (= invariant_21_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 4.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (not (= invariant_22_n 1.0))
     (= invariant_31_n 5.0)
     (= invariant_21_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 4.0)
     (= invariant_18_n 1.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 4.0) (= invariant_31_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 3.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 3.0) (= invariant_31_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_27_n 10.0)
     (= invariant_17_n 2.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_31_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_27_n 10.0)
     (= invariant_17_n 2.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_31_n 10.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 3.0) (= invariant_31_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 3.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 3.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 2.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 2.0) (= invariant_31_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 9.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 8.0) (= invariant_31_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (not (= invariant_22_n 1.0))
     (= invariant_31_n 6.0)
     (= invariant_12_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_33_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (not (= invariant_22_n 1.0))
     (= invariant_31_n 6.0)
     (= invariant_12_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_33_n 6.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 6.0) (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 5.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 5.0) (= invariant_31_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= 5.0 invariant_31_n))
     invariant_5_n
     (= invariant_12_n 5.0)
     (= invariant_18_n 1.0)
     (= invariant_21_n 3.0)
     (= invariant_26_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= 5.0 invariant_31_n))
     invariant_5_n
     (= invariant_12_n 5.0)
     (= invariant_18_n 1.0)
     (= invariant_21_n 3.0)
     (= invariant_26_n 7.0))
into
(and (= invariant_21_n 3.0) (= invariant_18_n 1.0) (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 7.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 7.0) (= invariant_31_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_25_n 7.0)
     (= invariant_15_n 1.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 9.0)
     (= invariant_12_n 7.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_25_n 7.0)
     (= invariant_15_n 1.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 9.0)
     (= invariant_12_n 7.0)
     (= invariant_18_n 1.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 7.0) (= invariant_31_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (not (= 5.0 invariant_31_n))
     (= invariant_12_n 5.0)
     (= invariant_21_n 3.0)
     (= invariant_26_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (not (= 5.0 invariant_31_n))
     (= invariant_12_n 5.0)
     (= invariant_21_n 3.0)
     (= invariant_26_n 7.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 5.0) (not (= 5.0 invariant_31_n)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 9.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 10.0)
     (= invariant_27_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 9.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 10.0)
     (= invariant_27_n 10.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 10.0) (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 7.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 7.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 6.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 6.0) (= invariant_31_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 6.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 6.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 2.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 6.0) (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 10.0)
     (= invariant_27_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 10.0)
     (= invariant_27_n 10.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 10.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 3.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 3.0) (= invariant_31_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 3.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 3.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 7.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 3.0) (= invariant_31_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 5.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 5.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 3.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 3.0) (= invariant_31_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_25_n 6.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_31_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_25_n 6.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_31_n 6.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 6.0) (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 2.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 2.0) (= invariant_31_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 5.0)
     (= invariant_21_n 3.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 5.0)
     (= invariant_21_n 3.0)
     (= invariant_18_n 1.0))
into
(and (= invariant_21_n 3.0) (= invariant_18_n 1.0) (= invariant_31_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 9.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_28_n 2.0)
     (= invariant_0_n 0.0)
     (= invariant_26_n 7.0)
     (= invariant_30_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 9.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_28_n 2.0)
     (= invariant_0_n 0.0)
     (= invariant_26_n 7.0)
     (= invariant_30_n 3.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 2.0) (= invariant_31_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 7.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 4.0) (= invariant_31_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (not (= invariant_22_n 1.0))
     (= invariant_27_n 10.0)
     (= invariant_12_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_30_n 4.0)
     (= invariant_31_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (not (= invariant_22_n 1.0))
     (= invariant_27_n 10.0)
     (= invariant_12_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_30_n 4.0)
     (= invariant_31_n 10.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 10.0) (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_27_n 10.0)
     (= invariant_31_n 10.0)
     (= invariant_12_n 7.0)
     (= invariant_21_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_15_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_27_n 10.0)
     (= invariant_31_n 10.0)
     (= invariant_12_n 7.0)
     (= invariant_21_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_15_n 1.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 10.0) (= invariant_12_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_22_n 1.0))
     invariant_5_n
     (= invariant_12_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_31_n 9.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_22_n 1.0))
     invariant_5_n
     (= invariant_12_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_31_n 9.0)
     (= invariant_18_n 1.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 4.0) (= invariant_31_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 2.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 2.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 7.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 2.0) (= invariant_31_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 2.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 2.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 10.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 10.0) (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 5.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 5.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 2.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 2.0) (= invariant_31_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_27_n (* (- 1.0) invariant_31_n)) 0.0))))
  (and a!1 (= invariant_17_n 3.0) (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 6.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 6.0) (= invariant_31_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (not (= 6.0 invariant_31_n))
     (= invariant_12_n 6.0)
     (= invariant_17_n 2.0)
     (= invariant_27_n 6.0)
     (= invariant_21_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (not (= 6.0 invariant_31_n))
     (= invariant_12_n 6.0)
     (= invariant_17_n 2.0)
     (= invariant_27_n 6.0)
     (= invariant_21_n 3.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 6.0) (not (= 6.0 invariant_31_n)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 1.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 1.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 3.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 3.0) (= invariant_31_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_15_n 2.0))
     invariant_5_n
     (= invariant_21_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_31_n 2.0)
     (= invariant_23_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_15_n 2.0))
     invariant_5_n
     (= invariant_21_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_31_n 2.0)
     (= invariant_23_n 2.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 3.0) (= invariant_31_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (not (= 9.0 invariant_31_n))
     (= invariant_27_n 9.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (not (= 9.0 invariant_31_n))
     (= invariant_27_n 9.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 9.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 9.0) (not (= 9.0 invariant_31_n)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_27_n 10.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 9.0)
     (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_27_n 10.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 9.0)
     (= invariant_12_n 10.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 10.0) (= invariant_31_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_22_n 1.0))
     invariant_5_n
     (= invariant_12_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_31_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_22_n 1.0))
     invariant_5_n
     (= invariant_12_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_31_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 4.0) (= invariant_31_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 1.0)
     (= invariant_21_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 4.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_22_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 1.0)
     (= invariant_21_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 4.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_22_n 0.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 1.0) (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 1.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 1.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 2.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 1.0) (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 8.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 8.0) (= invariant_31_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 7.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 8.0) (= invariant_31_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_15_n 2.0))
     invariant_5_n
     (= invariant_21_n 3.0)
     (= invariant_31_n 2.0)
     (= invariant_12_n 8.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_15_n 2.0))
     invariant_5_n
     (= invariant_21_n 3.0)
     (= invariant_31_n 2.0)
     (= invariant_12_n 8.0)
     (= invariant_18_n 1.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 2.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (not (= invariant_22_n 1.0))
     (= invariant_27_n 4.0)
     (= invariant_12_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_24_n 1.0)
     (= invariant_31_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (not (= invariant_22_n 1.0))
     (= invariant_27_n 4.0)
     (= invariant_12_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_24_n 1.0)
     (= invariant_31_n 2.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 2.0) (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 10.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 10.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 3.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 10.0) (= invariant_31_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 4.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 10.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 10.0) (= invariant_31_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 10.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 10.0) (= invariant_31_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 10.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 10.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 7.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 10.0) (= invariant_31_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_27_n 10.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 6.0)
     (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_27_n 10.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 6.0)
     (= invariant_12_n 10.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 6.0) (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 7.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 6.0)
     (= invariant_30_n 6.0)
     (= invariant_20_n 1.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 7.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 6.0)
     (= invariant_30_n 6.0)
     (= invariant_20_n 1.0)
     (= invariant_18_n 1.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 6.0) (= invariant_12_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 3.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 8.0) (= invariant_31_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 1.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 1.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 8.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 1.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 1.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 1.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 10.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 1.0) (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_27_n 10.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 2.0)
     (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_27_n 10.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 2.0)
     (= invariant_12_n 10.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 2.0) (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 5.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 5.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 8.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 8.0) (= invariant_31_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_12_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_12_n 8.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 6.0))
into
(and (= invariant_21_n 3.0) (= invariant_31_n 6.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (= invariant_31_n 5.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (= invariant_31_n 5.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 10.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 10.0) (= invariant_31_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_5_n
     (not (= 7.0 invariant_31_n))
     (= invariant_27_n 7.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_5_n
     (not (= 7.0 invariant_31_n))
     (= invariant_27_n 7.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 7.0))
into
(and (= invariant_21_n 3.0) (= invariant_12_n 7.0) (not (= 7.0 invariant_31_n)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_27_n (* (- 1.0) invariant_31_n)) 0.0))))
  (and a!1 (= invariant_17_n 3.0) (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_42_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_5_n a!1 (= invariant_12_n 3.0) (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_42_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_5_n a!1 (= invariant_12_n 3.0) (= invariant_21_n 3.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_42_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_21_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_38_n (* (- 1.0) invariant_42_n)) 0.0))))
  (and a!1 (= invariant_21_n 3.0) (= invariant_17_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_42_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_5_n a!1 (= invariant_21_n 3.0) (= invariant_12_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_42_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_5_n a!1 (= invariant_21_n 3.0) (= invariant_12_n 3.0)))
into
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_42_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_21_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_38_n (* (- 1.0) invariant_42_n)) 0.0))))
  (and a!1 (= invariant_21_n 3.0) (= invariant_17_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_42_n (* (- 1.0) invariant_44_n)) 0.0))))
  (and a!1 (= invariant_21_n 3.0) (= invariant_23_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_42_n (* (- 1.0) invariant_44_n)) 0.0))))
  (and a!1 (= invariant_23_n 3.0) (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_35_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_11_n a!1 (= invariant_14_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_35_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_11_n a!1 (= invariant_14_n 3.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_35_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_14_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_35_n (* (- 1.0) invariant_44_n)) 0.0))))
  (and (= invariant_14_n 3.0) (= invariant_23_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_44_n)) 0.0)))
      (a!2 (not (<= (+ invariant_35_n (* (- 1.0) invariant_44_n)) 0.0))))
  (and a!1 (= invariant_23_n 3.0) (= invariant_14_n 3.0) a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_31_n (* (- 1.0) invariant_33_n)) 0.0))))
  (and a!1 (= invariant_23_n 3.0) (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_24_n (* (- 1.0) invariant_33_n)) 0.0))))
  (and a!1 (= invariant_14_n 3.0) (= invariant_23_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_11_n
     (= invariant_33_n 9.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 10.0)
     (= invariant_12_n 9.0)
     (= invariant_23_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_11_n
     (= invariant_33_n 9.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 10.0)
     (= invariant_12_n 9.0)
     (= invariant_23_n 2.0))
into
(and (= invariant_14_n 3.0) (= invariant_24_n 10.0) (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_11_n
     (= invariant_24_n 2.0)
     (= invariant_14_n 3.0)
     (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_11_n
     (= invariant_24_n 2.0)
     (= invariant_14_n 3.0)
     (= invariant_12_n 1.0))
into
(and (= invariant_14_n 3.0) (= invariant_12_n 1.0) (= invariant_24_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_11_n
     (= invariant_12_n 4.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_11_n
     (= invariant_12_n 4.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 7.0))
into
(and (= invariant_14_n 3.0) (= invariant_12_n 4.0) (= invariant_24_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_11_n
     (= invariant_12_n 4.0)
     (= invariant_14_n 3.0)
     (= invariant_25_n 9.0)
     (= invariant_24_n 9.0)
     (= invariant_33_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_11_n
     (= invariant_12_n 4.0)
     (= invariant_14_n 3.0)
     (= invariant_25_n 9.0)
     (= invariant_24_n 9.0)
     (= invariant_33_n 4.0))
into
(and (= invariant_14_n 3.0) (= invariant_12_n 4.0) (= invariant_24_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_11_n
     (= invariant_24_n 10.0)
     (= invariant_14_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_31_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_11_n
     (= invariant_24_n 10.0)
     (= invariant_14_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_31_n 10.0))
into
(and (= invariant_14_n 3.0) (= invariant_24_n 10.0) (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_24_n (* (- 1.0) invariant_33_n)) 0.0))))
  (and a!1 (= invariant_14_n 3.0) (= invariant_23_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_31_n (* (- 1.0) invariant_33_n)) 0.0))))
  (and a!1 (= invariant_23_n 3.0) (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_37_n (* (- 1.0) invariant_44_n)) 0.0))))
  (and a!1 (= invariant_16_n 3.0) (= invariant_23_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_37_n (* (- 1.0) invariant_44_n)) 0.0))))
  (and a!1 (= invariant_23_n 3.0) (= invariant_16_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_26_n (* (- 1.0) invariant_33_n)) 0.0))))
  (and a!1 (= invariant_23_n 3.0) (= invariant_16_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_26_n (* (- 1.0) invariant_33_n)) 0.0))))
  (and (= invariant_23_n 3.0) (= invariant_16_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_39_n)) 0.0)))
      (a!2 (not (<= (+ invariant_35_n (* (- 1.0) invariant_39_n)) 0.0))))
  (and a!1 (= invariant_14_n 3.0) (= invariant_18_n 3.0) a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_39_n (* (- 1.0) invariant_43_n)) 0.0))))
  (and a!1 (= invariant_18_n 3.0) (= invariant_22_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_42_n (* (- 1.0) invariant_43_n)) 0.0))))
  (and a!1 (= invariant_22_n 3.0) (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_39_n (* (- 1.0) invariant_43_n)) 0.0))))
  (and a!1 (= invariant_22_n 3.0) (= invariant_18_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_36_n (* (- 1.0) invariant_43_n)) 0.0))))
  (and a!1 (= invariant_15_n 3.0) (= invariant_22_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_36_n (* (- 1.0) invariant_43_n)) 0.0))))
  (and a!1 (= invariant_22_n 3.0) (= invariant_15_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_42_n (* (- 1.0) invariant_43_n)) 0.0))))
  (and a!1 (= invariant_22_n 3.0) (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_37_n (* (- 1.0) invariant_43_n)) 0.0))))
  (and a!1 (= invariant_16_n 3.0) (= invariant_22_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_37_n (* (- 1.0) invariant_43_n)) 0.0))))
  (and a!1 (= invariant_16_n 3.0) (= invariant_22_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_31_n (* (- 1.0) invariant_32_n)) 0.0))))
  (and a!1 (= invariant_21_n 3.0) (= invariant_22_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_31_n (* (- 1.0) invariant_32_n)) 0.0))))
  (and a!1 (= invariant_21_n 3.0) (= invariant_22_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_41_n (* (- 1.0) invariant_43_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_22_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_41_n (* (- 1.0) invariant_43_n)) 0.0))))
  (and a!1 (= invariant_22_n 3.0) (= invariant_20_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_30_n (* (- 1.0) invariant_32_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_22_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_30_n (* (- 1.0) invariant_32_n)) 0.0))))
  (and (= invariant_22_n 3.0) (= invariant_20_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_25_n (* (- 1.0) invariant_32_n)) 0.0))))
  (and (= invariant_22_n 3.0) a!1 (= invariant_15_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_25_n (* (- 1.0) invariant_32_n)) 0.0))))
  (and a!1 (= invariant_22_n 3.0) (= invariant_15_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_26_n (* (- 1.0) invariant_32_n)) 0.0))))
  (and (= invariant_22_n 3.0) (= invariant_16_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_26_n (* (- 1.0) invariant_32_n)) 0.0))))
  (and (= invariant_16_n 3.0) a!1 (= invariant_22_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_28_n (* (- 1.0) invariant_32_n)) 0.0))))
  (and (= invariant_22_n 3.0) a!1 (= invariant_18_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_28_n (* (- 1.0) invariant_32_n)) 0.0))))
  (and a!1 (= invariant_22_n 3.0) (= invariant_18_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_39_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_18_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_39_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_18_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_37_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_16_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_37_n (* (- 1.0) invariant_39_n)) 0.0))))
  (and a!1 (= invariant_18_n 3.0) (= invariant_16_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_28_n (* (- 1.0) invariant_30_n)) 0.0))))
  (and a!1 (= invariant_18_n 3.0) (= invariant_20_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_28_n (* (- 1.0) invariant_30_n)) 0.0))))
  (and a!1
       (= invariant_18_n 3.0)
       (>= (+ (* (- 1.0) invariant_28_n) invariant_30_n) 0.0)
       (= invariant_20_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_28_n (* (- 1.0) invariant_30_n)) 0.0))))
  (and a!1
       (= invariant_18_n 3.0)
       (>= (+ (* (- 1.0) invariant_28_n) invariant_30_n) 0.0)
       (= invariant_20_n 3.0)))
into
(let ((a!1 (not (>= (+ invariant_28_n (* (- 1.0) invariant_30_n)) 0.0))))
  (and (= invariant_20_n 3.0) (= invariant_18_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_26_n (* (- 1.0) invariant_28_n)) 0.0))))
  (and a!1 (= invariant_16_n 3.0) (= invariant_18_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_26_n (* (- 1.0) invariant_28_n)) 0.0))))
  (and (= invariant_16_n 3.0) (= invariant_18_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_36_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and (= invariant_20_n 3.0) (= invariant_15_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_40_n (* (- 1.0) invariant_43_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) (= invariant_22_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_40_n (* (- 1.0) invariant_43_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) (= invariant_22_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_29_n (* (- 1.0) invariant_32_n)) 0.0))))
  (and a!1 (= invariant_22_n 3.0) (= invariant_19_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_29_n (* (- 1.0) invariant_32_n)) 0.0))))
  (and (= invariant_22_n 3.0) (= invariant_19_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_43_n)) 0.0)))
      (a!2 (not (<= (+ invariant_35_n (* (- 1.0) invariant_43_n)) 0.0))))
  (and a!1 (= invariant_14_n 3.0) (= invariant_22_n 3.0) a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_35_n (* (- 1.0) invariant_43_n)) 0.0))))
  (and a!1 (= invariant_14_n 3.0) (= invariant_22_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_24_n (* (- 1.0) invariant_32_n)) 0.0))))
  (and a!1 (= invariant_14_n 3.0) (= invariant_22_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_24_n (* (- 1.0) invariant_32_n)) 0.0))))
  (and a!1 (= invariant_22_n 3.0) (= invariant_14_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_42_n)) 0.0)))
      (a!2 (not (<= (+ invariant_35_n (* (- 1.0) invariant_42_n)) 0.0))))
  (and a!1 (= invariant_14_n 3.0) (= invariant_21_n 3.0) a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_35_n (* (- 1.0) invariant_42_n)) 0.0))))
  (and (= invariant_14_n 3.0) (= invariant_21_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_24_n (* (- 1.0) invariant_31_n)) 0.0))))
  (and a!1 (= invariant_14_n 3.0) (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_35_n (* (- 1.0) invariant_37_n)) 0.0))))
  (and a!1 (= invariant_14_n 3.0) (= invariant_16_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_24_n (* (- 1.0) invariant_31_n)) 0.0))))
  (and a!1 (= invariant_21_n 3.0) (= invariant_14_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_40_n)) 0.0)))
      (a!2 (not (<= (+ invariant_35_n (* (- 1.0) invariant_40_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) (= invariant_14_n 3.0) a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_35_n (* (- 1.0) invariant_40_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) (= invariant_14_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_24_n (* (- 1.0) invariant_29_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) (= invariant_14_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_24_n (* (- 1.0) invariant_29_n)) 0.0))))
  (and (= invariant_19_n 3.0) a!1 (= invariant_14_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_35_n (* (- 1.0) invariant_37_n)) 0.0)))
      (a!2 (not (>= (+ invariant_34_n (* (- 1.0) invariant_37_n)) 0.0))))
  (and a!1 (= invariant_14_n 3.0) (= invariant_16_n 3.0) a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_37_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and a!1 (= invariant_16_n 3.0) (= invariant_20_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_41_n (* (- 1.0) invariant_42_n)) 0.0))))
  (and (= invariant_20_n 3.0) (= invariant_21_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_41_n (* (- 1.0) invariant_42_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_40_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) (= invariant_20_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_30_n (* (- 1.0) invariant_31_n)) 0.0))))
  (and a!1 (= invariant_21_n 3.0) (= invariant_20_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_30_n (* (- 1.0) invariant_31_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_40_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) (= invariant_20_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_29_n (* (- 1.0) invariant_30_n)) 0.0))))
  (and a!1
       (= invariant_20_n 3.0)
       (= invariant_19_n 3.0)
       (>= (+ (* (- 1.0) invariant_29_n) invariant_30_n) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_29_n (* (- 1.0) invariant_30_n)) 0.0))))
  (and a!1
       (= invariant_20_n 3.0)
       (= invariant_19_n 3.0)
       (>= (+ (* (- 1.0) invariant_29_n) invariant_30_n) 0.0)))
into
(let ((a!1 (not (>= (+ invariant_29_n (* (- 1.0) invariant_30_n)) 0.0))))
  (and (= invariant_20_n 3.0) (= invariant_19_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_29_n (* (- 1.0) invariant_30_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) (= invariant_20_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_40_n (* (- 1.0) invariant_42_n)) 0.0))))
  (and (= invariant_19_n 3.0) (= invariant_21_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_35_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and a!1 (= invariant_14_n 3.0) (= invariant_20_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_24_n (* (- 1.0) invariant_30_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_14_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_36_n)) 0.0)))
      (a!2 (not (<= (+ invariant_35_n (* (- 1.0) invariant_36_n)) 0.0))))
  (and a!1 (= invariant_14_n 3.0) (= invariant_15_n 3.0) a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_24_n (* (- 1.0) invariant_30_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_14_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0)))
      (a!2 (not (<= (+ invariant_35_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and a!1 (= invariant_14_n 3.0) (= invariant_20_n 3.0) a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_24_n (* (- 1.0) invariant_25_n)) 0.0))))
  (and a!1 (= invariant_14_n 3.0) (= invariant_15_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_24_n (* (- 1.0) invariant_25_n)) 0.0))))
  (and a!1 (= invariant_14_n 3.0) (= invariant_15_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_26_n (* (- 1.0) invariant_31_n)) 0.0))))
  (and a!1 (= invariant_21_n 3.0) (= invariant_16_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_25_n (* (- 1.0) invariant_26_n)) 0.0))))
  (and a!1 (= invariant_16_n 3.0) (= invariant_15_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_25_n (* (- 1.0) invariant_26_n)) 0.0))))
  (and a!1 (= invariant_16_n 3.0) (= invariant_15_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_26_n (* (- 1.0) invariant_31_n)) 0.0))))
  (and a!1 (= invariant_16_n 3.0) (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_26_n (* (- 1.0) invariant_30_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_16_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_26_n (* (- 1.0) invariant_30_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_16_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_35_n (* (- 1.0) invariant_36_n)) 0.0))))
  (and a!1 (= invariant_15_n 3.0) (= invariant_14_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_35_n (* (- 1.0) invariant_39_n)) 0.0))))
  (and (= invariant_14_n 3.0) (= invariant_18_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_24_n (* (- 1.0) invariant_28_n)) 0.0))))
  (and a!1 (= invariant_18_n 3.0) (= invariant_14_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_24_n (* (- 1.0) invariant_28_n)) 0.0))))
  (and (= invariant_18_n 3.0) (= invariant_14_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_24_n (* (- 1.0) invariant_26_n)) 0.0))))
  (and (= invariant_16_n 3.0) (= invariant_14_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_24_n (* (- 1.0) invariant_26_n)) 0.0))))
  (and (= invariant_16_n 3.0) (= invariant_14_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_37_n (* (- 1.0) invariant_42_n)) 0.0))))
  (and a!1 (= invariant_21_n 3.0) (= invariant_16_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_37_n (* (- 1.0) invariant_42_n)) 0.0))))
  (and a!1 (= invariant_21_n 3.0) (= invariant_16_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_36_n (* (- 1.0) invariant_37_n)) 0.0))))
  (and a!1 (= invariant_15_n 3.0) (= invariant_16_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_36_n (* (- 1.0) invariant_37_n)) 0.0))))
  (and a!1 (= invariant_15_n 3.0) (= invariant_16_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_37_n (* (- 1.0) invariant_39_n)) 0.0))))
  (and a!1 (= invariant_18_n 3.0) (= invariant_16_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_39_n (* (- 1.0) invariant_40_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) (= invariant_18_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_28_n (* (- 1.0) invariant_29_n)) 0.0))))
  (and a!1 (= invariant_18_n 3.0) (= invariant_19_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_28_n (* (- 1.0) invariant_29_n)) 0.0))))
  (and a!1 (= invariant_18_n 3.0) (= invariant_19_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_39_n (* (- 1.0) invariant_40_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) (= invariant_18_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_37_n (* (- 1.0) invariant_40_n)) 0.0))))
  (and a!1 (= invariant_16_n 3.0) (= invariant_19_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_26_n (* (- 1.0) invariant_29_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) (= invariant_16_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_26_n (* (- 1.0) invariant_29_n)) 0.0))))
  (and a!1 (= invariant_16_n 3.0) (= invariant_19_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_37_n (* (- 1.0) invariant_40_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) (= invariant_16_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_39_n (* (- 1.0) invariant_42_n)) 0.0))))
  (and a!1 (= invariant_21_n 3.0) (= invariant_18_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_28_n (* (- 1.0) invariant_31_n)) 0.0))))
  (and a!1 (= invariant_18_n 3.0) (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_28_n (* (- 1.0) invariant_31_n)) 0.0))))
  (and a!1 (= invariant_21_n 3.0) (= invariant_18_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_36_n (* (- 1.0) invariant_39_n)) 0.0))))
  (and a!1 (= invariant_18_n 3.0) (= invariant_15_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_36_n (* (- 1.0) invariant_39_n)) 0.0))))
  (and a!1 (= invariant_15_n 3.0) (= invariant_18_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_25_n (* (- 1.0) invariant_28_n)) 0.0))))
  (and a!1 (= invariant_15_n 3.0) (= invariant_18_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_25_n (* (- 1.0) invariant_28_n)) 0.0))))
  (and a!1 (= invariant_15_n 3.0) (= invariant_18_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_39_n (* (- 1.0) invariant_42_n)) 0.0))))
  (and a!1 (= invariant_18_n 3.0) (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_36_n (* (- 1.0) invariant_40_n)) 0.0))))
  (and a!1 (= invariant_15_n 3.0) (= invariant_19_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_36_n (* (- 1.0) invariant_40_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) (= invariant_15_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_25_n (* (- 1.0) invariant_29_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) (= invariant_15_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_25_n (* (- 1.0) invariant_29_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) (= invariant_15_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_40_n (* (- 1.0) invariant_42_n)) 0.0))))
  (and a!1 (= invariant_21_n 3.0) (= invariant_19_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_29_n (* (- 1.0) invariant_31_n)) 0.0))))
  (and a!1 (= invariant_21_n 3.0) (= invariant_19_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_29_n (* (- 1.0) invariant_31_n)) 0.0))))
  (and a!1 (= invariant_21_n 3.0) (= invariant_19_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_25_n (* (- 1.0) invariant_31_n)) 0.0))))
  (and a!1 (= invariant_15_n 3.0) (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_25_n (* (- 1.0) invariant_31_n)) 0.0))))
  (and a!1 (= invariant_21_n 3.0) (= invariant_15_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_36_n (* (- 1.0) invariant_42_n)) 0.0))))
  (and a!1 (= invariant_15_n 3.0) (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_36_n (* (- 1.0) invariant_42_n)) 0.0))))
  (and a!1 (= invariant_15_n 3.0) (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_36_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_15_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_25_n (* (- 1.0) invariant_30_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_15_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_25_n (* (- 1.0) invariant_30_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_15_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_31_n 6.0)
       a!1
       (= invariant_19_n 3.0)
       (= invariant_16_n 3.0)
       (= invariant_14_n 3.0)
       (= invariant_24_n 6.0)
       (= invariant_12_n 10.0)
       (= invariant_21_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_31_n 6.0)
       a!1
       (= invariant_19_n 3.0)
       (= invariant_16_n 3.0)
       (= invariant_14_n 3.0)
       (= invariant_24_n 6.0)
       (= invariant_12_n 10.0)
       (= invariant_21_n 3.0)))
into
(and (= invariant_16_n 3.0) (= invariant_14_n 3.0) (= invariant_21_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_0_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_16_n 3.0)
     (= invariant_26_n 9.0)
     (= invariant_24_n 5.0)
     (= invariant_29_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_0_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_16_n 3.0)
     (= invariant_26_n 9.0)
     (= invariant_24_n 5.0)
     (= invariant_29_n 4.0))
into
(and (= invariant_16_n 3.0) (= invariant_0_n 1.0) (= invariant_26_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_12_n 3.0)
     (= invariant_0_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_16_n 3.0)
     (= invariant_30_n 4.0)
     (= invariant_26_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_12_n 3.0)
     (= invariant_0_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_16_n 3.0)
     (= invariant_30_n 4.0)
     (= invariant_26_n 4.0))
into
(and (= invariant_12_n 3.0) (= invariant_0_n 1.0) (= invariant_26_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (= 3.0 invariant_26_n))
     (= invariant_0_n 1.0)
     (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (= 3.0 invariant_26_n))
     (= invariant_0_n 1.0)
     (= invariant_12_n 3.0))
into
(and (= invariant_12_n 3.0) (= invariant_0_n 1.0) (not (= 3.0 invariant_26_n)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_12_n 3.0)
     (= invariant_32_n 2.0)
     (= invariant_30_n 3.0)
     (= invariant_0_n 1.0)
     (= invariant_20_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_12_n 3.0)
     (= invariant_32_n 2.0)
     (= invariant_30_n 3.0)
     (= invariant_0_n 1.0)
     (= invariant_20_n 3.0))
into
(and (= invariant_20_n 3.0) (= invariant_0_n 1.0) (= invariant_30_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_29_n 3.0)
       (= invariant_33_n 3.0)
       (= invariant_19_n 3.0)
       (= invariant_21_n 1.0)
       (= invariant_0_n 1.0)
       a!1
       (= invariant_12_n 1.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_29_n 3.0)
       (= invariant_33_n 3.0)
       (= invariant_19_n 3.0)
       (= invariant_21_n 1.0)
       (= invariant_0_n 1.0)
       a!1
       (= invariant_12_n 1.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_19_n 3.0) (= invariant_12_n 1.0) (= invariant_29_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_25_n 7.0)
       a!1
       (= invariant_19_n 3.0)
       (= invariant_15_n 0.0)
       (= invariant_12_n 10.0)
       (= invariant_0_n 1.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_25_n 7.0)
       a!1
       (= invariant_19_n 3.0)
       (= invariant_15_n 0.0)
       (= invariant_12_n 10.0)
       (= invariant_0_n 1.0)))
into
(and (= invariant_19_n 3.0) (= invariant_0_n 1.0) (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_17_n 1.0))
     invariant_7_n
     (not (= invariant_17_n 2.0))
     (= invariant_12_n 4.0)
     (= invariant_33_n 9.0)
     (= invariant_25_n 7.0)
     (= invariant_30_n 9.0)
     (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_27_n 9.0)
     (= invariant_18_n 2.0)
     (= invariant_0_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_17_n 1.0))
     invariant_7_n
     (not (= invariant_17_n 2.0))
     (= invariant_12_n 4.0)
     (= invariant_33_n 9.0)
     (= invariant_25_n 7.0)
     (= invariant_30_n 9.0)
     (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_27_n 9.0)
     (= invariant_18_n 2.0)
     (= invariant_0_n 0.0))
into
(and (= invariant_12_n 4.0) (= invariant_27_n 9.0) (not (= invariant_17_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (not (>= invariant_48_n 3.0))
       (= invariant_27_n 9.0)
       (= invariant_33_n 5.0)
       (= invariant_20_n 3.0)
       a!1
       (= invariant_12_n 3.0)
       (= invariant_30_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (not (>= invariant_48_n 3.0))
       (= invariant_27_n 9.0)
       (= invariant_33_n 5.0)
       (= invariant_20_n 3.0)
       a!1
       (= invariant_12_n 3.0)
       (= invariant_30_n 9.0)))
into
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_20_n 3.0) (not (>= invariant_48_n 3.0)) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_27_n 5.0)
       (= invariant_31_n 9.0)
       (= invariant_19_n 3.0)
       (= invariant_12_n 1.0)
       (= invariant_0_n 1.0)
       a!1
       (= invariant_29_n 9.0)
       (= invariant_25_n 6.0)
       (= invariant_33_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_27_n 5.0)
       (= invariant_31_n 9.0)
       (= invariant_19_n 3.0)
       (= invariant_12_n 1.0)
       (= invariant_0_n 1.0)
       a!1
       (= invariant_29_n 9.0)
       (= invariant_25_n 6.0)
       (= invariant_33_n 5.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_19_n 3.0) (= invariant_12_n 1.0) (= invariant_29_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_1_n (* (- 1.0) invariant_34_n)) 0.0))))
  (and invariant_8_n a!1 (= invariant_19_n 3.0) (= invariant_12_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_1_n (* (- 1.0) invariant_34_n)) 0.0))))
  (and invariant_8_n a!1 (= invariant_19_n 3.0) (= invariant_12_n 8.0)))
into
(let ((a!1 (not (<= (+ invariant_1_n (* (- 1.0) invariant_34_n)) 0.0))))
  (and (= invariant_19_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_18_n 0.0)
       a!1
       (= invariant_19_n 3.0)
       (= invariant_28_n 6.0)
       (= invariant_12_n 8.0)
       (= invariant_20_n 2.0)
       (= invariant_29_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_18_n 0.0)
       a!1
       (= invariant_19_n 3.0)
       (= invariant_28_n 6.0)
       (= invariant_12_n 8.0)
       (= invariant_20_n 2.0)
       (= invariant_29_n 8.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n (= invariant_19_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_40_n)) 0.0)))
      (a!2 (not (>= (+ invariant_40_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) (= invariant_20_n 3.0) a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_12_n 5.0)
       (= invariant_33_n 6.0)
       (= invariant_28_n 6.0)
       (= invariant_30_n 7.0)
       (= invariant_0_n 1.0)
       (= invariant_20_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_12_n 5.0)
       (= invariant_33_n 6.0)
       (= invariant_28_n 6.0)
       (= invariant_30_n 7.0)
       (= invariant_0_n 1.0)
       (= invariant_20_n 3.0)
       a!1))
into
(and (= invariant_0_n 1.0) (= invariant_12_n 5.0) (= invariant_28_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_29_n 2.0)
     (= invariant_0_n 1.0)
     (= invariant_12_n 5.0)
     (= invariant_19_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_29_n 2.0)
     (= invariant_0_n 1.0)
     (= invariant_12_n 5.0)
     (= invariant_19_n 3.0))
into
(and (= invariant_19_n 3.0) (= invariant_0_n 1.0) (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_30_n 6.0)
       (= invariant_12_n 6.0)
       (= invariant_19_n 3.0)
       (= invariant_29_n 5.0)
       a!1
       (= invariant_25_n 7.0)
       (= invariant_27_n 2.0)
       (= invariant_24_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_30_n 6.0)
       (= invariant_12_n 6.0)
       (= invariant_19_n 3.0)
       (= invariant_29_n 5.0)
       a!1
       (= invariant_25_n 7.0)
       (= invariant_27_n 2.0)
       (= invariant_24_n 2.0)))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 6.0) (= invariant_29_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_20_n 3.0)
     (= invariant_12_n 5.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_20_n 3.0)
     (= invariant_12_n 5.0)
     (= invariant_18_n 1.0))
into
(and (= invariant_20_n 3.0) (= invariant_18_n 1.0) (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_18_n 1.0)
       (= invariant_30_n 5.0)
       (= invariant_24_n 2.0)
       a!1
       (= invariant_20_n 3.0)
       (= invariant_12_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_18_n 1.0)
       (= invariant_30_n 5.0)
       (= invariant_24_n 2.0)
       a!1
       (= invariant_20_n 3.0)
       (= invariant_12_n 5.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_20_n 3.0) (= invariant_18_n 1.0) (= invariant_12_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_30_n 2.0)
       (= invariant_20_n 3.0)
       a!1
       (= invariant_12_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_30_n 2.0)
       (= invariant_20_n 3.0)
       a!1
       (= invariant_12_n 5.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_20_n 3.0) (= invariant_30_n 2.0) (= invariant_12_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_30_n 2.0)
       (= invariant_20_n 3.0)
       a!1
       (= invariant_12_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_30_n 2.0)
       (= invariant_20_n 3.0)
       a!1
       (= invariant_12_n 8.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_20_n 3.0) (= invariant_30_n 2.0) (= invariant_12_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_30_n 3.0)
       (= invariant_20_n 3.0)
       a!1
       (= invariant_12_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_30_n 3.0)
       (= invariant_20_n 3.0)
       a!1
       (= invariant_12_n 8.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_20_n 3.0) (= invariant_30_n 3.0) (= invariant_12_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_12_n 2.0)
       (= invariant_20_n 3.0)
       a!1
       (= invariant_0_n 1.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_12_n 2.0)
       (= invariant_20_n 3.0)
       a!1
       (= invariant_0_n 1.0)))
into
(and (= invariant_20_n 3.0) (= invariant_0_n 1.0) (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_25_n 9.0)
       (= invariant_19_n 3.0)
       (= invariant_29_n 4.0)
       a!1
       (= invariant_15_n 0.0)
       (= invariant_12_n 4.0)
       (= invariant_0_n 1.0)
       (= invariant_24_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_25_n 9.0)
       (= invariant_19_n 3.0)
       (= invariant_29_n 4.0)
       a!1
       (= invariant_15_n 0.0)
       (= invariant_12_n 4.0)
       (= invariant_0_n 1.0)
       (= invariant_24_n 5.0)))
into
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_19_n 3.0) (= invariant_29_n 4.0) (= invariant_12_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_30_n 8.0)
       (= invariant_24_n 6.0)
       a!1
       (= invariant_20_n 3.0)
       (= invariant_12_n 4.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_30_n 8.0)
       (= invariant_24_n 6.0)
       a!1
       (= invariant_20_n 3.0)
       (= invariant_12_n 4.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_20_n 3.0) (= invariant_12_n 4.0) (= invariant_30_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (not (= 9.0 invariant_32_n))
     (= invariant_20_n 3.0)
     (= invariant_12_n 9.0)
     (= invariant_0_n 0.0)
     (= invariant_22_n 0.0)
     (= invariant_19_n 2.0)
     (= invariant_21_n 1.0)
     (= invariant_30_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (not (= 9.0 invariant_32_n))
     (= invariant_20_n 3.0)
     (= invariant_12_n 9.0)
     (= invariant_0_n 0.0)
     (= invariant_22_n 0.0)
     (= invariant_19_n 2.0)
     (= invariant_21_n 1.0)
     (= invariant_30_n 9.0))
into
(and (= invariant_20_n 3.0) (= invariant_22_n 0.0) (= invariant_30_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (not (= 9.0 invariant_32_n))
       (not (= invariant_30_n 1.0))
       a!1
       (= invariant_22_n 0.0)
       (= invariant_12_n 9.0)
       (= invariant_0_n 0.0)
       (= invariant_19_n 2.0)
       (= invariant_20_n 3.0)
       (= invariant_45_n 1.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (not (= 9.0 invariant_32_n))
       (not (= invariant_30_n 1.0))
       a!1
       (= invariant_22_n 0.0)
       (= invariant_12_n 9.0)
       (= invariant_0_n 0.0)
       (= invariant_19_n 2.0)
       (= invariant_20_n 3.0)
       (= invariant_45_n 1.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_20_n 3.0) (= invariant_12_n 9.0) (= invariant_22_n 0.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_29_n 2.0)
       (= invariant_19_n 3.0)
       (= invariant_30_n 6.0)
       a!1
       (= invariant_12_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_29_n 2.0)
       (= invariant_19_n 3.0)
       (= invariant_30_n 6.0)
       a!1
       (= invariant_12_n 9.0)))
into
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_19_n 3.0) (= invariant_12_n 9.0) (= invariant_29_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_24_n 6.0)
       (= invariant_20_n 3.0)
       a!1
       (= invariant_12_n 3.0)
       (= invariant_30_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_24_n 6.0)
       (= invariant_20_n 3.0)
       a!1
       (= invariant_12_n 3.0)
       (= invariant_30_n 6.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_20_n 3.0) (= invariant_12_n 3.0) (= invariant_30_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_30_n 7.0)
       (= invariant_20_n 3.0)
       a!1
       (= invariant_12_n 3.0)
       (= invariant_24_n 7.0)
       (= invariant_28_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= invariant_30_n 7.0)
       (= invariant_20_n 3.0)
       a!1
       (= invariant_12_n 3.0)
       (= invariant_24_n 7.0)
       (= invariant_28_n 6.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_20_n 3.0) (= invariant_30_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_1_n (* (- 1.0) invariant_34_n)) 0.0))))
  (and invariant_7_n a!1 (= invariant_20_n 3.0) (= invariant_12_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_1_n (* (- 1.0) invariant_34_n)) 0.0))))
  (and invariant_7_n a!1 (= invariant_20_n 3.0) (= invariant_12_n 6.0)))
into
(let ((a!1 (not (<= (+ invariant_1_n (* (- 1.0) invariant_34_n)) 0.0))))
  (and (= invariant_20_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= (+ invariant_1_n (* (- 1.0) invariant_34_n)) 0.0)
       a!1
       (= invariant_20_n 3.0)
       (= invariant_30_n 6.0)
       (= invariant_0_n 0.0)
       (= invariant_17_n 0.0)
       (= invariant_14_n 2.0)
       (= invariant_12_n 6.0)
       (= invariant_24_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_7_n
       (= (+ invariant_1_n (* (- 1.0) invariant_34_n)) 0.0)
       a!1
       (= invariant_20_n 3.0)
       (= invariant_30_n 6.0)
       (= invariant_0_n 0.0)
       (= invariant_17_n 0.0)
       (= invariant_14_n 2.0)
       (= invariant_12_n 6.0)
       (= invariant_24_n 2.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_41_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_20_n 3.0)
       (= (+ invariant_1_n (* (- 1.0) invariant_34_n)) 0.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (not (>= invariant_48_n 3.0))
       (= invariant_24_n 2.0)
       (= invariant_19_n 3.0)
       (= invariant_23_n 2.0)
       (= invariant_0_n 1.0)
       a!1
       (= invariant_12_n 1.0)
       (= invariant_29_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (not (>= invariant_48_n 3.0))
       (= invariant_24_n 2.0)
       (= invariant_19_n 3.0)
       (= invariant_23_n 2.0)
       (= invariant_0_n 1.0)
       a!1
       (= invariant_12_n 1.0)
       (= invariant_29_n 2.0)))
into
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_40_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_19_n 3.0) (not (>= invariant_48_n 3.0)) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_40_n)) 0.0)))
      (a!2 (not (<= (+ invariant_40_n (* (- 1.0) invariant_41_n)) 0.0)))
      (a!3 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) a!2 (= invariant_20_n 3.0) a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_40_n)) 0.0)))
      (a!2 (not (<= (+ invariant_40_n (* (- 1.0) invariant_41_n)) 0.0)))
      (a!3 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and a!1 (= invariant_19_n 3.0) a!2 (= invariant_20_n 3.0) a!3))
into
(let ((a!1 (not (<= (+ invariant_40_n (* (- 1.0) invariant_41_n)) 0.0)))
      (a!2 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and (= invariant_20_n 3.0) (= invariant_19_n 3.0) a!1 a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_29_n 5.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_14_n 0.0)
     (= invariant_20_n 2.0)
     (= invariant_0_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_29_n 5.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_14_n 0.0)
     (= invariant_20_n 2.0)
     (= invariant_0_n 0.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_14_n 0.0)
     (= invariant_29_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (not (= invariant_15_n 2.0))
     (= invariant_30_n 1.0)
     (= invariant_12_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (not (= invariant_15_n 2.0))
     (= invariant_30_n 1.0)
     (= invariant_12_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0))
into
(and (= invariant_20_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_30_n 1.0)
     (not (= invariant_15_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_15_n 1.0))
     invariant_8_n
     (not (= invariant_14_n 1.0))
     (not invariant_11_n)
     (not (= invariant_25_n 1.0))
     (not (= invariant_20_n 1.0))
     (not (= 10.0 invariant_33_n))
     (not (= invariant_17_n 0.0))
     (not (= invariant_17_n 1.0))
     (not (= invariant_16_n 1.0))
     (not (= invariant_16_n 2.0))
     (not (= invariant_19_n 1.0))
     (= invariant_18_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 1.0)
     (= invariant_32_n 10.0)
     (= invariant_0_n 0.0)
     (= invariant_23_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_22_n 0.0)
     (= invariant_29_n 2.0)
     (= invariant_27_n 5.0)
     (= invariant_26_n 8.0)
     (= invariant_28_n 7.0)
     (= invariant_24_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_15_n 1.0))
     invariant_8_n
     (not (= invariant_14_n 1.0))
     (not invariant_11_n)
     (not (= invariant_25_n 1.0))
     (not (= invariant_20_n 1.0))
     (not (= 10.0 invariant_33_n))
     (not (= invariant_17_n 0.0))
     (not (= invariant_17_n 1.0))
     (not (= invariant_16_n 1.0))
     (not (= invariant_16_n 2.0))
     (not (= invariant_19_n 1.0))
     (= invariant_18_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 1.0)
     (= invariant_32_n 10.0)
     (= invariant_0_n 0.0)
     (= invariant_23_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_22_n 0.0)
     (= invariant_29_n 2.0)
     (= invariant_27_n 5.0)
     (= invariant_26_n 8.0)
     (= invariant_28_n 7.0)
     (= invariant_24_n 4.0))
into
(and (not invariant_11_n)
     (not (= invariant_17_n 1.0))
     (not (= invariant_17_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (= invariant_0_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_18_n 2.0)
     (= invariant_17_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     (= invariant_0_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_18_n 2.0)
     (= invariant_17_n 2.0))
into
(and (not invariant_11_n) (= invariant_20_n 3.0) (= invariant_17_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_16_n 0.0)
     (= invariant_33_n 8.0)
     (= invariant_30_n 1.0)
     (= invariant_24_n 4.0)
     (= invariant_12_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_29_n 2.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_22_n 0.0)
     (= invariant_21_n 0.0)
     (= invariant_18_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_23_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_19_n 2.0)
     (= invariant_27_n 5.0)
     (= invariant_26_n 8.0)
     (= invariant_17_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_16_n 0.0)
     (= invariant_33_n 8.0)
     (= invariant_30_n 1.0)
     (= invariant_24_n 4.0)
     (= invariant_12_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_29_n 2.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_22_n 0.0)
     (= invariant_21_n 0.0)
     (= invariant_18_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_23_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_19_n 2.0)
     (= invariant_27_n 5.0)
     (= invariant_26_n 8.0)
     (= invariant_17_n 2.0))
into
(and (= invariant_20_n 3.0)
     (= invariant_17_n 2.0)
     (= invariant_12_n 2.0)
     (= invariant_30_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 7.0)
     (= invariant_12_n 6.0)
     (= invariant_18_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 7.0)
     (= invariant_12_n 6.0)
     (= invariant_18_n 2.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 7.0)
     (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (not (= 9.0 invariant_32_n))
     (not (= 3.0 invariant_26_n))
     (= invariant_15_n 1.0)
     (= invariant_0_n 1.0)
     (= invariant_30_n 4.0)
     (= invariant_24_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_14_n 2.0)
     (= invariant_25_n 9.0)
     (= invariant_31_n 9.0)
     (= invariant_19_n 2.0)
     (= invariant_27_n 10.0)
     (= invariant_12_n 8.0)
     (= invariant_22_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_18_n 2.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (not (= 9.0 invariant_32_n))
     (not (= 3.0 invariant_26_n))
     (= invariant_15_n 1.0)
     (= invariant_0_n 1.0)
     (= invariant_30_n 4.0)
     (= invariant_24_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_14_n 2.0)
     (= invariant_25_n 9.0)
     (= invariant_31_n 9.0)
     (= invariant_19_n 2.0)
     (= invariant_27_n 10.0)
     (= invariant_12_n 8.0)
     (= invariant_22_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_18_n 2.0)
     (not (>= invariant_48_n 3.0)))
into
(and (= invariant_0_n 1.0) (= invariant_12_n 8.0) (= invariant_31_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_0_n 1.0)
     (= invariant_12_n 8.0)
     (= invariant_20_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_26_n 1.0)
     (= invariant_31_n 7.0)
     (= invariant_15_n 0.0)
     (= invariant_19_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_0_n 1.0)
     (= invariant_12_n 8.0)
     (= invariant_20_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_26_n 1.0)
     (= invariant_31_n 7.0)
     (= invariant_15_n 0.0)
     (= invariant_19_n 3.0))
into
(and (= invariant_0_n 1.0) (= invariant_12_n 8.0) (= invariant_31_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_12_n 8.0)
     (= invariant_30_n 7.0)
     (= invariant_24_n 2.0)
     (= invariant_0_n 1.0)
     (= invariant_20_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_12_n 8.0)
     (= invariant_30_n 7.0)
     (= invariant_24_n 2.0)
     (= invariant_0_n 1.0)
     (= invariant_20_n 3.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 7.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_12_n 7.0)
     (= invariant_0_n 1.0)
     (= invariant_30_n 4.0)
     (= invariant_24_n 2.0)
     (= invariant_20_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_12_n 7.0)
     (= invariant_0_n 1.0)
     (= invariant_30_n 4.0)
     (= invariant_24_n 2.0)
     (= invariant_20_n 3.0))
into
(and (= invariant_30_n 4.0) (= invariant_0_n 1.0) (= invariant_12_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_20_n 3.0)
     (= invariant_12_n 4.0)
     (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_20_n 3.0)
     (= invariant_12_n 4.0)
     (= invariant_0_n 1.0))
into
(and (= invariant_20_n 3.0) (= invariant_0_n 1.0) (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (= 6.0 invariant_29_n))
     (not (= invariant_29_n 1.0))
     (= invariant_12_n 3.0)
     (= invariant_27_n 9.0)
     (= invariant_19_n 3.0)
     (= invariant_24_n 1.0)
     (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (= 6.0 invariant_29_n))
     (not (= invariant_29_n 1.0))
     (= invariant_12_n 3.0)
     (= invariant_27_n 9.0)
     (= invariant_19_n 3.0)
     (= invariant_24_n 1.0)
     (= invariant_0_n 1.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 3.0) (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_19_n 1.0))
     invariant_8_n
     (not invariant_11_n)
     (not (= invariant_14_n 1.0))
     (not (= invariant_20_n 1.0))
     (not (= invariant_17_n 0.0))
     (not (= invariant_16_n 2.0))
     (= invariant_0_n 0.0)
     (= invariant_24_n 1.0)
     (= invariant_25_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_23_n 0.0)
     (= invariant_18_n 2.0)
     (= invariant_27_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_19_n 1.0))
     invariant_8_n
     (not invariant_11_n)
     (not (= invariant_14_n 1.0))
     (not (= invariant_20_n 1.0))
     (not (= invariant_17_n 0.0))
     (not (= invariant_16_n 2.0))
     (= invariant_0_n 0.0)
     (= invariant_24_n 1.0)
     (= invariant_25_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_23_n 0.0)
     (= invariant_18_n 2.0)
     (= invariant_27_n 10.0))
into
(and (not invariant_11_n) (= invariant_0_n 0.0) (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (= invariant_0_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not invariant_11_n)
     (not (= invariant_17_n 0.0))
     (= invariant_15_n 2.0)
     (= invariant_0_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_12_n 1.0)
     (= invariant_25_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_20_n 2.0)
     (= invariant_23_n 0.0)
     (= invariant_21_n 0.0)
     (= invariant_18_n 2.0)
     (= invariant_27_n 10.0)
     (= invariant_16_n 1.0)
     (= invariant_19_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not invariant_11_n)
     (not (= invariant_17_n 0.0))
     (= invariant_15_n 2.0)
     (= invariant_0_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_12_n 1.0)
     (= invariant_25_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_20_n 2.0)
     (= invariant_23_n 0.0)
     (= invariant_21_n 0.0)
     (= invariant_18_n 2.0)
     (= invariant_27_n 10.0)
     (= invariant_16_n 1.0)
     (= invariant_19_n 2.0))
into
(and invariant_8_n (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (not invariant_8_n)
     (= invariant_20_n 3.0)
     (= invariant_0_n 1.0)
     (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     (not invariant_8_n)
     (= invariant_20_n 3.0)
     (= invariant_0_n 1.0)
     (= invariant_12_n 1.0))
into
(and (= invariant_20_n 3.0) (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (not (= 9.0 invariant_32_n))
     (= invariant_27_n 10.0)
     (= invariant_12_n 9.0)
     (= invariant_30_n 1.0)
     (= invariant_20_n 3.0)
     (>= invariant_25_n 3.0)
     (not (>= invariant_25_n 4.0))
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_24_n 1.0)
     (= invariant_22_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_18_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_23_n 0.0)
     (= invariant_19_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (not (= 9.0 invariant_32_n))
     (= invariant_27_n 10.0)
     (= invariant_12_n 9.0)
     (= invariant_30_n 1.0)
     (= invariant_20_n 3.0)
     (>= invariant_25_n 3.0)
     (not (>= invariant_25_n 4.0))
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_24_n 1.0)
     (= invariant_22_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_18_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_23_n 0.0)
     (= invariant_19_n 2.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 9.0) (= invariant_30_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (= 9.0 invariant_32_n))
     (= invariant_12_n 2.0)
     (= invariant_0_n 1.0)
     (= invariant_19_n 3.0)
     (= invariant_24_n 1.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (= 9.0 invariant_32_n))
     (= invariant_12_n 2.0)
     (= invariant_0_n 1.0)
     (= invariant_19_n 3.0)
     (= invariant_24_n 1.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 0.0))
into
(and (= invariant_0_n 1.0) (= invariant_12_n 2.0) (= invariant_15_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (= invariant_15_n 3.0)
     (= invariant_25_n 2.0)
     (= invariant_19_n 3.0)
     (= invariant_30_n 2.0)
     (= invariant_12_n 1.0)
     (= invariant_23_n 0.0)
     (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (= invariant_15_n 3.0)
     (= invariant_25_n 2.0)
     (= invariant_19_n 3.0)
     (= invariant_30_n 2.0)
     (= invariant_12_n 1.0)
     (= invariant_23_n 0.0)
     (= invariant_0_n 1.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_15_n 3.0)
     (= invariant_25_n 2.0)
     (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (= 9.0 invariant_32_n))
     (= invariant_23_n 0.0)
     (= invariant_0_n 1.0)
     (= invariant_12_n 4.0)
     (= invariant_29_n 10.0)
     (= invariant_18_n 1.0)
     (= invariant_27_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (= 9.0 invariant_32_n))
     (= invariant_23_n 0.0)
     (= invariant_0_n 1.0)
     (= invariant_12_n 4.0)
     (= invariant_29_n 10.0)
     (= invariant_18_n 1.0)
     (= invariant_27_n 7.0))
into
(and (= invariant_0_n 1.0) (= invariant_12_n 4.0) (= invariant_27_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_30_n 8.0)
     (= invariant_32_n 10.0)
     (= invariant_12_n 8.0)
     (= invariant_21_n 0.0)
     (= invariant_20_n 2.0)
     (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_30_n 8.0)
     (= invariant_32_n 10.0)
     (= invariant_12_n 8.0)
     (= invariant_21_n 0.0)
     (= invariant_20_n 2.0)
     (= invariant_29_n 10.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_21_n 0.0)
     (= invariant_12_n 8.0)
     (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_30_n 6.0)
     (= invariant_12_n 8.0)
     (= invariant_21_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_31_n 8.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_30_n 6.0)
     (= invariant_12_n 8.0)
     (= invariant_21_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_31_n 8.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0))
into
(and (= invariant_21_n 0.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_31_n 9.0)
     (= invariant_29_n 9.0)
     (= invariant_12_n 5.0)
     (= invariant_18_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_31_n 9.0)
     (= invariant_29_n 9.0)
     (= invariant_12_n 5.0)
     (= invariant_18_n 0.0))
into
(and (= invariant_12_n 5.0) (= invariant_18_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_31_n 9.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_12_n 8.0)
     (= invariant_23_n 0.0)
     (= invariant_21_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_31_n 9.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_12_n 8.0)
     (= invariant_23_n 0.0)
     (= invariant_21_n 1.0))
into
(and (= invariant_21_n 1.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_23_n 1.0)
     (= invariant_12_n 5.0)
     (= invariant_19_n 3.0)
     (= invariant_29_n 10.0)
     (= invariant_30_n 9.0)
     (= invariant_20_n 2.0)
     (= invariant_28_n 1.0)
     (= invariant_22_n 1.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_23_n 1.0)
     (= invariant_12_n 5.0)
     (= invariant_19_n 3.0)
     (= invariant_29_n 10.0)
     (= invariant_30_n 9.0)
     (= invariant_20_n 2.0)
     (= invariant_28_n 1.0)
     (= invariant_22_n 1.0)
     (not (>= invariant_48_n 3.0)))
into
(and (= invariant_19_n 3.0)
     (= invariant_12_n 5.0)
     (= invariant_23_n 1.0)
     (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_15_n 1.0)
     (= invariant_0_n 1.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 8.0)
     (= invariant_31_n 6.0)
     (= invariant_24_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_15_n 1.0)
     (= invariant_0_n 1.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 8.0)
     (= invariant_31_n 6.0)
     (= invariant_24_n 2.0))
into
(and (= invariant_31_n 6.0) (= invariant_0_n 1.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_15_n 0.0)
     (= invariant_31_n 6.0)
     (= invariant_30_n 8.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_0_n 1.0)
     (= invariant_29_n 9.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_18_n 0.0)
     (= invariant_14_n 2.0)
     (= invariant_23_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_15_n 0.0)
     (= invariant_31_n 6.0)
     (= invariant_30_n 8.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_0_n 1.0)
     (= invariant_29_n 9.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_18_n 0.0)
     (= invariant_14_n 2.0)
     (= invariant_23_n 0.0))
into
(and (= invariant_19_n 3.0) (= invariant_0_n 1.0) (= invariant_29_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (not (= 9.0 invariant_32_n))
     (= invariant_19_n 2.0)
     (= invariant_12_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 1.0)
     (= invariant_25_n 9.0)
     (= invariant_33_n 4.0)
     (= invariant_14_n 0.0)
     (= invariant_16_n 0.0)
     (= invariant_21_n 0.0)
     (= invariant_22_n 1.0)
     (= invariant_15_n 2.0)
     (= invariant_26_n 3.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (not (= 9.0 invariant_32_n))
     (= invariant_19_n 2.0)
     (= invariant_12_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 1.0)
     (= invariant_25_n 9.0)
     (= invariant_33_n 4.0)
     (= invariant_14_n 0.0)
     (= invariant_16_n 0.0)
     (= invariant_21_n 0.0)
     (= invariant_22_n 1.0)
     (= invariant_15_n 2.0)
     (= invariant_26_n 3.0)
     (= invariant_18_n 1.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 2.0) (= invariant_30_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_0_n 1.0)
     (= invariant_12_n 8.0)
     (= invariant_31_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_0_n 1.0)
     (= invariant_12_n 8.0)
     (= invariant_31_n 10.0))
into
(and (= invariant_0_n 1.0) (= invariant_31_n 10.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_26_n 6.0)
     (= invariant_12_n 4.0)
     (= invariant_0_n 1.0)
     (= invariant_27_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_26_n 6.0)
     (= invariant_12_n 4.0)
     (= invariant_0_n 1.0)
     (= invariant_27_n 8.0))
into
(and (= invariant_0_n 1.0) (= invariant_12_n 4.0) (= invariant_27_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 3.0)
     (= invariant_17_n 3.0)
     (= invariant_19_n 3.0)
     (= invariant_27_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 3.0)
     (= invariant_17_n 3.0)
     (= invariant_19_n 3.0)
     (= invariant_27_n 4.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_17_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_27_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_14_n 1.0))
     invariant_7_n
     (not invariant_8_n)
     (not (= invariant_17_n 2.0))
     (not (= invariant_17_n 0.0))
     (not invariant_11_n)
     (= invariant_0_n 0.0)
     (= invariant_12_n 4.0)
     (= invariant_21_n 0.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_14_n 1.0))
     invariant_7_n
     (not invariant_8_n)
     (not (= invariant_17_n 2.0))
     (not (= invariant_17_n 0.0))
     (not invariant_11_n)
     (= invariant_0_n 0.0)
     (= invariant_12_n 4.0)
     (= invariant_21_n 0.0)
     (= invariant_18_n 1.0))
into
(and (= invariant_12_n 4.0) (not (= invariant_17_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_17_n 2.0))
     (not (= invariant_17_n 0.0))
     (= invariant_0_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 4.0)
     (= invariant_20_n 2.0)
     (= invariant_29_n 4.0)
     (= invariant_27_n 3.0)
     (= invariant_18_n 1.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_17_n 2.0))
     (not (= invariant_17_n 0.0))
     (= invariant_0_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 4.0)
     (= invariant_20_n 2.0)
     (= invariant_29_n 4.0)
     (= invariant_27_n 3.0)
     (= invariant_18_n 1.0)
     (not (>= invariant_48_n 3.0)))
into
(and (= invariant_12_n 4.0) (= invariant_27_n 3.0) (not (= invariant_17_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_29_n 4.0)
     (= invariant_30_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 3.0)
     (= invariant_19_n 3.0)
     (= invariant_26_n 5.0)
     (= invariant_27_n 3.0)
     (= invariant_17_n 1.0)
     (= invariant_0_n 0.0)
     (= invariant_24_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_29_n 4.0)
     (= invariant_30_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 3.0)
     (= invariant_19_n 3.0)
     (= invariant_26_n 5.0)
     (= invariant_27_n 3.0)
     (= invariant_17_n 1.0)
     (= invariant_0_n 0.0)
     (= invariant_24_n 2.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 4.0)
     (= invariant_27_n 3.0)
     (= invariant_17_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_19_n 1.0))
     invariant_7_n
     (not (= 3.0 invariant_26_n))
     (not (= invariant_17_n 1.0))
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 4.0)
     (= invariant_12_n 6.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 0.0)
     (= invariant_31_n 2.0)
     (= invariant_33_n 10.0)
     (= invariant_22_n 1.0)
     (= invariant_15_n 0.0)
     (= invariant_23_n 2.0)
     (= invariant_29_n 5.0)
     (= invariant_27_n 8.0)
     (= invariant_16_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_19_n 1.0))
     invariant_7_n
     (not (= 3.0 invariant_26_n))
     (not (= invariant_17_n 1.0))
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 4.0)
     (= invariant_12_n 6.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 0.0)
     (= invariant_31_n 2.0)
     (= invariant_33_n 10.0)
     (= invariant_22_n 1.0)
     (= invariant_15_n 0.0)
     (= invariant_23_n 2.0)
     (= invariant_29_n 5.0)
     (= invariant_27_n 8.0)
     (= invariant_16_n 1.0))
into
(and invariant_7_n
     (= invariant_20_n 3.0)
     (= invariant_30_n 4.0)
     (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_15_n 2.0)
     (= invariant_0_n 1.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 8.0)
     (= invariant_31_n 2.0)
     (= invariant_24_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_15_n 2.0)
     (= invariant_0_n 1.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 8.0)
     (= invariant_31_n 2.0)
     (= invariant_24_n 3.0))
into
(and (= invariant_0_n 1.0) (= invariant_31_n 2.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_27_n 10.0)
     (= invariant_29_n 10.0)
     (= invariant_24_n 3.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_27_n 10.0)
     (= invariant_29_n 10.0)
     (= invariant_24_n 3.0)
     (= invariant_18_n 1.0))
into
(and (= invariant_18_n 1.0) (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     invariant_8_n
     (= invariant_0_n 0.0)
     (= invariant_12_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     invariant_8_n
     (= invariant_0_n 0.0)
     (= invariant_12_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_18_n 1.0))
into
(and (not invariant_11_n) (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (= invariant_23_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     (= invariant_23_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 2.0))
into
(and (not invariant_11_n) (= invariant_20_n 3.0) (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (not (= 10.0 invariant_33_n))
     (= invariant_18_n 2.0)
     (= invariant_30_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_24_n 6.0)
     (= invariant_12_n 5.0)
     (= invariant_26_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 3.0)
     (= invariant_27_n 6.0)
     (= invariant_17_n 0.0)
     (= invariant_16_n 2.0)
     (= invariant_22_n 0.0)
     (= invariant_21_n 0.0)
     (= invariant_15_n 2.0)
     (= invariant_31_n 10.0)
     (= invariant_19_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (not (= 10.0 invariant_33_n))
     (= invariant_18_n 2.0)
     (= invariant_30_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_24_n 6.0)
     (= invariant_12_n 5.0)
     (= invariant_26_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 3.0)
     (= invariant_27_n 6.0)
     (= invariant_17_n 0.0)
     (= invariant_16_n 2.0)
     (= invariant_22_n 0.0)
     (= invariant_21_n 0.0)
     (= invariant_15_n 2.0)
     (= invariant_31_n 10.0)
     (= invariant_19_n 2.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 2.0) (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_29_n 10.0)
     (= invariant_30_n 10.0)
     (= invariant_25_n 6.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_29_n 10.0)
     (= invariant_30_n 10.0)
     (= invariant_25_n 6.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 1.0))
into
(and (= invariant_19_n 3.0) (= invariant_0_n 1.0) (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_29_n 4.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_29_n 4.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 1.0))
into
(and (= invariant_19_n 3.0) (= invariant_0_n 1.0) (= invariant_29_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_29_n 7.0)
     (= invariant_24_n 6.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_29_n 7.0)
     (= invariant_24_n 6.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 1.0))
into
(and (= invariant_19_n 3.0) (= invariant_0_n 1.0) (= invariant_29_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_29_n 6.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 1.0)
     (= invariant_14_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_29_n 6.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 1.0)
     (= invariant_14_n 2.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_29_n 6.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_15_n 2.0))
     invariant_8_n
     (not (= invariant_17_n 2.0))
     (not (= invariant_17_n 1.0))
     (not invariant_11_n)
     (not invariant_9_n)
     (not (= invariant_22_n 2.0))
     (not (= invariant_19_n 1.0))
     (not (= invariant_16_n 1.0))
     (not (= invariant_15_n 1.0))
     (not (>= invariant_48_n 3.0))
     (= invariant_20_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_12_n 3.0)
     (= invariant_23_n 2.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_15_n 2.0))
     invariant_8_n
     (not (= invariant_17_n 2.0))
     (not (= invariant_17_n 1.0))
     (not invariant_11_n)
     (not invariant_9_n)
     (not (= invariant_22_n 2.0))
     (not (= invariant_19_n 1.0))
     (not (= invariant_16_n 1.0))
     (not (= invariant_15_n 1.0))
     (not (>= invariant_48_n 3.0))
     (= invariant_20_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_12_n 3.0)
     (= invariant_23_n 2.0)
     (= invariant_18_n 1.0))
into
(and (not invariant_11_n) (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (= invariant_0_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     (= invariant_0_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 3.0))
into
(and (not invariant_11_n) (= invariant_20_n 3.0) (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_19_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 3.0)
     (= invariant_12_n 9.0)
     (= invariant_29_n 3.0)
     (= invariant_22_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_19_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 3.0)
     (= invariant_12_n 9.0)
     (= invariant_29_n 3.0)
     (= invariant_22_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 1.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 9.0) (= invariant_30_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_0_n 1.0)
     (= invariant_29_n 5.0)
     (= invariant_19_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_0_n 1.0)
     (= invariant_29_n 5.0)
     (= invariant_19_n 3.0))
into
(and (= invariant_19_n 3.0) (= invariant_0_n 1.0) (= invariant_29_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_32_n 2.0)
     (= invariant_29_n 2.0)
     (= invariant_30_n 1.0)
     (= invariant_12_n 1.0)
     (= invariant_23_n 0.0)
     (= invariant_24_n 7.0)
     (= invariant_14_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_32_n 2.0)
     (= invariant_29_n 2.0)
     (= invariant_30_n 1.0)
     (= invariant_12_n 1.0)
     (= invariant_23_n 0.0)
     (= invariant_24_n 7.0)
     (= invariant_14_n 0.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 2.0)
     (= invariant_12_n 1.0)
     (= invariant_14_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_32_n 2.0)
     (= invariant_29_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_12_n 1.0)
     (= invariant_14_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_32_n 2.0)
     (= invariant_29_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_12_n 1.0)
     (= invariant_14_n 1.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 2.0)
     (= invariant_12_n 1.0)
     (= invariant_14_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_23_n 0.0)
     (= invariant_12_n 8.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_24_n 8.0)
     (= invariant_33_n 10.0)
     (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_23_n 0.0)
     (= invariant_12_n 8.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_24_n 8.0)
     (= invariant_33_n 10.0)
     (= invariant_29_n 10.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_23_n 0.0)
     (= invariant_12_n 8.0)
     (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_14_n 2.0)
     (= invariant_12_n 8.0)
     (= invariant_0_n 1.0)
     (= invariant_31_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_14_n 2.0)
     (= invariant_12_n 8.0)
     (= invariant_0_n 1.0)
     (= invariant_31_n 5.0))
into
(and (= invariant_0_n 1.0) (= invariant_12_n 8.0) (= invariant_31_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_12_n 5.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_21_n 3.0)
     (= invariant_31_n 4.0)
     (= invariant_30_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_12_n 5.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_21_n 3.0)
     (= invariant_31_n 4.0)
     (= invariant_30_n 4.0))
into
(and (= invariant_20_n 3.0)
     (= invariant_21_n 3.0)
     (= invariant_12_n 5.0)
     (= invariant_31_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_12_n 5.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_21_n 3.0)
     (= invariant_30_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_12_n 5.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_21_n 3.0)
     (= invariant_30_n 3.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 3.0) (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (= invariant_19_n 3.0)
     (= invariant_23_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_24_n 7.0)
     (= invariant_29_n 7.0)
     (= invariant_30_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (= invariant_19_n 3.0)
     (= invariant_23_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_24_n 7.0)
     (= invariant_29_n 7.0)
     (= invariant_30_n 6.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 7.0) (= invariant_23_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_23_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 7.0)
     (= invariant_30_n 6.0)
     (= invariant_24_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_23_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 7.0)
     (= invariant_30_n 6.0)
     (= invariant_24_n 7.0))
into
(and invariant_8_n
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 7.0)
     (= invariant_23_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_8_n)
     (not invariant_11_n)
     (= invariant_0_n 0.0)
     (= invariant_23_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_30_n 6.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_8_n)
     (not invariant_11_n)
     (= invariant_0_n 0.0)
     (= invariant_23_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_30_n 6.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 1.0))
into
(and (= invariant_20_n 3.0) (= invariant_23_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_23_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 6.0)
     (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_23_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 6.0)
     (= invariant_12_n 9.0))
into
(and (= invariant_20_n 3.0)
     (= invariant_12_n 9.0)
     (= invariant_23_n 1.0)
     (= invariant_30_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_18_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_23_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_18_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_23_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0))
into
(and (= invariant_20_n 3.0)
     (= invariant_30_n 5.0)
     (= invariant_18_n 1.0)
     (= invariant_23_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_14_n 2.0)
     (= invariant_12_n 8.0)
     (= invariant_0_n 1.0)
     (= invariant_15_n 1.0)
     (= invariant_31_n 3.0)
     (= invariant_30_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_14_n 2.0)
     (= invariant_12_n 8.0)
     (= invariant_0_n 1.0)
     (= invariant_15_n 1.0)
     (= invariant_31_n 3.0)
     (= invariant_30_n 5.0))
into
(and (= invariant_0_n 1.0) (= invariant_12_n 8.0) (= invariant_31_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_15_n 2.0))
     invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_29_n 7.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 7.0)
     (= invariant_12_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_18_n 1.0)
     (= invariant_30_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_15_n 2.0))
     invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_29_n 7.0)
     (= invariant_21_n 3.0)
     (= invariant_31_n 7.0)
     (= invariant_12_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_18_n 1.0)
     (= invariant_30_n 2.0))
into
(and invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_21_n 3.0)
     (= invariant_29_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (not (= invariant_17_n 1.0))
     (= invariant_30_n 2.0)
     (= invariant_12_n 6.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 2.0)
     (= invariant_16_n 2.0)
     (= invariant_31_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (not (= invariant_17_n 1.0))
     (= invariant_30_n 2.0)
     (= invariant_12_n 6.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 2.0)
     (= invariant_16_n 2.0)
     (= invariant_31_n 6.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 2.0) (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 2.0)
     (= invariant_24_n 1.0)
     (= invariant_22_n 2.0)
     (= invariant_29_n 9.0)
     (= invariant_31_n 7.0)
     (= invariant_15_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_30_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 2.0)
     (= invariant_24_n 1.0)
     (= invariant_22_n 2.0)
     (= invariant_29_n 9.0)
     (= invariant_31_n 7.0)
     (= invariant_15_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_30_n 4.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_29_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_29_n 4.0)
     (= invariant_15_n 0.0)
     (= invariant_12_n 2.0)
     (= invariant_22_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_29_n 4.0)
     (= invariant_15_n 0.0)
     (= invariant_12_n 2.0)
     (= invariant_22_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_29_n 4.0)
     (= invariant_12_n 2.0)
     (= invariant_15_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (= invariant_17_n 2.0))
     (not (= invariant_17_n 1.0))
     (= invariant_18_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_30_n 8.0)
     (= invariant_29_n 8.0)
     (= invariant_24_n 4.0)
     (= invariant_12_n 4.0)
     (= invariant_14_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (= invariant_17_n 2.0))
     (not (= invariant_17_n 1.0))
     (= invariant_18_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_30_n 8.0)
     (= invariant_29_n 8.0)
     (= invariant_24_n 4.0)
     (= invariant_12_n 4.0)
     (= invariant_14_n 2.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_12_n 4.0)
     (= invariant_29_n 8.0)
     (not (= invariant_17_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_15_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_0_n 1.0)
     (= invariant_19_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_22_n 1.0)
     (= invariant_25_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_15_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_0_n 1.0)
     (= invariant_19_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_22_n 1.0)
     (= invariant_25_n 3.0))
into
(and (= invariant_25_n 3.0) (= invariant_0_n 1.0) (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_16_n 0.0)
     (= invariant_12_n 3.0)
     (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_16_n 0.0)
     (= invariant_12_n 3.0)
     (= invariant_0_n 1.0))
into
(and (= invariant_12_n 3.0) (= invariant_16_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_12_n 3.0)
     (= invariant_30_n 2.0)
     (= invariant_0_n 1.0)
     (= invariant_20_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_12_n 3.0)
     (= invariant_30_n 2.0)
     (= invariant_0_n 1.0)
     (= invariant_20_n 3.0))
into
(and (= invariant_20_n 3.0) (= invariant_0_n 1.0) (= invariant_30_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_15_n 2.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 1.0)
     (= invariant_12_n 1.0)
     (= invariant_29_n 3.0)
     (= invariant_18_n 0.0)
     (= invariant_14_n 2.0)
     (= invariant_23_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_15_n 2.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 1.0)
     (= invariant_12_n 1.0)
     (= invariant_29_n 3.0)
     (= invariant_18_n 0.0)
     (= invariant_14_n 2.0)
     (= invariant_23_n 2.0))
into
(and (= invariant_19_n 3.0) (= invariant_0_n 1.0) (= invariant_29_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_15_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 3.0)
     (= invariant_0_n 1.0)
     (= invariant_18_n 0.0)
     (= invariant_14_n 2.0)
     (= invariant_23_n 0.0)
     (= invariant_22_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_15_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 3.0)
     (= invariant_0_n 1.0)
     (= invariant_18_n 0.0)
     (= invariant_14_n 2.0)
     (= invariant_23_n 0.0)
     (= invariant_22_n 0.0))
into
(and (= invariant_12_n 3.0) (not (>= invariant_48_n 3.0)) (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_18_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_30_n 10.0)
     (= invariant_33_n 10.0)
     (= invariant_29_n 10.0)
     (= invariant_22_n 0.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 9.0)
     (= invariant_21_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_18_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_30_n 10.0)
     (= invariant_33_n 10.0)
     (= invariant_29_n 10.0)
     (= invariant_22_n 0.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 9.0)
     (= invariant_21_n 0.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 9.0)
     (= invariant_22_n 0.0)
     (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_30_n 7.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_30_n 7.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0)))
into
(and (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_15_n 0.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 1.0)
     (= invariant_23_n 2.0)
     (= invariant_12_n 1.0)
     (= invariant_29_n 2.0)
     (= invariant_28_n 6.0)
     (= invariant_24_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_15_n 0.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 1.0)
     (= invariant_23_n 2.0)
     (= invariant_12_n 1.0)
     (= invariant_29_n 2.0)
     (= invariant_28_n 6.0)
     (= invariant_24_n 3.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 1.0)
     (= invariant_29_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (= invariant_0_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 4.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     (= invariant_0_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 4.0)
     (not (>= invariant_48_n 3.0)))
into
(and (not invariant_11_n) (= invariant_20_n 3.0) (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_19_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 4.0)
     (= invariant_12_n 9.0)
     (= invariant_22_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_33_n 8.0)
     (= invariant_23_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_19_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 4.0)
     (= invariant_12_n 9.0)
     (= invariant_22_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_33_n 8.0)
     (= invariant_23_n 2.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 4.0) (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_18_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_18_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0))
into
(and (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_18_n 3.0)
     (= invariant_12_n 5.0)
     (= invariant_15_n 1.0)
     (= invariant_19_n 3.0)
     (= invariant_28_n 6.0)
     (= invariant_23_n 0.0)
     (= invariant_29_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_18_n 3.0)
     (= invariant_12_n 5.0)
     (= invariant_15_n 1.0)
     (= invariant_19_n 3.0)
     (= invariant_28_n 6.0)
     (= invariant_23_n 0.0)
     (= invariant_29_n 6.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_18_n 3.0)
     (= invariant_12_n 5.0)
     (= invariant_28_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_14_n 2.0))
     invariant_7_n
     (not invariant_4_n)
     (not invariant_8_n)
     (not (= invariant_22_n 1.0))
     (not (= invariant_19_n 1.0))
     (not (= invariant_17_n 1.0))
     (not (= invariant_17_n 2.0))
     (not (= invariant_16_n 1.0))
     (not (= invariant_15_n 2.0))
     (= invariant_0_n 0.0)
     (= invariant_12_n 7.0)
     (= invariant_30_n 5.0)
     (= invariant_20_n 2.0)
     (= invariant_18_n 1.0)
     (= invariant_24_n 4.0)
     (= invariant_33_n 2.0)
     (= invariant_23_n 0.0)
     (= invariant_31_n 3.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_14_n 2.0))
     invariant_7_n
     (not invariant_4_n)
     (not invariant_8_n)
     (not (= invariant_22_n 1.0))
     (not (= invariant_19_n 1.0))
     (not (= invariant_17_n 1.0))
     (not (= invariant_17_n 2.0))
     (not (= invariant_16_n 1.0))
     (not (= invariant_15_n 2.0))
     (= invariant_0_n 0.0)
     (= invariant_12_n 7.0)
     (= invariant_30_n 5.0)
     (= invariant_20_n 2.0)
     (= invariant_18_n 1.0)
     (= invariant_24_n 4.0)
     (= invariant_33_n 2.0)
     (= invariant_23_n 0.0)
     (= invariant_31_n 3.0)
     (not (>= invariant_48_n 3.0)))
into
(and (not invariant_4_n) (= invariant_12_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_4_n)
     (= invariant_12_n 7.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_31_n 3.0)
     (= invariant_30_n 5.0)
     (= invariant_24_n 4.0)
     (= invariant_33_n 2.0)
     (= invariant_23_n 0.0)
     (= invariant_29_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_4_n)
     (= invariant_12_n 7.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_31_n 3.0)
     (= invariant_30_n 5.0)
     (= invariant_24_n 4.0)
     (= invariant_33_n 2.0)
     (= invariant_23_n 0.0)
     (= invariant_29_n 7.0))
into
(and (not invariant_4_n) (= invariant_19_n 3.0) (= invariant_29_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_18_n 2.0)
     (= invariant_29_n 7.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 5.0)
     (= invariant_24_n 4.0)
     (= invariant_31_n 3.0)
     (= invariant_23_n 0.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_33_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_18_n 2.0)
     (= invariant_29_n 7.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 5.0)
     (= invariant_24_n 4.0)
     (= invariant_31_n 3.0)
     (= invariant_23_n 0.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_33_n 2.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 7.0) (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_12_n 8.0)
     (= invariant_30_n 5.0)
     (= invariant_18_n 0.0)
     (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_12_n 8.0)
     (= invariant_30_n 5.0)
     (= invariant_18_n 0.0)
     (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0)))
into
(and (= invariant_20_n 3.0)
     (= invariant_30_n 5.0)
     (= invariant_18_n 0.0)
     (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_29_n 4.0)
     (= invariant_12_n 4.0)
     (= invariant_20_n 3.0)
     (= invariant_30_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 1.0)
     (= invariant_19_n 2.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_29_n 4.0)
     (= invariant_12_n 4.0)
     (= invariant_20_n 3.0)
     (= invariant_30_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 1.0)
     (= invariant_19_n 2.0)
     (not (>= invariant_48_n 3.0)))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 3.0) (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_18_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (not (<= invariant_30_n 7.0))
     (= invariant_29_n 8.0)
     (= invariant_24_n 2.0)
     (= invariant_23_n 0.0)
     (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_18_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (not (<= invariant_30_n 7.0))
     (= invariant_29_n 8.0)
     (= invariant_24_n 2.0)
     (= invariant_23_n 0.0)
     (= invariant_12_n 6.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 6.0) (= invariant_29_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_12_n 6.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_18_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_12_n 6.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_18_n 0.0))
into
(and (= invariant_20_n 3.0)
     (= invariant_30_n 5.0)
     (= invariant_18_n 0.0)
     (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_19_n 2.0)
     (= invariant_30_n 2.0)
     (= invariant_33_n 4.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_19_n 2.0)
     (= invariant_30_n 2.0)
     (= invariant_33_n 4.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 4.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 2.0) (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_12_n 9.0)
     (= invariant_30_n 6.0)
     (= invariant_20_n 3.0)
     (= invariant_22_n 1.0)
     (= invariant_21_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_12_n 9.0)
     (= invariant_30_n 6.0)
     (= invariant_20_n 3.0)
     (= invariant_22_n 1.0)
     (= invariant_21_n 2.0))
into
(and (= invariant_20_n 3.0)
     (= invariant_12_n 9.0)
     (= invariant_22_n 1.0)
     (= invariant_30_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 9.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 10.0)
     (= invariant_31_n 7.0)
     (= invariant_32_n 3.0)
     (= invariant_25_n 1.0)
     (= invariant_30_n 3.0)
     (= invariant_22_n 1.0)
     (= invariant_21_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 9.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 10.0)
     (= invariant_31_n 7.0)
     (= invariant_32_n 3.0)
     (= invariant_25_n 1.0)
     (= invariant_30_n 3.0)
     (= invariant_22_n 1.0)
     (= invariant_21_n 2.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 9.0)
     (= invariant_22_n 1.0)
     (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_12_n 9.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 8.0)
     (= invariant_22_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_12_n 9.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 8.0)
     (= invariant_22_n 1.0))
into
(and (= invariant_20_n 3.0)
     (= invariant_12_n 9.0)
     (= invariant_22_n 1.0)
     (= invariant_30_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= 10.0 invariant_33_n))
     invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 7.0)
     (= invariant_30_n 3.0)
     (= invariant_12_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_23_n 2.0)
     (= invariant_22_n 1.0)
     (= invariant_15_n 2.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_24_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= 10.0 invariant_33_n))
     invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 7.0)
     (= invariant_30_n 3.0)
     (= invariant_12_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_23_n 2.0)
     (= invariant_22_n 1.0)
     (= invariant_15_n 2.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_24_n 2.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 3.0) (= invariant_29_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_17_n 1.0))
     invariant_7_n
     (= invariant_12_n 6.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_19_n 2.0)
     (= invariant_16_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_17_n 1.0))
     invariant_7_n
     (= invariant_12_n 6.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_19_n 2.0)
     (= invariant_16_n 2.0))
into
(and invariant_7_n
     (= invariant_20_n 3.0)
     (= invariant_30_n 5.0)
     (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_8_n)
     invariant_7_n
     (not invariant_4_n)
     (not invariant_11_n)
     (= invariant_12_n 8.0)
     (= invariant_0_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_8_n)
     invariant_7_n
     (not invariant_4_n)
     (not invariant_11_n)
     (= invariant_12_n 8.0)
     (= invariant_0_n 0.0))
into
(and (not invariant_11_n) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 8.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 8.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 8.0))
into
(and (not invariant_11_n) (= invariant_19_n 3.0) (= invariant_29_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_18_n 2.0)
     (= invariant_12_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 8.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 0.0)
     (<= invariant_33_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_18_n 2.0)
     (= invariant_12_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 8.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 0.0)
     (<= invariant_33_n 9.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 5.0) (= invariant_29_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_24_n 1.0)
     (= invariant_12_n 4.0)
     (= invariant_20_n 3.0)
     (= invariant_30_n 1.0)
     (= invariant_0_n 0.0)
     (= invariant_21_n 1.0)
     (= invariant_22_n 0.0)
     (= invariant_17_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_24_n 1.0)
     (= invariant_12_n 4.0)
     (= invariant_20_n 3.0)
     (= invariant_30_n 1.0)
     (= invariant_0_n 0.0)
     (= invariant_21_n 1.0)
     (= invariant_22_n 0.0)
     (= invariant_17_n 0.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 1.0) (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_21_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_28_n 3.0)
     (= invariant_29_n 3.0)
     (= invariant_23_n 2.0)
     (= invariant_12_n 2.0)
     (= invariant_15_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_21_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_28_n 3.0)
     (= invariant_29_n 3.0)
     (= invariant_23_n 2.0)
     (= invariant_12_n 2.0)
     (= invariant_15_n 0.0))
into
(and (not (>= invariant_48_n 3.0))
     (= invariant_12_n 2.0)
     (= invariant_15_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_15_n 3.0)
     (= invariant_25_n 3.0)
     (= invariant_29_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_15_n 3.0)
     (= invariant_25_n 3.0)
     (= invariant_29_n 3.0))
into
(and (= invariant_15_n 3.0)
     (= invariant_25_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_19_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 2.0)
     (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_19_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 2.0)
     (= invariant_12_n 3.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 3.0) (= invariant_30_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_4_n)
     invariant_7_n
     (not (= invariant_17_n 2.0))
     (not invariant_11_n)
     (not invariant_9_n)
     (not (= invariant_22_n 2.0))
     (= invariant_48_n 0.0)
     (= invariant_20_n 2.0)
     (= invariant_21_n 1.0)
     (= invariant_12_n 10.0)
     (= invariant_19_n 2.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_4_n)
     invariant_7_n
     (not (= invariant_17_n 2.0))
     (not invariant_11_n)
     (not invariant_9_n)
     (not (= invariant_22_n 2.0))
     (= invariant_48_n 0.0)
     (= invariant_20_n 2.0)
     (= invariant_21_n 1.0)
     (= invariant_12_n 10.0)
     (= invariant_19_n 2.0)
     (= invariant_18_n 1.0))
into
(and (not invariant_9_n) (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_9_n)
     (= invariant_14_n 2.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 10.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_9_n)
     (= invariant_14_n 2.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 10.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 10.0))
into
(and (not invariant_9_n) (= invariant_19_n 3.0) (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 9.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 10.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_23_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_21_n 1.0)
     (= invariant_24_n 5.0)
     (= invariant_33_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 9.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 10.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_23_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_21_n 1.0)
     (= invariant_24_n 5.0)
     (= invariant_33_n 2.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 9.0)
     (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_27_n 4.0)
     (= invariant_12_n 6.0)
     (= invariant_19_n 3.0)
     (= invariant_21_n 1.0)
     (= invariant_18_n 1.0)
     (= invariant_29_n 9.0)
     (= invariant_15_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_32_n 4.0)
     (= invariant_24_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_27_n 4.0)
     (= invariant_12_n 6.0)
     (= invariant_19_n 3.0)
     (= invariant_21_n 1.0)
     (= invariant_18_n 1.0)
     (= invariant_29_n 9.0)
     (= invariant_15_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_32_n 4.0)
     (= invariant_24_n 5.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 6.0) (= invariant_29_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (= invariant_15_n 2.0))
     (= invariant_21_n 1.0)
     (= invariant_29_n 7.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_24_n 5.0)
     (= invariant_28_n 1.0)
     (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (= invariant_15_n 2.0))
     (= invariant_21_n 1.0)
     (= invariant_29_n 7.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_24_n 5.0)
     (= invariant_28_n 1.0)
     (= invariant_12_n 2.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 2.0) (= invariant_29_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_33_n 2.0)
     (= invariant_19_n 3.0)
     (= invariant_24_n 6.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 8.0)
     (= invariant_12_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_23_n 2.0)
     (= invariant_22_n 1.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_21_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_33_n 2.0)
     (= invariant_19_n 3.0)
     (= invariant_24_n 6.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 8.0)
     (= invariant_12_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_23_n 2.0)
     (= invariant_22_n 1.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_21_n 1.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_21_n 1.0)
     (= invariant_29_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (not (>= invariant_48_n 3.0))
     (= invariant_22_n 1.0)
     (= invariant_12_n 9.0)
     (= invariant_30_n 5.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (not (>= invariant_48_n 3.0))
     (= invariant_22_n 1.0)
     (= invariant_12_n 9.0)
     (= invariant_30_n 5.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0))
into
(and (= invariant_20_n 3.0)
     (= invariant_12_n 9.0)
     (= invariant_22_n 1.0)
     (= invariant_30_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_14_n 0.0)
     (= invariant_30_n 3.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_14_n 0.0)
     (= invariant_30_n 3.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 6.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 3.0) (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_19_n 2.0)
     (= invariant_12_n 3.0)
     (= invariant_30_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_25_n 6.0)
     (= invariant_16_n 1.0)
     (= invariant_26_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_33_n 2.0)
     (= invariant_22_n 0.0)
     (= invariant_45_n 1.0)
     (= invariant_18_n 1.0)
     (= invariant_21_n 1.0)
     (= invariant_15_n 1.0)
     (= invariant_14_n 0.0)
     (= invariant_24_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_19_n 2.0)
     (= invariant_12_n 3.0)
     (= invariant_30_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_25_n 6.0)
     (= invariant_16_n 1.0)
     (= invariant_26_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_33_n 2.0)
     (= invariant_22_n 0.0)
     (= invariant_45_n 1.0)
     (= invariant_18_n 1.0)
     (= invariant_21_n 1.0)
     (= invariant_15_n 1.0)
     (= invariant_14_n 0.0)
     (= invariant_24_n 7.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 3.0) (= invariant_30_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 6.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 6.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 10.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 6.0) (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_8_n)
     invariant_7_n
     (not invariant_4_n)
     (not invariant_9_n)
     (not invariant_11_n)
     (= invariant_12_n 9.0)
     (= invariant_0_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_8_n)
     invariant_7_n
     (not invariant_4_n)
     (not invariant_9_n)
     (not invariant_11_n)
     (= invariant_12_n 9.0)
     (= invariant_0_n 0.0))
into
(and (not invariant_11_n) (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (not (= 6.0 invariant_29_n))
     (= invariant_19_n 3.0)
     (= invariant_12_n 9.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_21_n 1.0)
     (= invariant_27_n 7.0)
     (= invariant_16_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     (not (= 6.0 invariant_29_n))
     (= invariant_19_n 3.0)
     (= invariant_12_n 9.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_21_n 1.0)
     (= invariant_27_n 7.0)
     (= invariant_16_n 0.0))
into
(and (not invariant_11_n) (= invariant_19_n 3.0) (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_16_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_31_n 9.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 9.0)
     (= invariant_33_n 4.0)
     (= invariant_12_n 8.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_27_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_16_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_31_n 9.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 9.0)
     (= invariant_33_n 4.0)
     (= invariant_12_n 8.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_27_n 7.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 8.0)
     (= invariant_29_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 8.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 8.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 10.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 8.0) (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_9_n)
     invariant_8_n
     (not invariant_4_n)
     (not invariant_11_n)
     (= invariant_0_n 0.0)
     (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_9_n)
     invariant_8_n
     (not invariant_4_n)
     (not invariant_11_n)
     (= invariant_0_n 0.0)
     (= invariant_12_n 6.0))
into
(and (not invariant_11_n) (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (= invariant_18_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     (= invariant_18_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 6.0))
into
(and (not invariant_11_n) (= invariant_20_n 3.0) (= invariant_30_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_15_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 6.0)
     (= invariant_46_n 6.0)
     (= invariant_12_n 8.0)
     (= invariant_31_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_15_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 6.0)
     (= invariant_46_n 6.0)
     (= invariant_12_n 8.0)
     (= invariant_31_n 6.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 8.0) (= invariant_30_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_0_n 1.0)
     (= invariant_12_n 8.0)
     (= invariant_30_n 4.0)
     (= invariant_31_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_0_n 1.0)
     (= invariant_12_n 8.0)
     (= invariant_30_n 4.0)
     (= invariant_31_n 4.0))
into
(and (= invariant_0_n 1.0) (= invariant_12_n 8.0) (= invariant_31_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_19_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 4.0)
     (= invariant_12_n 8.0)
     (= invariant_24_n 4.0)
     (= invariant_22_n 2.0)
     (= invariant_31_n 7.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 0.0)
     (= invariant_14_n 1.0)
     (= invariant_33_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_19_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 4.0)
     (= invariant_12_n 8.0)
     (= invariant_24_n 4.0)
     (= invariant_22_n 2.0)
     (= invariant_31_n 7.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 0.0)
     (= invariant_14_n 1.0)
     (= invariant_33_n 9.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 4.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (not invariant_4_n)
     (= invariant_18_n 1.0)
     (= invariant_12_n 6.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     (not invariant_4_n)
     (= invariant_18_n 1.0)
     (= invariant_12_n 6.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0))
into
(and (not invariant_11_n) (= invariant_19_n 3.0) (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_26_n 1.0)
     (= invariant_12_n 5.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 6.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_20_n 2.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 2.0)
     (= invariant_31_n 7.0)
     (= invariant_33_n 9.0)
     (= invariant_27_n 1.0)
     (= invariant_32_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_26_n 1.0)
     (= invariant_12_n 5.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 6.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_20_n 2.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 2.0)
     (= invariant_31_n 7.0)
     (= invariant_33_n 9.0)
     (= invariant_27_n 1.0)
     (= invariant_32_n 1.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_29_n 6.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_0_n 0.0)
     (= invariant_12_n 9.0)
     (= invariant_22_n 0.0)
     (= invariant_30_n 5.0)
     (= invariant_20_n 3.0)
     (= invariant_15_n 0.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_0_n 0.0)
     (= invariant_12_n 9.0)
     (= invariant_22_n 0.0)
     (= invariant_30_n 5.0)
     (= invariant_20_n 3.0)
     (= invariant_15_n 0.0)
     (not (>= invariant_48_n 3.0)))
into
(and (= invariant_12_n 9.0) (= invariant_22_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_19_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 2.0)
     (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_19_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 2.0)
     (= invariant_12_n 9.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 9.0) (= invariant_30_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0)))
into
(and (not invariant_11_n) (= invariant_20_n 3.0) (= invariant_30_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_26_n 1.0)
     (= invariant_30_n 8.0)
     (= invariant_12_n 9.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_22_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_31_n 6.0)
     (= invariant_33_n 5.0)
     (= invariant_19_n 2.0)
     (= invariant_27_n 1.0)
     (= invariant_32_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_26_n 1.0)
     (= invariant_30_n 8.0)
     (= invariant_12_n 9.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_22_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_31_n 6.0)
     (= invariant_33_n 5.0)
     (= invariant_19_n 2.0)
     (= invariant_27_n 1.0)
     (= invariant_32_n 1.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 9.0) (= invariant_30_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_30_n 6.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_30_n 6.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 9.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 9.0) (= invariant_30_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_16_n 1.0))
     invariant_8_n
     (not invariant_11_n)
     (not (= invariant_17_n 2.0))
     (not invariant_9_n)
     (= invariant_12_n 5.0)
     (= invariant_21_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_20_n 2.0)
     (= invariant_0_n 0.0)
     (= invariant_23_n 2.0)
     (= invariant_19_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_16_n 1.0))
     invariant_8_n
     (not invariant_11_n)
     (not (= invariant_17_n 2.0))
     (not invariant_9_n)
     (= invariant_12_n 5.0)
     (= invariant_21_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_20_n 2.0)
     (= invariant_0_n 0.0)
     (= invariant_23_n 2.0)
     (= invariant_19_n 2.0))
into
(and (not invariant_11_n) (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (= invariant_14_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     (= invariant_14_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0))
into
(and (not invariant_11_n) (= invariant_20_n 3.0) (= invariant_30_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_26_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_12_n 9.0)
     (= invariant_22_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_33_n 8.0)
     (= invariant_19_n 2.0)
     (= invariant_27_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_26_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_12_n 9.0)
     (= invariant_22_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_33_n 8.0)
     (= invariant_19_n 2.0)
     (= invariant_27_n 1.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 9.0) (= invariant_30_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_17_n 2.0))
     (= invariant_0_n 0.0)
     (= invariant_22_n 2.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 4.0)
     (= invariant_18_n 1.0)
     (= invariant_27_n 1.0)
     (= invariant_32_n 1.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_17_n 2.0))
     (= invariant_0_n 0.0)
     (= invariant_22_n 2.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 4.0)
     (= invariant_18_n 1.0)
     (= invariant_27_n 1.0)
     (= invariant_32_n 1.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0)))
into
(and (= invariant_27_n 1.0) (= invariant_12_n 4.0) (not (= invariant_17_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_28_n 2.0)
     (= invariant_25_n 2.0)
     (= invariant_27_n 1.0)
     (= invariant_17_n 1.0)
     (= invariant_0_n 0.0)
     (= invariant_26_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_28_n 2.0)
     (= invariant_25_n 2.0)
     (= invariant_27_n 1.0)
     (= invariant_17_n 1.0)
     (= invariant_0_n 0.0)
     (= invariant_26_n 1.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_27_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 4.0)
     (= invariant_17_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_15_n 0.0)
     (= invariant_29_n 7.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_33_n 6.0)
     (= invariant_27_n 1.0)
     (= invariant_23_n 0.0)
     (= invariant_22_n 0.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 2.0)
     (= invariant_25_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_15_n 0.0)
     (= invariant_29_n 7.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_33_n 6.0)
     (= invariant_27_n 1.0)
     (= invariant_23_n 0.0)
     (= invariant_22_n 0.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 2.0)
     (= invariant_25_n 2.0))
into
(and invariant_8_n
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_15_n 2.0))
     invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 3.0)
     (= invariant_21_n 1.0)
     (= invariant_20_n 2.0)
     (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_15_n 2.0))
     invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 3.0)
     (= invariant_21_n 1.0)
     (= invariant_20_n 2.0)
     (= invariant_12_n 2.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 2.0)
     (not (= invariant_15_n 2.0))
     (= invariant_29_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_12_n 10.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 3.0)
     (= invariant_24_n 4.0)
     (= invariant_25_n 3.0)
     (= invariant_15_n 3.0)
     (= invariant_14_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_12_n 10.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 3.0)
     (= invariant_24_n 4.0)
     (= invariant_25_n 3.0)
     (= invariant_15_n 3.0)
     (= invariant_14_n 2.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 3.0) (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (not (= invariant_15_n 2.0))
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_24_n 4.0)
     (= invariant_33_n 5.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 8.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (not (= invariant_15_n 2.0))
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_24_n 4.0)
     (= invariant_33_n 5.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 8.0)
     (= invariant_18_n 1.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 2.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 10.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 2.0) (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_15_n 2.0))
     invariant_8_n
     (= invariant_29_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_30_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_15_n 2.0))
     invariant_8_n
     (= invariant_29_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_30_n 2.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (not (= invariant_15_n 2.0))
     (= invariant_29_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (= invariant_15_n 2.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_23_n 2.0)
     (= invariant_30_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 6.0)
     (= invariant_28_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (= invariant_15_n 2.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_23_n 2.0)
     (= invariant_30_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 6.0)
     (= invariant_28_n 6.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 6.0) (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (= invariant_0_n 0.0)
     (= invariant_12_n 4.0)
     (= invariant_18_n 2.0)
     (= invariant_21_n 1.0)
     (= invariant_29_n 4.0)
     (= invariant_30_n 2.0)
     (= invariant_24_n 8.0)
     (= invariant_17_n 1.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_47_n 2.0)
     (= invariant_27_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (= invariant_0_n 0.0)
     (= invariant_12_n 4.0)
     (= invariant_18_n 2.0)
     (= invariant_21_n 1.0)
     (= invariant_29_n 4.0)
     (= invariant_30_n 2.0)
     (= invariant_24_n 8.0)
     (= invariant_17_n 1.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_47_n 2.0)
     (= invariant_27_n 2.0))
into
(and (= invariant_12_n 4.0) (= invariant_17_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 4.0)
     (= invariant_30_n 2.0)
     (= invariant_24_n 8.0)
     (= invariant_19_n 3.0)
     (= invariant_17_n 1.0)
     (= invariant_47_n 4.0)
     (= invariant_27_n 2.0)
     (= invariant_0_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 4.0)
     (= invariant_30_n 2.0)
     (= invariant_24_n 8.0)
     (= invariant_19_n 3.0)
     (= invariant_17_n 1.0)
     (= invariant_47_n 4.0)
     (= invariant_27_n 2.0)
     (= invariant_0_n 0.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_12_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 4.0)
     (= invariant_17_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_26_n 9.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_12_n 8.0)
     (= invariant_32_n 2.0)
     (= invariant_22_n 1.0)
     (= invariant_21_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 0.0)
     (= invariant_33_n 7.0)
     (= invariant_19_n 2.0)
     (= invariant_27_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_26_n 9.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_12_n 8.0)
     (= invariant_32_n 2.0)
     (= invariant_22_n 1.0)
     (= invariant_21_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 0.0)
     (= invariant_33_n 7.0)
     (= invariant_19_n 2.0)
     (= invariant_27_n 8.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 5.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_30_n 6.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_30_n 6.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 10.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 10.0) (= invariant_30_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (not (= 10.0 invariant_33_n))
     (= invariant_19_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 4.0)
     (= invariant_12_n 10.0)
     (= invariant_21_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 0.0)
     (= invariant_24_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (not (= 10.0 invariant_33_n))
     (= invariant_19_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 4.0)
     (= invariant_12_n 10.0)
     (= invariant_21_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 0.0)
     (= invariant_24_n 8.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 4.0) (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_14_n 0.0)
     (= invariant_30_n 3.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_14_n 0.0)
     (= invariant_30_n 3.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 8.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 3.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= invariant_17_n 2.0))
     (= invariant_0_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 4.0)
     (= invariant_14_n 0.0)
     (= invariant_24_n 8.0)
     (= invariant_27_n 8.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= invariant_17_n 2.0))
     (= invariant_0_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 4.0)
     (= invariant_14_n 0.0)
     (= invariant_24_n 8.0)
     (= invariant_27_n 8.0)
     (not (>= invariant_48_n 3.0)))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 4.0) (not (= invariant_17_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_0_n 0.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_30_n 6.0)
     (= invariant_12_n 3.0)
     (= invariant_16_n 2.0)
     (= invariant_27_n 8.0)
     (= invariant_17_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_0_n 0.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_30_n 6.0)
     (= invariant_12_n 3.0)
     (= invariant_16_n 2.0)
     (= invariant_27_n 8.0)
     (= invariant_17_n 0.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_12_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 4.0)
     (= invariant_17_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_27_n 9.0)
     (= invariant_12_n 2.0)
     (= invariant_17_n 3.0)
     (= invariant_0_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_27_n 9.0)
     (= invariant_12_n 2.0)
     (= invariant_17_n 3.0)
     (= invariant_0_n 0.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_17_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_27_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 2.0)
     (= invariant_29_n 5.0)
     (= invariant_17_n 3.0)
     (= invariant_19_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 2.0)
     (= invariant_29_n 5.0)
     (= invariant_17_n 3.0)
     (= invariant_19_n 3.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_17_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_29_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_27_n 3.0)
     (= invariant_17_n 3.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_27_n 3.0)
     (= invariant_17_n 3.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_17_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_27_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_27_n 8.0)
     (= invariant_17_n 3.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_27_n 8.0)
     (= invariant_17_n 3.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_17_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_27_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_27_n 4.0)
     (= invariant_17_n 3.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_27_n 4.0)
     (= invariant_17_n 3.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_17_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_27_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_27_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_17_n 3.0)
     (= invariant_30_n 1.0)
     (= invariant_12_n 6.0)
     (>= invariant_25_n 6.0)
     (<= invariant_25_n 7.0)
     (= invariant_26_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_27_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_17_n 3.0)
     (= invariant_30_n 1.0)
     (= invariant_12_n 6.0)
     (>= invariant_25_n 6.0)
     (<= invariant_25_n 7.0)
     (= invariant_26_n 2.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 1.0) (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_29_n 9.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 3.0)
     (= invariant_17_n 1.0)
     (= invariant_24_n 8.0)
     (= invariant_26_n 3.0)
     (= invariant_14_n 1.0)
     (= invariant_30_n 2.0)
     (= invariant_33_n 5.0)
     (= invariant_25_n 7.0)
     (= invariant_20_n 2.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 1.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 2.0)
     (= invariant_27_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_29_n 9.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 3.0)
     (= invariant_17_n 1.0)
     (= invariant_24_n 8.0)
     (= invariant_26_n 3.0)
     (= invariant_14_n 1.0)
     (= invariant_30_n 2.0)
     (= invariant_33_n 5.0)
     (= invariant_25_n 7.0)
     (= invariant_20_n 2.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 1.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 2.0)
     (= invariant_27_n 5.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 3.0) (= invariant_29_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (= invariant_29_n 4.0)
     (= invariant_0_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_23_n 1.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (= invariant_29_n 4.0)
     (= invariant_0_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_23_n 1.0)
     (not (>= invariant_48_n 3.0)))
into
(and (= invariant_19_n 3.0) (= invariant_0_n 0.0) (= invariant_23_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_23_n 1.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_23_n 1.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 3.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_29_n 4.0)
     (= invariant_23_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (= invariant_14_n 1.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     (= invariant_14_n 1.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0))
into
(and (not invariant_11_n) (= invariant_19_n 3.0) (= invariant_29_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= 3.0 invariant_26_n))
     invariant_8_n
     (not (= 10.0 invariant_33_n))
     (= invariant_29_n 4.0)
     (= invariant_30_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 3.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 1.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 1.0)
     (= invariant_24_n 8.0)
     (= invariant_27_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= 3.0 invariant_26_n))
     invariant_8_n
     (not (= 10.0 invariant_33_n))
     (= invariant_29_n 4.0)
     (= invariant_30_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 3.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 1.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 1.0)
     (= invariant_24_n 8.0)
     (= invariant_27_n 5.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_12_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_28_n 7.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 10.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 1.0)
     (= invariant_15_n 1.0)
     (= invariant_33_n 8.0)
     (= invariant_27_n 2.0)
     (= invariant_26_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_28_n 7.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 10.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 1.0)
     (= invariant_15_n 1.0)
     (= invariant_33_n 8.0)
     (= invariant_27_n 2.0)
     (= invariant_26_n 4.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 5.0) (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (not (= 10.0 invariant_33_n))
     (= invariant_18_n 2.0)
     (= invariant_12_n 5.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 4.0)
     (= invariant_15_n 0.0)
     (= invariant_22_n 1.0)
     (= invariant_21_n 2.0)
     (= invariant_25_n 4.0)
     (= invariant_24_n 8.0)
     (= invariant_19_n 2.0)
     (= invariant_27_n 2.0)
     (= invariant_26_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (not (= 10.0 invariant_33_n))
     (= invariant_18_n 2.0)
     (= invariant_12_n 5.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 4.0)
     (= invariant_15_n 0.0)
     (= invariant_22_n 1.0)
     (= invariant_21_n 2.0)
     (= invariant_25_n 4.0)
     (= invariant_24_n 8.0)
     (= invariant_19_n 2.0)
     (= invariant_27_n 2.0)
     (= invariant_26_n 4.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 4.0) (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_26_n 4.0)
     (= invariant_12_n 8.0)
     (= invariant_30_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_33_n 5.0)
     (= invariant_0_n 0.0)
     (= invariant_24_n 8.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_14_n 1.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_31_n 9.0)
     (= invariant_22_n 1.0)
     (= invariant_19_n 2.0)
     (= invariant_27_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_26_n 4.0)
     (= invariant_12_n 8.0)
     (= invariant_30_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_33_n 5.0)
     (= invariant_0_n 0.0)
     (= invariant_24_n 8.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_14_n 1.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_31_n 9.0)
     (= invariant_22_n 1.0)
     (= invariant_19_n 2.0)
     (= invariant_27_n 2.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 1.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_27_n 2.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_15_n 0.0)
     (= invariant_29_n 9.0)
     (= invariant_24_n 9.0)
     (= invariant_25_n 6.0)
     (= invariant_14_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_27_n 2.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_15_n 0.0)
     (= invariant_29_n 9.0)
     (= invariant_24_n 9.0)
     (= invariant_25_n 6.0)
     (= invariant_14_n 1.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 5.0) (= invariant_29_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_28_n 7.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 5.0)
     (= invariant_30_n 1.0)
     (= invariant_25_n 4.0)
     (= invariant_0_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_24_n 9.0)
     (= invariant_15_n 1.0)
     (= invariant_31_n 9.0)
     (= invariant_22_n 1.0)
     (= invariant_21_n 2.0)
     (= invariant_33_n 8.0)
     (= invariant_29_n 8.0)
     (= invariant_27_n 1.0)
     (= invariant_26_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_28_n 7.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 5.0)
     (= invariant_30_n 1.0)
     (= invariant_25_n 4.0)
     (= invariant_0_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_24_n 9.0)
     (= invariant_15_n 1.0)
     (= invariant_31_n 9.0)
     (= invariant_22_n 1.0)
     (= invariant_21_n 2.0)
     (= invariant_33_n 8.0)
     (= invariant_29_n 8.0)
     (= invariant_27_n 1.0)
     (= invariant_26_n 10.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 1.0) (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_17_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_24_n 6.0)
     (= invariant_29_n 6.0)
     (= invariant_30_n 2.0)
     (= invariant_12_n 4.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_17_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_24_n 6.0)
     (= invariant_29_n 6.0)
     (= invariant_30_n 2.0)
     (= invariant_12_n 4.0)
     (= invariant_18_n 1.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 4.0) (= invariant_17_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_17_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 5.0)
     (= invariant_30_n 4.0)
     (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_17_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 5.0)
     (= invariant_30_n 4.0)
     (= invariant_12_n 4.0))
into
(and (= invariant_19_n 3.0)
     (= invariant_12_n 4.0)
     (= invariant_17_n 0.0)
     (= invariant_29_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_26_n 7.0)
     (= invariant_12_n 7.0)
     (= invariant_20_n 3.0)
     (= invariant_30_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 1.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_26_n 7.0)
     (= invariant_12_n 7.0)
     (= invariant_20_n 3.0)
     (= invariant_30_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 1.0)
     (not (>= invariant_48_n 3.0)))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 10.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 3.0) (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_15_n 1.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 3.0)
     (= invariant_26_n 6.0)
     (= invariant_29_n 6.0)
     (= invariant_33_n 5.0)
     (= invariant_18_n 2.0)
     (= invariant_24_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_15_n 1.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 3.0)
     (= invariant_26_n 6.0)
     (= invariant_29_n 6.0)
     (= invariant_33_n 5.0)
     (= invariant_18_n 2.0)
     (= invariant_24_n 6.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 6.0) (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_20_n 3.0)
     (= invariant_29_n 4.0)
     (= invariant_30_n 2.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_15_n 0.0)
     (= invariant_17_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_20_n 3.0)
     (= invariant_29_n 4.0)
     (= invariant_30_n 2.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_15_n 0.0)
     (= invariant_17_n 0.0))
into
(and (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 2.0)
     (= invariant_15_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 4.0)
     (= invariant_29_n 8.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_23_n 2.0)
     (= invariant_22_n 1.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 1.0)
     (= invariant_33_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 4.0)
     (= invariant_29_n 8.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_23_n 2.0)
     (= invariant_22_n 1.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 1.0)
     (= invariant_33_n 8.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 4.0) (= invariant_29_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 10.0)
     (= invariant_30_n 9.0)
     (= invariant_27_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_33_n 5.0)
     (= invariant_25_n 5.0)
     (= invariant_17_n 2.0)
     (= invariant_19_n 2.0)
     (= invariant_26_n 6.0)
     (= invariant_16_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 10.0)
     (= invariant_30_n 9.0)
     (= invariant_27_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_33_n 5.0)
     (= invariant_25_n 5.0)
     (= invariant_17_n 2.0)
     (= invariant_19_n 2.0)
     (= invariant_26_n 6.0)
     (= invariant_16_n 2.0))
into
(and (= invariant_20_n 3.0)
     (= invariant_17_n 2.0)
     (= invariant_12_n 10.0)
     (= invariant_30_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_0_n 0.0)
     (= invariant_29_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_24_n 2.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_0_n 0.0)
     (= invariant_29_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_24_n 2.0)
     (= invariant_18_n 1.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_18_n 1.0)
     (= invariant_29_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_26_n 4.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 10.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 8.0)
     (= invariant_25_n 9.0)
     (= invariant_21_n 2.0)
     (= invariant_14_n 0.0)
     (= invariant_19_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_26_n 4.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 10.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 8.0)
     (= invariant_25_n 9.0)
     (= invariant_21_n 2.0)
     (= invariant_14_n 0.0)
     (= invariant_19_n 2.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 10.0) (= invariant_30_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (<= invariant_33_n 9.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_29_n 8.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_23_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (<= invariant_33_n 9.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_29_n 8.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_23_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 0.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 3.0) (= invariant_29_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_30_n 9.0)
     (= invariant_22_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_17_n 1.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_30_n 9.0)
     (= invariant_22_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_17_n 1.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0)))
into
(and (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_22_n 0.0)
     (= invariant_30_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (not (= 10.0 invariant_33_n))
     (= invariant_15_n 2.0)
     (= invariant_30_n 2.0)
     (= invariant_12_n 10.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_22_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_19_n 2.0)
     (= invariant_26_n 8.0)
     (= invariant_27_n 2.0)
     (>= invariant_25_n 5.0)
     (<= invariant_25_n 6.0)
     (= invariant_32_n 4.0)
     (= invariant_24_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (not (= 10.0 invariant_33_n))
     (= invariant_15_n 2.0)
     (= invariant_30_n 2.0)
     (= invariant_12_n 10.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_22_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_19_n 2.0)
     (= invariant_26_n 8.0)
     (= invariant_27_n 2.0)
     (>= invariant_25_n 5.0)
     (<= invariant_25_n 6.0)
     (= invariant_32_n 4.0)
     (= invariant_24_n 1.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 2.0) (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (= invariant_29_n 4.0))
     (= invariant_0_n 0.0)
     (= invariant_12_n 4.0)
     (= invariant_17_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_27_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (= invariant_29_n 4.0))
     (= invariant_0_n 0.0)
     (= invariant_12_n 4.0)
     (= invariant_17_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_27_n 2.0))
into
(and (= invariant_12_n 4.0) (= invariant_17_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_17_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 4.0)
     (= invariant_29_n 6.0)
     (= invariant_24_n 1.0)
     (= invariant_33_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_17_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 4.0)
     (= invariant_29_n 6.0)
     (= invariant_24_n 1.0)
     (= invariant_33_n 5.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 6.0) (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (= invariant_22_n 2.0)
     (= invariant_29_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     (= invariant_22_n 2.0)
     (= invariant_29_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0))
into
(and (not invariant_11_n) (= invariant_19_n 3.0) (= invariant_29_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= 3.0 invariant_26_n))
     invariant_8_n
     (= invariant_29_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 3.0)
     (= invariant_30_n 3.0)
     (= invariant_33_n 5.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= 3.0 invariant_26_n))
     invariant_8_n
     (= invariant_29_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 3.0)
     (= invariant_30_n 3.0)
     (= invariant_33_n 5.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 2.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 3.0) (= invariant_29_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (= invariant_15_n 2.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_18_n 1.0)
     (= invariant_30_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 8.0)
     (= invariant_24_n 1.0)
     (= invariant_28_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (= invariant_15_n 2.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_18_n 1.0)
     (= invariant_30_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 8.0)
     (= invariant_24_n 1.0)
     (= invariant_28_n 8.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 2.0) (= invariant_29_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (not (>= invariant_48_n 3.0))
     (= invariant_15_n 2.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_0_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     (not (>= invariant_48_n 3.0))
     (= invariant_15_n 2.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_0_n 0.0))
into
(and (not invariant_11_n) (= invariant_19_n 3.0) (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_26_n 4.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 3.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_17_n 1.0)
     (= invariant_27_n 1.0)
     (= invariant_15_n 2.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_33_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_26_n 4.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 3.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_17_n 1.0)
     (= invariant_27_n 1.0)
     (= invariant_15_n 2.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_33_n 8.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 2.0)
     (= invariant_29_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_0_n 0.0)
     (= invariant_29_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_26_n 4.0)
     (= invariant_18_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_0_n 0.0)
     (= invariant_29_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_26_n 4.0)
     (= invariant_18_n 0.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_18_n 0.0)
     (= invariant_29_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (= invariant_22_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     (= invariant_22_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 9.0))
into
(and (not invariant_11_n) (= invariant_20_n 3.0) (= invariant_30_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (not (= 10.0 invariant_33_n))
     (= invariant_12_n 10.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 9.0)
     (= invariant_18_n 1.0)
     (= invariant_24_n 6.0)
     (= invariant_29_n 4.0)
     (= invariant_14_n 2.0)
     (= invariant_19_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_32_n 2.0)
     (= invariant_26_n 4.0)
     (= invariant_27_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (not (= 10.0 invariant_33_n))
     (= invariant_12_n 10.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 9.0)
     (= invariant_18_n 1.0)
     (= invariant_24_n 6.0)
     (= invariant_29_n 4.0)
     (= invariant_14_n 2.0)
     (= invariant_19_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_32_n 2.0)
     (= invariant_26_n 4.0)
     (= invariant_27_n 2.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 10.0) (= invariant_30_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 5.0)
     (= invariant_12_n 4.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 0.0)
     (= invariant_33_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 5.0)
     (= invariant_12_n 4.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 0.0)
     (= invariant_33_n 8.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 4.0)
     (= invariant_29_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_27_n 10.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 9.0)
     (= invariant_30_n 4.0)
     (= invariant_24_n 6.0)
     (= invariant_15_n 1.0)
     (= invariant_25_n 5.0)
     (= invariant_14_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_27_n 10.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 9.0)
     (= invariant_30_n 4.0)
     (= invariant_24_n 6.0)
     (= invariant_15_n 1.0)
     (= invariant_25_n 5.0)
     (= invariant_14_n 0.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 4.0) (= invariant_29_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_18_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 10.0)
     (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_18_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 10.0)
     (= invariant_12_n 4.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 4.0) (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_33_n 4.0)
     (= invariant_19_n 3.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 2.0)
     (= invariant_14_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_33_n 4.0)
     (= invariant_19_n 3.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 2.0)
     (= invariant_14_n 0.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 4.0) (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_24_n 6.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_12_n 10.0)
     (= invariant_25_n 5.0)
     (= invariant_22_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 0.0)
     (= invariant_33_n 9.0)
     (= invariant_19_n 2.0)
     (= invariant_26_n 8.0)
     (= invariant_28_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_24_n 6.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_12_n 10.0)
     (= invariant_25_n 5.0)
     (= invariant_22_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 0.0)
     (= invariant_33_n 9.0)
     (= invariant_19_n 2.0)
     (= invariant_26_n 8.0)
     (= invariant_28_n 7.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 5.0) (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_33_n 9.0)
     (= invariant_29_n 9.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_15_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_33_n 9.0)
     (= invariant_29_n 9.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_15_n 2.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 2.0) (= invariant_29_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 5.0)
     (= invariant_12_n 2.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 0.0)
     (= invariant_33_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 5.0)
     (= invariant_12_n 2.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 0.0)
     (= invariant_33_n 9.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 2.0) (= invariant_29_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_33_n 9.0)
     (= invariant_12_n 10.0)
     (= invariant_18_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 0.0)
     (= invariant_25_n 5.0)
     (= invariant_26_n 8.0)
     (= invariant_30_n 1.0)
     (= invariant_16_n 2.0)
     (= invariant_17_n 2.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_33_n 9.0)
     (= invariant_12_n 10.0)
     (= invariant_18_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_14_n 0.0)
     (= invariant_25_n 5.0)
     (= invariant_26_n 8.0)
     (= invariant_30_n 1.0)
     (= invariant_16_n 2.0)
     (= invariant_17_n 2.0)
     (not (>= invariant_48_n 3.0)))
into
(and (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 1.0)
     (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_24_n 6.0)
     (= invariant_29_n 10.0)
     (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_24_n 6.0)
     (= invariant_29_n 10.0)
     (= invariant_12_n 1.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 1.0) (= invariant_29_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_29_n 6.0)
     (= invariant_24_n 6.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_14_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_29_n 6.0)
     (= invariant_24_n 6.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_14_n 0.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 6.0) (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_29_n 8.0)
     (= invariant_24_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_29_n 8.0)
     (= invariant_24_n 6.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 1.0) (= invariant_29_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_29_n 4.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_24_n 6.0)
     (= invariant_14_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_29_n 4.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_24_n 6.0)
     (= invariant_14_n 0.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 4.0) (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_29_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_29_n 3.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 1.0) (= invariant_29_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_29_n 9.0)
     (= invariant_22_n 0.0)
     (= invariant_33_n 1.0)
     (= invariant_24_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_29_n 9.0)
     (= invariant_22_n 0.0)
     (= invariant_33_n 1.0)
     (= invariant_24_n 6.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 1.0) (= invariant_29_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_8_n)
     (not invariant_11_n)
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_0_n 0.0)
     (= invariant_46_n 1.0)
     (= invariant_23_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_29_n 2.0)
     (= invariant_17_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_8_n)
     (not invariant_11_n)
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_0_n 0.0)
     (= invariant_46_n 1.0)
     (= invariant_23_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_29_n 2.0)
     (= invariant_17_n 0.0))
into
(and (= invariant_12_n 2.0) (= invariant_15_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 1.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 2.0)
     (= invariant_30_n 1.0)
     (= invariant_16_n 0.0)
     (= invariant_21_n 0.0)
     (= invariant_15_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 1.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 2.0)
     (= invariant_30_n 1.0)
     (= invariant_16_n 0.0)
     (= invariant_21_n 0.0)
     (= invariant_15_n 1.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 2.0)
     (= invariant_15_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_14_n 2.0)
     (= invariant_29_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_24_n 6.0)
     (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_14_n 2.0)
     (= invariant_29_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_24_n 6.0)
     (= invariant_12_n 1.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 1.0) (= invariant_29_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_40_n)) 0.0))))
  (and invariant_8_n
       (not (= 10.0 invariant_33_n))
       (not (= 3.0 invariant_26_n))
       a!1
       (= invariant_12_n 1.0)
       (= invariant_19_n 3.0)
       (= invariant_32_n 2.0)
       (not (>= invariant_48_n 3.0))
       (= invariant_0_n 0.0)
       (= invariant_29_n 2.0)
       (= invariant_23_n 2.0)
       (= invariant_24_n 6.0)
       (= invariant_22_n 2.0)
       (= invariant_21_n 0.0)
       (= invariant_18_n 1.0)
       (= invariant_27_n 2.0)
       (= invariant_17_n 2.0)
       (= invariant_30_n 3.0)
       (= invariant_16_n 2.0)
       (= invariant_15_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_40_n)) 0.0))))
  (and invariant_8_n
       (not (= 10.0 invariant_33_n))
       (not (= 3.0 invariant_26_n))
       a!1
       (= invariant_12_n 1.0)
       (= invariant_19_n 3.0)
       (= invariant_32_n 2.0)
       (not (>= invariant_48_n 3.0))
       (= invariant_0_n 0.0)
       (= invariant_29_n 2.0)
       (= invariant_23_n 2.0)
       (= invariant_24_n 6.0)
       (= invariant_22_n 2.0)
       (= invariant_21_n 0.0)
       (= invariant_18_n 1.0)
       (= invariant_27_n 2.0)
       (= invariant_17_n 2.0)
       (= invariant_30_n 3.0)
       (= invariant_16_n 2.0)
       (= invariant_15_n 0.0)))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 2.0)
     (= invariant_15_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (= invariant_20_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     (= invariant_20_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 2.0))
into
(and (not invariant_11_n) (= invariant_19_n 3.0) (= invariant_29_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (= 10.0 invariant_33_n))
     (= invariant_12_n 1.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 2.0)
     (= invariant_18_n 1.0)
     (= invariant_24_n 6.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_25_n 2.0)
     (= invariant_27_n 2.0)
     (= invariant_26_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (= 10.0 invariant_33_n))
     (= invariant_12_n 1.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 2.0)
     (= invariant_18_n 1.0)
     (= invariant_24_n 6.0)
     (= invariant_23_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_25_n 2.0)
     (= invariant_27_n 2.0)
     (= invariant_26_n 8.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 2.0)
     (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_29_n (* (- 1.0) invariant_30_n)) 0.0)))
      (a!2 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0)))
      (a!3 (not (>= (+ invariant_34_n (* (- 1.0) invariant_40_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_19_n 3.0) a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= 10.0 invariant_33_n))
     invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_29_n 8.0)
     (= invariant_26_n 8.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 10.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_23_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_32_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= 10.0 invariant_33_n))
     invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_29_n 8.0)
     (= invariant_26_n 8.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 10.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_23_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_32_n 10.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 10.0) (= invariant_29_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_0_n 1.0)
     (= invariant_12_n 5.0)
     (= invariant_15_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_18_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_0_n 1.0)
     (= invariant_12_n 5.0)
     (= invariant_15_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_18_n 2.0))
into
(and (= invariant_0_n 1.0) (= invariant_18_n 2.0) (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_12_n 9.0)
     (= invariant_14_n 3.0)
     (= invariant_20_n 3.0)
     (= invariant_24_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_12_n 9.0)
     (= invariant_14_n 3.0)
     (= invariant_20_n 3.0)
     (= invariant_24_n 10.0))
into
(and (= invariant_20_n 3.0)
     (= invariant_14_n 3.0)
     (= invariant_24_n 10.0)
     (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_17_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0)
     (= invariant_24_n 4.0)
     (= invariant_29_n 4.0)
     (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_17_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0)
     (= invariant_24_n 4.0)
     (= invariant_29_n 4.0)
     (= invariant_12_n 4.0))
into
(and (= invariant_12_n 4.0) (= invariant_17_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_26_n 5.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0)
     (= invariant_12_n 6.0)
     (= invariant_29_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_26_n 5.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0)
     (= invariant_12_n 6.0)
     (= invariant_29_n 9.0))
into
(and invariant_7_n (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_14_n 1.0)
     (= invariant_12_n 6.0)
     (= invariant_0_n 1.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_14_n 1.0)
     (= invariant_12_n 6.0)
     (= invariant_0_n 1.0)
     (not (>= invariant_48_n 3.0)))
into
(and (= invariant_0_n 1.0) (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_14_n 0.0)
     (= invariant_26_n 4.0)
     (= invariant_30_n 5.0)
     (= invariant_0_n 1.0)
     (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_18_n 2.0)
     (= invariant_22_n 0.0)
     (= invariant_17_n 0.0)
     (= invariant_16_n 0.0)
     (= invariant_15_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_14_n 0.0)
     (= invariant_26_n 4.0)
     (= invariant_30_n 5.0)
     (= invariant_0_n 1.0)
     (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_18_n 2.0)
     (= invariant_22_n 0.0)
     (= invariant_17_n 0.0)
     (= invariant_16_n 0.0)
     (= invariant_15_n 0.0))
into
(and (= invariant_20_n 3.0) (= invariant_0_n 1.0) (= invariant_30_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 6.0)
     (= invariant_19_n 3.0)
     (= invariant_23_n 0.0)
     (= invariant_21_n 0.0)
     (= invariant_0_n 0.0)
     (= invariant_18_n 2.0)
     (= invariant_29_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 6.0)
     (= invariant_19_n 3.0)
     (= invariant_23_n 0.0)
     (= invariant_21_n 0.0)
     (= invariant_0_n 0.0)
     (= invariant_18_n 2.0)
     (= invariant_29_n 1.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= 10.0 invariant_33_n))
     invariant_7_n
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 4.0)
     (= invariant_32_n 2.0)
     (= invariant_12_n 1.0)
     (= invariant_46_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= 10.0 invariant_33_n))
     invariant_7_n
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 4.0)
     (= invariant_32_n 2.0)
     (= invariant_12_n 1.0)
     (= invariant_46_n 6.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 4.0) (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_12_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_30_n 2.0)
     (= invariant_29_n 2.0)
     (= invariant_23_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_31_n 8.0)
     (= invariant_33_n 6.0)
     (= invariant_22_n 1.0)
     (= invariant_26_n 5.0)
     (= invariant_24_n 3.0)
     (= invariant_27_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_12_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_30_n 2.0)
     (= invariant_29_n 2.0)
     (= invariant_23_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_21_n 0.0)
     (= invariant_31_n 8.0)
     (= invariant_33_n 6.0)
     (= invariant_22_n 1.0)
     (= invariant_26_n 5.0)
     (= invariant_24_n 3.0)
     (= invariant_27_n 5.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 2.0) (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_17_n 2.0)
     (= invariant_12_n 8.0)
     (= invariant_30_n 10.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_15_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_24_n 9.0)
     (= invariant_31_n 8.0)
     (= invariant_18_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_33_n 3.0)
     (= invariant_22_n 1.0)
     (= invariant_19_n 2.0)
     (= invariant_27_n 5.0)
     (= invariant_26_n 1.0)
     (= invariant_14_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_17_n 2.0)
     (= invariant_12_n 8.0)
     (= invariant_30_n 10.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_15_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_24_n 9.0)
     (= invariant_31_n 8.0)
     (= invariant_18_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_33_n 3.0)
     (= invariant_22_n 1.0)
     (= invariant_19_n 2.0)
     (= invariant_27_n 5.0)
     (= invariant_26_n 1.0)
     (= invariant_14_n 2.0))
into
(and (= invariant_20_n 3.0)
     (= invariant_17_n 2.0)
     (= invariant_30_n 10.0)
     (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 9.0)
     (= invariant_0_n 1.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_14_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 9.0)
     (= invariant_0_n 1.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_14_n 2.0))
into
(and (not (>= invariant_48_n 3.0)) (= invariant_0_n 1.0) (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 4.0)
     (= invariant_0_n 1.0)
     (= invariant_27_n 6.0)
     (= invariant_24_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 4.0)
     (= invariant_0_n 1.0)
     (= invariant_27_n 6.0)
     (= invariant_24_n 6.0))
into
(and (= invariant_0_n 1.0) (= invariant_12_n 4.0) (= invariant_27_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_21_n 0.0)
     (= invariant_0_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_30_n 8.0)
     (= invariant_12_n 3.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_21_n 0.0)
     (= invariant_0_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_30_n 8.0)
     (= invariant_12_n 3.0)
     (not (>= invariant_48_n 3.0)))
into
(and (= invariant_20_n 3.0) (= invariant_21_n 0.0) (= invariant_30_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_27_n 3.0)
     (= invariant_12_n 4.0)
     (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_27_n 3.0)
     (= invariant_12_n 4.0)
     (= invariant_0_n 1.0))
into
(and (= invariant_0_n 1.0) (= invariant_12_n 4.0) (= invariant_27_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_12_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 1.0)
     (= invariant_30_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_12_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 1.0)
     (= invariant_30_n 9.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 1.0) (= invariant_30_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_11_n)
     (not (= 10.0 invariant_33_n))
     (not (= invariant_16_n 2.0))
     (= invariant_14_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_24_n 7.0)
     (= invariant_28_n 6.0)
     (= invariant_23_n 0.0)
     (= invariant_22_n 1.0)
     (= invariant_26_n 1.0)
     (= invariant_17_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_11_n)
     (not (= 10.0 invariant_33_n))
     (not (= invariant_16_n 2.0))
     (= invariant_14_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_24_n 7.0)
     (= invariant_28_n 6.0)
     (= invariant_23_n 0.0)
     (= invariant_22_n 1.0)
     (= invariant_26_n 1.0)
     (= invariant_17_n 0.0))
into
(and (not invariant_11_n)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (not invariant_4_n)
     (not invariant_8_n)
     (not (= 10.0 invariant_33_n))
     (not (= invariant_16_n 2.0))
     (= invariant_14_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_24_n 7.0)
     (= invariant_28_n 6.0)
     (= invariant_23_n 0.0)
     (= invariant_0_n 1.0)
     (= invariant_21_n 0.0)
     (= invariant_18_n 0.0)
     (= invariant_17_n 0.0)
     (= invariant_26_n 1.0)
     (= invariant_15_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (not invariant_4_n)
     (not invariant_8_n)
     (not (= 10.0 invariant_33_n))
     (not (= invariant_16_n 2.0))
     (= invariant_14_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_24_n 7.0)
     (= invariant_28_n 6.0)
     (= invariant_23_n 0.0)
     (= invariant_0_n 1.0)
     (= invariant_21_n 0.0)
     (= invariant_18_n 0.0)
     (= invariant_17_n 0.0)
     (= invariant_26_n 1.0)
     (= invariant_15_n 0.0))
into
(and invariant_7_n (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_8_n)
     (= invariant_20_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 1.0)
     (= invariant_19_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_8_n)
     (= invariant_20_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 1.0)
     (= invariant_19_n 3.0))
into
(and (= invariant_19_n 3.0) (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_40_n)) 0.0))))
  (and invariant_8_n
       (not (= 10.0 invariant_33_n))
       (= invariant_17_n 0.0)
       (= invariant_12_n 3.0)
       (= invariant_19_n 3.0)
       (= invariant_0_n 0.0)
       (= invariant_29_n 1.0)
       (not (>= invariant_48_n 3.0))
       (= invariant_22_n 1.0)
       (= invariant_26_n 1.0)
       (= invariant_31_n 7.0)
       a!1
       (= invariant_15_n 0.0)
       (= invariant_27_n 3.0)
       (= invariant_18_n 0.0)
       (= invariant_23_n 0.0)
       (= invariant_14_n 0.0)
       (= invariant_21_n 0.0)
       (= invariant_24_n 7.0)
       (= invariant_28_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_40_n)) 0.0))))
  (and invariant_8_n
       (not (= 10.0 invariant_33_n))
       (= invariant_17_n 0.0)
       (= invariant_12_n 3.0)
       (= invariant_19_n 3.0)
       (= invariant_0_n 0.0)
       (= invariant_29_n 1.0)
       (not (>= invariant_48_n 3.0))
       (= invariant_22_n 1.0)
       (= invariant_26_n 1.0)
       (= invariant_31_n 7.0)
       a!1
       (= invariant_15_n 0.0)
       (= invariant_27_n 3.0)
       (= invariant_18_n 0.0)
       (= invariant_23_n 0.0)
       (= invariant_14_n 0.0)
       (= invariant_21_n 0.0)
       (= invariant_24_n 7.0)
       (= invariant_28_n 6.0)))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 3.0) (= invariant_29_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (not (= invariant_15_n 2.0))
     (= invariant_24_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0)
     (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (not (= invariant_15_n 2.0))
     (= invariant_24_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0)
     (= invariant_12_n 2.0))
into
(and (= invariant_20_n 3.0)
     (= invariant_12_n 2.0)
     (= invariant_30_n 10.0)
     (not (= invariant_15_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 4.0)
     (= invariant_0_n 1.0)
     (= invariant_19_n 3.0)
     (= invariant_29_n 1.0)
     (= invariant_27_n 5.0)
     (= invariant_30_n 2.0)
     (= invariant_26_n 2.0)
     (= invariant_28_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 4.0)
     (= invariant_0_n 1.0)
     (= invariant_19_n 3.0)
     (= invariant_29_n 1.0)
     (= invariant_27_n 5.0)
     (= invariant_30_n 2.0)
     (= invariant_26_n 2.0)
     (= invariant_28_n 4.0))
into
(and (= invariant_0_n 1.0) (= invariant_12_n 4.0) (= invariant_27_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_0_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 8.0)
     (= invariant_14_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_0_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 8.0)
     (= invariant_14_n 2.0))
into
(and (not (>= invariant_48_n 3.0)) (= invariant_0_n 1.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 8.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 6.0)
     (= invariant_33_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 8.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 6.0)
     (= invariant_33_n 8.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 6.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_9_n)
     (= invariant_17_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_9_n)
     (= invariant_17_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0))
into
(and (not invariant_9_n) (= invariant_20_n 3.0) (= invariant_30_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_26_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0)
     (= invariant_29_n 10.0)
     (= invariant_12_n 9.0)
     (= invariant_33_n 10.0)
     (= invariant_21_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_31_n 3.0)
     (= invariant_22_n 2.0)
     (= invariant_23_n 2.0)
     (= invariant_19_n 2.0)
     (= invariant_17_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_26_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0)
     (= invariant_29_n 10.0)
     (= invariant_12_n 9.0)
     (= invariant_33_n 10.0)
     (= invariant_21_n 2.0)
     (= invariant_15_n 1.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0)
     (= invariant_31_n 3.0)
     (= invariant_22_n 2.0)
     (= invariant_23_n 2.0)
     (= invariant_19_n 2.0)
     (= invariant_17_n 1.0))
into
(and (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 9.0)
     (= invariant_30_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_15_n 1.0)
     (= invariant_12_n 2.0)
     (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_15_n 1.0)
     (= invariant_12_n 2.0)
     (= invariant_0_n 1.0))
into
(and (= invariant_0_n 1.0) (= invariant_12_n 2.0) (= invariant_15_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_0_n 1.0)
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_0_n 1.0)
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0))
into
(and (= invariant_20_n 3.0) (= invariant_0_n 1.0) (= invariant_30_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 2.0)
     (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 2.0)
     (= invariant_0_n 1.0))
into
(and (not (>= invariant_48_n 3.0)) (= invariant_0_n 1.0) (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 4.0)
     (= invariant_29_n 3.0)
     (= invariant_24_n 1.0)
     (= invariant_16_n 0.0)
     (= invariant_0_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 4.0)
     (= invariant_29_n 3.0)
     (= invariant_24_n 1.0)
     (= invariant_16_n 0.0)
     (= invariant_0_n 0.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 4.0) (= invariant_29_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_14_n 2.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 8.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_14_n 2.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 8.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 2.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 2.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_26_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_12_n 3.0)
     (= invariant_22_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_33_n 9.0)
     (= invariant_19_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_26_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_12_n 3.0)
     (= invariant_22_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_33_n 9.0)
     (= invariant_19_n 2.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 3.0) (= invariant_30_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_14_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 4.0)
     (= invariant_0_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_14_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 4.0)
     (= invariant_0_n 1.0))
into
(and (not (>= invariant_48_n 3.0)) (= invariant_0_n 1.0) (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_26_n 2.0)
     (= invariant_12_n 4.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_24_n 1.0)
     (= invariant_30_n 2.0)
     (= invariant_23_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_31_n 5.0)
     (= invariant_33_n 9.0)
     (= invariant_22_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_26_n 2.0)
     (= invariant_12_n 4.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_24_n 1.0)
     (= invariant_30_n 2.0)
     (= invariant_23_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_18_n 2.0)
     (= invariant_14_n 2.0)
     (= invariant_31_n 5.0)
     (= invariant_33_n 9.0)
     (= invariant_22_n 2.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 4.0) (= invariant_29_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_15_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 8.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0)
     (= invariant_25_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_15_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 8.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0)
     (= invariant_25_n 10.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 10.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 10.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 6.0)
     (= invariant_28_n 10.0)
     (= invariant_25_n 6.0)
     (= invariant_31_n 2.0)
     (= invariant_24_n 1.0)
     (= invariant_0_n 0.0)
     (= invariant_18_n 2.0)
     (= invariant_15_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 10.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 6.0)
     (= invariant_28_n 10.0)
     (= invariant_25_n 6.0)
     (= invariant_31_n 2.0)
     (= invariant_24_n 1.0)
     (= invariant_0_n 0.0)
     (= invariant_18_n 2.0)
     (= invariant_15_n 0.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 6.0) (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 5.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 5.0) (= invariant_30_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_18_n 2.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 3.0)
     (= invariant_31_n 1.0)
     (= invariant_24_n 1.0)
     (= invariant_23_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_22_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_18_n 2.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 3.0)
     (= invariant_31_n 1.0)
     (= invariant_24_n 1.0)
     (= invariant_23_n 2.0)
     (= invariant_15_n 2.0)
     (= invariant_22_n 2.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 5.0) (= invariant_29_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and invariant_7_n
       (= invariant_19_n 2.0)
       (= invariant_12_n 5.0)
       (= invariant_20_n 3.0)
       (= invariant_0_n 0.0)
       (not (>= invariant_48_n 3.0))
       (= invariant_30_n 6.0)
       a!1
       (= invariant_15_n 0.0)
       (= invariant_18_n 2.0)
       (= invariant_14_n 2.0)
       (= invariant_31_n 4.0)
       (= invariant_22_n 2.0)
       (= invariant_24_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and invariant_7_n
       (= invariant_19_n 2.0)
       (= invariant_12_n 5.0)
       (= invariant_20_n 3.0)
       (= invariant_0_n 0.0)
       (not (>= invariant_48_n 3.0))
       (= invariant_30_n 6.0)
       a!1
       (= invariant_15_n 0.0)
       (= invariant_18_n 2.0)
       (= invariant_14_n 2.0)
       (= invariant_31_n 4.0)
       (= invariant_22_n 2.0)
       (= invariant_24_n 2.0)))
into
(and (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 5.0)
     (= invariant_30_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_14_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 5.0)
     (= invariant_12_n 8.0)
     (= invariant_18_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_14_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 5.0)
     (= invariant_12_n 8.0)
     (= invariant_18_n 2.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 8.0) (= invariant_29_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_15_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_17_n 2.0)
     (= invariant_12_n 8.0)
     (= invariant_30_n 9.0)
     (= invariant_25_n 9.0)
     (= invariant_18_n 1.0)
     (= invariant_22_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_15_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_17_n 2.0)
     (= invariant_12_n 8.0)
     (= invariant_30_n 9.0)
     (= invariant_25_n 9.0)
     (= invariant_18_n 1.0)
     (= invariant_22_n 2.0))
into
(and (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 8.0)
     (= invariant_30_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_31_n 6.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 8.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 3.0)
     (= invariant_15_n 0.0)
     (= invariant_22_n 2.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_31_n 6.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 8.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 3.0)
     (= invariant_15_n 0.0)
     (= invariant_22_n 2.0)
     (= invariant_18_n 1.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 3.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and invariant_7_n
       (= invariant_19_n 2.0)
       (= invariant_20_n 3.0)
       (= invariant_30_n 4.0)
       a!1
       (= invariant_0_n 0.0)
       (not (>= invariant_48_n 3.0))
       (= invariant_12_n 3.0)
       (= invariant_21_n 2.0)
       (= invariant_15_n 0.0)
       (= invariant_18_n 1.0)
       (= invariant_14_n 2.0)
       (= invariant_31_n 10.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and invariant_7_n
       (= invariant_19_n 2.0)
       (= invariant_20_n 3.0)
       (= invariant_30_n 4.0)
       a!1
       (= invariant_0_n 0.0)
       (not (>= invariant_48_n 3.0))
       (= invariant_12_n 3.0)
       (= invariant_21_n 2.0)
       (= invariant_15_n 0.0)
       (= invariant_18_n 1.0)
       (= invariant_14_n 2.0)
       (= invariant_31_n 10.0)))
into
(and (= invariant_20_n 3.0)
     (= invariant_30_n 4.0)
     (= invariant_12_n 3.0)
     (not (>= invariant_48_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 3.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 3.0) (= invariant_30_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_29_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_30_n 10.0)
     (= invariant_28_n 10.0)
     (= invariant_31_n 10.0)
     (= invariant_15_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_29_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_30_n 10.0)
     (= invariant_28_n 10.0)
     (= invariant_31_n 10.0)
     (= invariant_15_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_18_n 1.0)
     (= invariant_14_n 2.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 3.0) (= invariant_30_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_31_n 10.0)
     (= invariant_29_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_28_n 4.0)
     (= invariant_12_n 9.0)
     (= invariant_15_n 1.0)
     (= invariant_22_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_31_n 10.0)
     (= invariant_29_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_28_n 4.0)
     (= invariant_12_n 9.0)
     (= invariant_15_n 1.0)
     (= invariant_22_n 2.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 9.0) (= invariant_29_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 4.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 4.0) (= invariant_30_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_12_n 4.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 6.0)
     (= invariant_25_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_12_n 4.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 6.0)
     (= invariant_25_n 6.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 4.0) (= invariant_30_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_21_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_33_n 10.0)
     (= invariant_30_n 9.0)
     (= invariant_22_n 2.0)
     (= invariant_32_n 9.0)
     (= invariant_29_n 4.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_21_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_33_n 10.0)
     (= invariant_30_n 9.0)
     (= invariant_22_n 2.0)
     (= invariant_32_n 9.0)
     (= invariant_29_n 4.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 1.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 4.0) (= invariant_30_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_12_n 4.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_18_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_12_n 4.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_18_n 0.0))
into
(and (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_18_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_18_n 2.0)
     (= invariant_12_n 5.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 1.0)
     (= invariant_31_n 2.0)
     (= invariant_23_n 2.0)
     (= invariant_15_n 0.0)
     (= invariant_33_n 9.0)
     (= invariant_22_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_18_n 2.0)
     (= invariant_12_n 5.0)
     (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 1.0)
     (= invariant_31_n 2.0)
     (= invariant_23_n 2.0)
     (= invariant_15_n 0.0)
     (= invariant_33_n 9.0)
     (= invariant_22_n 2.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 1.0) (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_18_n 1.0)
     (= invariant_12_n 10.0)
     (= invariant_19_n 3.0)
     (= invariant_29_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_24_n 2.0)
     (= invariant_30_n 10.0)
     (= invariant_15_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_18_n 1.0)
     (= invariant_12_n 10.0)
     (= invariant_19_n 3.0)
     (= invariant_29_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_24_n 2.0)
     (= invariant_30_n 10.0)
     (= invariant_15_n 0.0))
into
(and (= invariant_19_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 1.0)
     (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_21_n 1.0)
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_21_n 1.0)
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0))
into
(and (= invariant_20_n 3.0) (= invariant_21_n 1.0) (= invariant_30_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_21_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_33_n 9.0)
     (= invariant_29_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_30_n 9.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_21_n 1.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_33_n 9.0)
     (= invariant_29_n 3.0)
     (= invariant_12_n 3.0)
     (= invariant_30_n 9.0)
     (= invariant_15_n 0.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 1.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 3.0) (= invariant_30_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_0_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_18_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 6.0)
     (= invariant_30_n 1.0)
     (= invariant_24_n 2.0)
     (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_0_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_18_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_29_n 6.0)
     (= invariant_30_n 1.0)
     (= invariant_24_n 2.0)
     (= invariant_12_n 9.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 6.0) (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_15_n 2.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_15_n 2.0)
     (= invariant_19_n 3.0)
     (= invariant_12_n 5.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 2.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 2.0) (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_24_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 3.0)
     (= invariant_14_n 1.0)
     (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_24_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 3.0)
     (= invariant_14_n 1.0)
     (= invariant_12_n 2.0))
into
(and (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 2.0)
     (= invariant_30_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 5.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 10.0)
     (= invariant_14_n 0.0)
     (= invariant_33_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_29_n 5.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 10.0)
     (= invariant_14_n 0.0)
     (= invariant_33_n 9.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 10.0) (= invariant_29_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_33_n 9.0)
     (= invariant_19_n 3.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 10.0)
     (= invariant_14_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_33_n 9.0)
     (= invariant_19_n 3.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 10.0)
     (= invariant_14_n 0.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 4.0) (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and invariant_7_n
       (= invariant_19_n 2.0)
       (= invariant_20_n 3.0)
       (= invariant_0_n 0.0)
       a!1
       (not (>= invariant_48_n 3.0))
       (= invariant_30_n 5.0)
       (= invariant_12_n 4.0)
       (= invariant_22_n 2.0)
       (= invariant_21_n 1.0)
       (= invariant_15_n 2.0)
       (= invariant_14_n 2.0)
       (= invariant_33_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and invariant_7_n
       (= invariant_19_n 2.0)
       (= invariant_20_n 3.0)
       (= invariant_0_n 0.0)
       a!1
       (not (>= invariant_48_n 3.0))
       (= invariant_30_n 5.0)
       (= invariant_12_n 4.0)
       (= invariant_22_n 2.0)
       (= invariant_21_n 1.0)
       (= invariant_15_n 2.0)
       (= invariant_14_n 2.0)
       (= invariant_33_n 9.0)))
into
(and (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_12_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 6.0)
     (= invariant_12_n 3.0)
     (= invariant_20_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 6.0)
     (= invariant_12_n 3.0)
     (= invariant_20_n 3.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 3.0) (= invariant_30_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_30_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 3.0)
     (= invariant_19_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_29_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_30_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 3.0)
     (= invariant_19_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_29_n 2.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 3.0) (= invariant_29_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0)
     (= invariant_25_n 10.0)
     (= invariant_12_n 4.0)
     (= invariant_33_n 9.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 0.0)
     (= invariant_21_n 1.0)
     (= invariant_31_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0)
     (= invariant_25_n 10.0)
     (= invariant_12_n 4.0)
     (= invariant_33_n 9.0)
     (= invariant_18_n 1.0)
     (= invariant_14_n 0.0)
     (= invariant_21_n 1.0)
     (= invariant_31_n 10.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 4.0) (= invariant_30_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_21_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_29_n 8.0)
     (= invariant_30_n 7.0)
     (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_21_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_29_n 8.0)
     (= invariant_30_n 7.0)
     (= invariant_12_n 9.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 9.0) (= invariant_29_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 10.0)
     (= invariant_29_n 3.0)
     (= invariant_19_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_24_n 4.0)
     (= invariant_31_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 10.0)
     (= invariant_29_n 3.0)
     (= invariant_19_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_24_n 4.0)
     (= invariant_31_n 10.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 10.0) (= invariant_29_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 10.0)
     (= invariant_19_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_29_n 2.0)
     (= invariant_30_n 10.0)
     (= invariant_25_n 7.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 10.0)
     (= invariant_19_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_29_n 2.0)
     (= invariant_30_n 10.0)
     (= invariant_25_n 7.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 2.0) (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_12_n 2.0)
     (= invariant_30_n 6.0)
     (= invariant_20_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_12_n 2.0)
     (= invariant_30_n 6.0)
     (= invariant_20_n 3.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 2.0) (= invariant_30_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and invariant_7_n
       a!1
       (= invariant_12_n 2.0)
       (= invariant_20_n 3.0)
       (not (>= invariant_48_n 3.0))
       (= invariant_30_n 4.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and invariant_7_n
       a!1
       (= invariant_12_n 2.0)
       (= invariant_20_n 3.0)
       (not (>= invariant_48_n 3.0))
       (= invariant_30_n 4.0)))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 4.0) (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 10.0)
     (= invariant_29_n 9.0)
     (= invariant_19_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 10.0)
     (= invariant_29_n 9.0)
     (= invariant_19_n 3.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 10.0) (= invariant_29_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_29_n 6.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_18_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_29_n 6.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_18_n 0.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 6.0) (= invariant_18_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= 10.0 invariant_33_n))
     invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 5.0)
     (= invariant_14_n 0.0)
     (= invariant_24_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= 10.0 invariant_33_n))
     invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 5.0)
     (= invariant_14_n 0.0)
     (= invariant_24_n 8.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 4.0) (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_24_n 8.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_24_n 8.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 9.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 4.0) (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 9.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_18_n 2.0)
     (= invariant_29_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 9.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_18_n 2.0)
     (= invariant_29_n 6.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 6.0) (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_33_n 5.0)
     (= invariant_12_n 9.0)
     (= invariant_29_n 5.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_18_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_33_n 5.0)
     (= invariant_12_n 9.0)
     (= invariant_29_n 5.0)
     (= invariant_19_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_18_n 2.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 9.0) (= invariant_29_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 1.0)
     (= invariant_12_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_18_n 1.0)
     (= invariant_0_n 0.0)
     (= invariant_29_n 1.0)
     (= invariant_12_n 9.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 9.0) (= invariant_29_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_14_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_29_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 8.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 4.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 9.0)
     (= invariant_29_n 2.0)
     (= invariant_18_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 3.0)
     (= invariant_12_n 9.0)
     (= invariant_29_n 2.0)
     (= invariant_18_n 1.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 9.0) (= invariant_29_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and invariant_7_n
       (= invariant_19_n 2.0)
       (= invariant_20_n 3.0)
       (= invariant_0_n 0.0)
       (not (>= invariant_48_n 3.0))
       (= invariant_12_n 2.0)
       (= invariant_29_n 2.0)
       a!1
       (= invariant_15_n 2.0)
       (= invariant_30_n 9.0)
       (= invariant_18_n 0.0)
       (= invariant_14_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and invariant_7_n
       (= invariant_19_n 2.0)
       (= invariant_20_n 3.0)
       (= invariant_0_n 0.0)
       (not (>= invariant_48_n 3.0))
       (= invariant_12_n 2.0)
       (= invariant_29_n 2.0)
       a!1
       (= invariant_15_n 2.0)
       (= invariant_30_n 9.0)
       (= invariant_18_n 0.0)
       (= invariant_14_n 2.0)))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 2.0) (= invariant_30_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not (= 10.0 invariant_33_n))
     invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 1.0)
     (= invariant_15_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_18_n 0.0)
     (= invariant_31_n 2.0)
     (= invariant_24_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not (= 10.0 invariant_33_n))
     invariant_8_n
     (= invariant_19_n 3.0)
     (= invariant_12_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_0_n 0.0)
     (= invariant_29_n 1.0)
     (= invariant_15_n 2.0)
     (= invariant_22_n 2.0)
     (= invariant_18_n 0.0)
     (= invariant_31_n 2.0)
     (= invariant_24_n 10.0))
into
(and (= invariant_19_n 3.0) (= invariant_12_n 2.0) (= invariant_29_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_33_n 6.0)
     (= invariant_12_n 8.0)
     (= invariant_0_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_18_n 0.0)
     (= invariant_29_n 1.0)
     (= invariant_25_n 7.0)
     (= invariant_24_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_33_n 6.0)
     (= invariant_12_n 8.0)
     (= invariant_0_n 0.0)
     (= invariant_19_n 3.0)
     (= invariant_18_n 0.0)
     (= invariant_29_n 1.0)
     (= invariant_25_n 7.0)
     (= invariant_24_n 8.0))
into
(and (= invariant_19_n 3.0) (= invariant_29_n 1.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 1.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 1.0) (= invariant_30_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_14_n 0.0)
     (= invariant_12_n 1.0)
     (= invariant_30_n 6.0)
     (= invariant_33_n 5.0)
     (= invariant_20_n 3.0)
     (= invariant_22_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_14_n 0.0)
     (= invariant_12_n 1.0)
     (= invariant_30_n 6.0)
     (= invariant_33_n 5.0)
     (= invariant_20_n 3.0)
     (= invariant_22_n 0.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 1.0) (= invariant_30_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_14_n 0.0)
     (= invariant_12_n 1.0)
     (= invariant_30_n 3.0)
     (= invariant_31_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_22_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_14_n 0.0)
     (= invariant_12_n 1.0)
     (= invariant_30_n 3.0)
     (= invariant_31_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_22_n 0.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 3.0) (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_30_n 2.0)
     (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 1.0)
     (= invariant_15_n 1.0)
     (= invariant_31_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_30_n 2.0)
     (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_12_n 1.0)
     (= invariant_15_n 1.0)
     (= invariant_31_n 2.0))
into
(and (= invariant_20_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 2.0)
     (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0)
     (= invariant_12_n 2.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 2.0) (= invariant_30_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_19_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_30_n 5.0)
     (= invariant_12_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_14_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_19_n 2.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_30_n 5.0)
     (= invariant_12_n 2.0)
     (= invariant_21_n 2.0)
     (= invariant_14_n 0.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 2.0) (= invariant_30_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_22_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0)
     (= invariant_12_n 2.0)
     (= invariant_18_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_22_n 0.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0)
     (= invariant_12_n 2.0)
     (= invariant_18_n 0.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 2.0) (= invariant_30_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (= invariant_14_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (= invariant_14_n 2.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 5.0)
     (= invariant_12_n 1.0))
into
(and (= invariant_20_n 3.0) (= invariant_30_n 5.0) (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and invariant_7_n
       (not (= 10.0 invariant_33_n))
       (= invariant_18_n 2.0)
       (= invariant_12_n 5.0)
       (= invariant_20_n 3.0)
       (= invariant_0_n 0.0)
       (not (>= invariant_48_n 3.0))
       (= invariant_30_n 9.0)
       a!1
       (= invariant_15_n 2.0)
       (= invariant_21_n 1.0)
       (= invariant_46_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and invariant_7_n
       (not (= 10.0 invariant_33_n))
       (= invariant_18_n 2.0)
       (= invariant_12_n 5.0)
       (= invariant_20_n 3.0)
       (= invariant_0_n 0.0)
       (not (>= invariant_48_n 3.0))
       (= invariant_30_n 9.0)
       a!1
       (= invariant_15_n 2.0)
       (= invariant_21_n 1.0)
       (= invariant_46_n 6.0)))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 5.0) (= invariant_30_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_7_n
     (not (>= invariant_48_n 3.0))
     (= invariant_28_n 6.0)
     (= invariant_30_n 10.0)
     (= invariant_31_n 5.0)
     (= invariant_20_n 3.0)
     (= invariant_25_n 3.0)
     (= invariant_12_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_7_n
     (not (>= invariant_48_n 3.0))
     (= invariant_28_n 6.0)
     (= invariant_30_n 10.0)
     (= invariant_31_n 5.0)
     (= invariant_20_n 3.0)
     (= invariant_25_n 3.0)
     (= invariant_12_n 1.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 1.0) (= invariant_30_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and invariant_7_n
       (not (= 10.0 invariant_33_n))
       (not (>= invariant_48_n 3.0))
       (= invariant_20_n 3.0)
       (= invariant_12_n 5.0)
       (= invariant_0_n 0.0)
       a!1
       (= invariant_25_n 9.0)
       (= invariant_30_n 10.0)
       (= invariant_46_n 6.0)
       (= invariant_18_n 2.0)
       (= invariant_31_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and invariant_7_n
       (not (= 10.0 invariant_33_n))
       (not (>= invariant_48_n 3.0))
       (= invariant_20_n 3.0)
       (= invariant_12_n 5.0)
       (= invariant_0_n 0.0)
       a!1
       (= invariant_25_n 9.0)
       (= invariant_30_n 10.0)
       (= invariant_46_n 6.0)
       (= invariant_18_n 2.0)
       (= invariant_31_n 5.0)))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 5.0) (= invariant_30_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_40_n)) 0.0)))
      (a!2 (not (>= (+ invariant_29_n (* (- 1.0) invariant_30_n)) 0.0)))
      (a!3 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_19_n 3.0) a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_0_n 1.0)
     (= invariant_12_n 10.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 1.0)
     (= invariant_15_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_0_n 1.0)
     (= invariant_12_n 10.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_19_n 1.0)
     (= invariant_15_n 2.0))
into
(and (not (>= invariant_48_n 3.0))
     (= invariant_0_n 1.0)
     (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_0_n 1.0)
     (= invariant_12_n 5.0)
     (= invariant_29_n 6.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_15_n 2.0)
     (= invariant_14_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_0_n 1.0)
     (= invariant_12_n 5.0)
     (= invariant_29_n 6.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_15_n 2.0)
     (= invariant_14_n 1.0))
into
(and (not (>= invariant_48_n 3.0)) (= invariant_0_n 1.0) (= invariant_12_n 5.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_12_n 1.0)
     (= invariant_0_n 1.0)
     (= invariant_16_n 3.0)
     (= invariant_24_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_14_n 1.0)
     (= invariant_26_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_12_n 1.0)
     (= invariant_0_n 1.0)
     (= invariant_16_n 3.0)
     (= invariant_24_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_14_n 1.0)
     (= invariant_26_n 3.0))
into
(and (= invariant_16_n 3.0)
     (= invariant_26_n 3.0)
     (= invariant_12_n 1.0)
     (= invariant_14_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_26_n 2.0)
       a!1
       (not (>= invariant_48_n 3.0))
       (= invariant_16_n 3.0)
       (= invariant_0_n 0.0)
       (= invariant_12_n 4.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_26_n 2.0)
       a!1
       (not (>= invariant_48_n 3.0))
       (= invariant_16_n 3.0)
       (= invariant_0_n 0.0)
       (= invariant_12_n 4.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_16_n 3.0) (= invariant_26_n 2.0) (= invariant_12_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (not (>= invariant_48_n 3.0))
       a!1
       (= invariant_16_n 3.0)
       (= invariant_0_n 0.0)
       (= invariant_12_n 6.0)
       (= invariant_26_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (not (>= invariant_48_n 3.0))
       a!1
       (= invariant_16_n 3.0)
       (= invariant_0_n 0.0)
       (= invariant_12_n 6.0)
       (= invariant_26_n 2.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_16_n 3.0) (= invariant_26_n 2.0) (= invariant_12_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_26_n 5.0)
       a!1
       (= invariant_16_n 3.0)
       (= invariant_0_n 0.0)
       (= invariant_12_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_26_n 5.0)
       a!1
       (= invariant_16_n 3.0)
       (= invariant_0_n 0.0)
       (= invariant_12_n 9.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_16_n 3.0) (= invariant_12_n 9.0) (= invariant_26_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (not (>= invariant_48_n 3.0))
       (= invariant_16_n 3.0)
       (= invariant_0_n 0.0)
       a!1
       (= invariant_12_n 8.0)
       (= invariant_26_n 3.0)
       (= invariant_24_n 1.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (not (>= invariant_48_n 3.0))
       (= invariant_16_n 3.0)
       (= invariant_0_n 0.0)
       a!1
       (= invariant_12_n 8.0)
       (= invariant_26_n 3.0)
       (= invariant_24_n 1.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_16_n 3.0) (= invariant_26_n 3.0) (= invariant_12_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_26_n 7.0)
       (= invariant_16_n 3.0)
       (>= invariant_30_n 3.0)
       (<= invariant_30_n 4.0)
       (= invariant_0_n 0.0)
       a!1
       (= invariant_12_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_26_n 7.0)
       (= invariant_16_n 3.0)
       (>= invariant_30_n 3.0)
       (<= invariant_30_n 4.0)
       (= invariant_0_n 0.0)
       a!1
       (= invariant_12_n 2.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_16_n 3.0) (= invariant_26_n 7.0) (= invariant_12_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_16_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 9.0)
     (= invariant_22_n 1.0)
     (= invariant_26_n 9.0)
     (= invariant_17_n 2.0)
     (= invariant_14_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_16_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_12_n 9.0)
     (= invariant_22_n 1.0)
     (= invariant_26_n 9.0)
     (= invariant_17_n 2.0)
     (= invariant_14_n 2.0))
into
(and invariant_8_n (= invariant_12_n 9.0) (= invariant_22_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_17_n 2.0)
       (= invariant_12_n 9.0)
       a!1
       (not (>= invariant_48_n 3.0))
       (= invariant_16_n 3.0)
       (= invariant_31_n 4.0)
       (= invariant_26_n 9.0)
       (= invariant_0_n 0.0)
       (= invariant_22_n 1.0)
       (= invariant_19_n 1.0)
       (= invariant_23_n 2.0)
       (= invariant_18_n 2.0)
       (= invariant_15_n 2.0)
       (= invariant_14_n 2.0)
       (= invariant_20_n 2.0)
       (= invariant_27_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_17_n 2.0)
       (= invariant_12_n 9.0)
       a!1
       (not (>= invariant_48_n 3.0))
       (= invariant_16_n 3.0)
       (= invariant_31_n 4.0)
       (= invariant_26_n 9.0)
       (= invariant_0_n 0.0)
       (= invariant_22_n 1.0)
       (= invariant_19_n 1.0)
       (= invariant_23_n 2.0)
       (= invariant_18_n 2.0)
       (= invariant_15_n 2.0)
       (= invariant_14_n 2.0)
       (= invariant_20_n 2.0)
       (= invariant_27_n 2.0)))
into
(and invariant_8_n (= invariant_12_n 9.0) (= invariant_22_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       a!1
       (not (>= invariant_48_n 3.0))
       (= invariant_26_n 7.0)
       (= invariant_16_n 3.0)
       (= invariant_30_n 4.0)
       (= invariant_0_n 1.0)
       (= invariant_12_n 1.0)
       (= invariant_14_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       a!1
       (not (>= invariant_48_n 3.0))
       (= invariant_26_n 7.0)
       (= invariant_16_n 3.0)
       (= invariant_30_n 4.0)
       (= invariant_0_n 1.0)
       (= invariant_12_n 1.0)
       (= invariant_14_n 0.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_16_n 3.0) (= invariant_26_n 7.0) (= invariant_12_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_26_n 8.0)
       (= invariant_16_n 3.0)
       (= invariant_32_n 8.0)
       (= invariant_21_n 0.0)
       (= invariant_12_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_26_n 8.0)
       (= invariant_16_n 3.0)
       (= invariant_32_n 8.0)
       (= invariant_21_n 0.0)
       (= invariant_12_n 1.0)
       a!1))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_16_n 3.0) (= invariant_26_n 8.0) (= invariant_12_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_26_n 9.0)
       (= invariant_16_n 3.0)
       (= invariant_31_n 4.0)
       a!1
       (= invariant_12_n 1.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_26_n 9.0)
       (= invariant_16_n 3.0)
       (= invariant_31_n 4.0)
       a!1
       (= invariant_12_n 1.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_16_n 3.0) (= invariant_12_n 1.0) (= invariant_26_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_1_n (* (- 1.0) invariant_34_n)) 0.0))))
  (and invariant_8_n a!1 (= invariant_16_n 3.0) (= invariant_0_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_1_n (* (- 1.0) invariant_34_n)) 0.0))))
  (and invariant_8_n a!1 (= invariant_16_n 3.0) (= invariant_0_n 0.0)))
into
(let ((a!1 (not (<= (+ invariant_1_n (* (- 1.0) invariant_34_n)) 0.0))))
  (and (= invariant_16_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= (+ invariant_1_n (* (- 1.0) invariant_34_n)) 0.0)
       (= invariant_16_n 3.0)
       (= invariant_26_n 9.0)
       (= invariant_31_n 4.0)
       (= invariant_0_n 0.0)
       a!1
       (not (>= invariant_48_n 3.0))
       (= invariant_22_n 2.0)
       (= invariant_19_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= (+ invariant_1_n (* (- 1.0) invariant_34_n)) 0.0)
       (= invariant_16_n 3.0)
       (= invariant_26_n 9.0)
       (= invariant_31_n 4.0)
       (= invariant_0_n 0.0)
       a!1
       (not (>= invariant_48_n 3.0))
       (= invariant_22_n 2.0)
       (= invariant_19_n 0.0)))
into
(let ((a!1 (not (<= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_16_n 3.0)
       (= (+ invariant_1_n (* (- 1.0) invariant_34_n)) 0.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0)))
      (a!2 (not (>= (+ invariant_37_n (* (- 1.0) invariant_41_n)) 0.0)))
      (a!3 (not (>= (+ invariant_34_n (* (- 1.0) invariant_37_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_16_n 3.0) a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0)))
      (a!2 (not (>= (+ invariant_37_n (* (- 1.0) invariant_41_n)) 0.0)))
      (a!3 (not (>= (+ invariant_34_n (* (- 1.0) invariant_37_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_16_n 3.0) a!2 a!3))
into
(let ((a!1 (not (>= (+ invariant_37_n (* (- 1.0) invariant_41_n)) 0.0)))
      (a!2 (not (>= (+ invariant_34_n (* (- 1.0) invariant_37_n)) 0.0))))
  (and (= invariant_20_n 3.0) (= invariant_16_n 3.0) a!1 a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_16_n 3.0)
       (= invariant_0_n 1.0)
       (not (>= invariant_48_n 3.0))
       (= invariant_12_n 1.0)
       (= invariant_22_n 2.0)
       (= invariant_26_n 1.0)
       (= invariant_14_n 2.0)
       (= invariant_29_n 6.0)
       (= invariant_15_n 2.0)
       (= invariant_17_n 0.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (= invariant_16_n 3.0)
       (= invariant_0_n 1.0)
       (not (>= invariant_48_n 3.0))
       (= invariant_12_n 1.0)
       (= invariant_22_n 2.0)
       (= invariant_26_n 1.0)
       (= invariant_14_n 2.0)
       (= invariant_29_n 6.0)
       (= invariant_15_n 2.0)
       (= invariant_17_n 0.0)
       a!1))
into
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_16_n 3.0) (= invariant_26_n 1.0) (= invariant_12_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       a!1
       (not (>= invariant_48_n 3.0))
       (= invariant_0_n 1.0)
       (= invariant_12_n 1.0)
       (= invariant_17_n 1.0)
       (= invariant_16_n 3.0)
       (= invariant_14_n 1.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       a!1
       (not (>= invariant_48_n 3.0))
       (= invariant_0_n 1.0)
       (= invariant_12_n 1.0)
       (= invariant_17_n 1.0)
       (= invariant_16_n 3.0)
       (= invariant_14_n 1.0)))
into
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_37_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_16_n 3.0) (not (>= invariant_48_n 3.0)) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_37_n)) 0.0)))
      (a!2 (not (<= (+ invariant_37_n (* (- 1.0) invariant_41_n)) 0.0)))
      (a!3 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_16_n 3.0) a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_37_n)) 0.0)))
      (a!2 (not (<= (+ invariant_37_n (* (- 1.0) invariant_41_n)) 0.0)))
      (a!3 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) (= invariant_16_n 3.0) a!2 a!3))
into
(let ((a!1 (not (<= (+ invariant_37_n (* (- 1.0) invariant_41_n)) 0.0)))
      (a!2 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and (= invariant_20_n 3.0) (= invariant_16_n 3.0) a!1 a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_33_n 10.0)
     (= invariant_0_n 1.0)
     (= invariant_24_n 1.0)
     (= invariant_12_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_14_n 0.0)
     (= invariant_23_n 3.0)
     (= invariant_25_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_33_n 10.0)
     (= invariant_0_n 1.0)
     (= invariant_24_n 1.0)
     (= invariant_12_n 1.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_14_n 0.0)
     (= invariant_23_n 3.0)
     (= invariant_25_n 9.0))
into
(and (= invariant_23_n 3.0)
     (= invariant_33_n 10.0)
     (= invariant_12_n 1.0)
     (= invariant_14_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_44_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (not (>= invariant_48_n 3.0))
       (= invariant_23_n 3.0)
       (= invariant_20_n 2.0)
       a!1
       (= invariant_0_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_44_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and invariant_8_n
       (not (>= invariant_48_n 3.0))
       (= invariant_23_n 3.0)
       (= invariant_20_n 2.0)
       a!1
       (= invariant_0_n 0.0)))
into
(let ((a!1 (not (>= (+ invariant_34_n
                       (* (- 1.0) invariant_44_n)
                       (* (- 1.0) invariant_48_n))
                    (- 3.0)))))
  (and (= invariant_23_n 3.0) (not (>= invariant_48_n 3.0)) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_44_n)) 0.0)))
      (a!2 (not (>= (+ invariant_41_n (* (- 1.0) invariant_44_n)) 0.0)))
      (a!3 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) a!2 (= invariant_23_n 3.0) a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_34_n (* (- 1.0) invariant_44_n)) 0.0)))
      (a!2 (not (>= (+ invariant_41_n (* (- 1.0) invariant_44_n)) 0.0)))
      (a!3 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and a!1 (= invariant_20_n 3.0) a!2 (= invariant_23_n 3.0) a!3))
into
(let ((a!1 (not (>= (+ invariant_41_n (* (- 1.0) invariant_44_n)) 0.0)))
      (a!2 (not (>= (+ invariant_34_n (* (- 1.0) invariant_41_n)) 0.0))))
  (and (= invariant_20_n 3.0) (= invariant_23_n 3.0) a!1 a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_15_n 0.0)
     (= invariant_23_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_27_n 2.0)
     (= invariant_47_n 4.0)
     (= invariant_33_n 2.0)
     (= invariant_12_n 4.0)
     (= invariant_14_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_15_n 0.0)
     (= invariant_23_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_27_n 2.0)
     (= invariant_47_n 4.0)
     (= invariant_33_n 2.0)
     (= invariant_12_n 4.0)
     (= invariant_14_n 1.0))
into
(and (= invariant_23_n 3.0)
     (= invariant_33_n 2.0)
     (= invariant_12_n 4.0)
     (= invariant_15_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (= invariant_15_n 2.0))
     (= invariant_29_n 9.0)
     (= invariant_17_n 2.0)
     (= invariant_23_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_28_n 10.0)
     (= invariant_24_n 3.0)
     (= invariant_33_n 2.0)
     (= invariant_12_n 9.0)
     (= invariant_19_n 1.0)
     (= invariant_27_n 2.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (= invariant_15_n 2.0))
     (= invariant_29_n 9.0)
     (= invariant_17_n 2.0)
     (= invariant_23_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_28_n 10.0)
     (= invariant_24_n 3.0)
     (= invariant_33_n 2.0)
     (= invariant_12_n 9.0)
     (= invariant_19_n 1.0)
     (= invariant_27_n 2.0))
into
(and (= invariant_23_n 3.0)
     (= invariant_12_n 9.0)
     (= invariant_33_n 2.0)
     (not (= invariant_15_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_11_n
     (= invariant_26_n 6.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0)
     (= invariant_28_n 10.0)
     (= invariant_12_n 6.0)
     (= invariant_14_n 2.0)
     (= invariant_21_n 1.0)
     (= invariant_19_n 1.0)
     (= invariant_31_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_11_n
     (= invariant_26_n 6.0)
     (= invariant_20_n 3.0)
     (= invariant_0_n 0.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_30_n 10.0)
     (= invariant_28_n 10.0)
     (= invariant_12_n 6.0)
     (= invariant_14_n 2.0)
     (= invariant_21_n 1.0)
     (= invariant_19_n 1.0)
     (= invariant_31_n 4.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 6.0) (= invariant_30_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_11_n
     (= invariant_12_n 6.0)
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_11_n
     (= invariant_12_n 6.0)
     (= invariant_30_n 8.0)
     (= invariant_20_n 3.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 6.0) (= invariant_30_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_24_n 2.0)
     (= invariant_12_n 6.0)
     (= invariant_0_n 0.0)
     (= invariant_19_n 1.0)
     (= invariant_18_n 2.0)
     (= invariant_17_n 0.0)
     (= invariant_33_n 5.0)
     (= invariant_23_n 3.0)
     (= invariant_31_n 4.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_24_n 2.0)
     (= invariant_12_n 6.0)
     (= invariant_0_n 0.0)
     (= invariant_19_n 1.0)
     (= invariant_18_n 2.0)
     (= invariant_17_n 0.0)
     (= invariant_33_n 5.0)
     (= invariant_23_n 3.0)
     (= invariant_31_n 4.0))
into
(and (= invariant_23_n 3.0)
     (= invariant_19_n 1.0)
     (= invariant_33_n 5.0)
     (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_33_n 6.0)
     (= invariant_28_n 3.0)
     (= invariant_12_n 10.0)
     (= invariant_23_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_33_n 6.0)
     (= invariant_28_n 3.0)
     (= invariant_12_n 10.0)
     (= invariant_23_n 3.0))
into
(and (= invariant_23_n 3.0) (= invariant_33_n 6.0) (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_11_n
     (not (>= invariant_48_n 3.0))
     (= invariant_20_n 3.0)
     (= invariant_12_n 6.0)
     (= invariant_0_n 0.0)
     (= invariant_19_n 0.0)
     (= invariant_14_n 2.0)
     (= invariant_18_n 1.0)
     (= invariant_22_n 1.0)
     (= invariant_30_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_11_n
     (not (>= invariant_48_n 3.0))
     (= invariant_20_n 3.0)
     (= invariant_12_n 6.0)
     (= invariant_0_n 0.0)
     (= invariant_19_n 0.0)
     (= invariant_14_n 2.0)
     (= invariant_18_n 1.0)
     (= invariant_22_n 1.0)
     (= invariant_30_n 9.0))
into
(and (= invariant_20_n 3.0) (= invariant_12_n 6.0) (= invariant_30_n 9.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_9_n)
     invariant_11_n
     (not invariant_4_n)
     (not invariant_8_n)
     (= invariant_0_n 0.0)
     (= invariant_12_n 3.0)
     (= invariant_21_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_9_n)
     invariant_11_n
     (not invariant_4_n)
     (not invariant_8_n)
     (= invariant_0_n 0.0)
     (= invariant_12_n 3.0)
     (= invariant_21_n 1.0))
into
(and (not invariant_8_n) (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_8_n)
     (not invariant_9_n)
     (= invariant_22_n 2.0)
     (= invariant_12_n 3.0)
     (= invariant_23_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_18_n 1.0)
     (= invariant_0_n 0.0)
     (= invariant_21_n 1.0)
     (= invariant_19_n 1.0)
     (= invariant_17_n 1.0)
     (= invariant_33_n 3.0)
     (= invariant_26_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_8_n)
     (not invariant_9_n)
     (= invariant_22_n 2.0)
     (= invariant_12_n 3.0)
     (= invariant_23_n 3.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_18_n 1.0)
     (= invariant_0_n 0.0)
     (= invariant_21_n 1.0)
     (= invariant_19_n 1.0)
     (= invariant_17_n 1.0)
     (= invariant_33_n 3.0)
     (= invariant_26_n 8.0))
into
(and (not invariant_8_n) (= invariant_23_n 3.0) (= invariant_12_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (not (= 3.0 invariant_26_n))
     (= invariant_15_n 1.0)
     (= invariant_12_n 8.0)
     (= invariant_23_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_33_n 3.0)
     (= invariant_31_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_16_n 1.0)
     (= invariant_18_n 1.0)
     (= invariant_22_n 2.0)
     (= invariant_29_n 9.0)
     (= invariant_17_n 1.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (not (= 3.0 invariant_26_n))
     (= invariant_15_n 1.0)
     (= invariant_12_n 8.0)
     (= invariant_23_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_33_n 3.0)
     (= invariant_31_n 4.0)
     (not (>= invariant_48_n 3.0))
     (= invariant_16_n 1.0)
     (= invariant_18_n 1.0)
     (= invariant_22_n 2.0)
     (= invariant_29_n 9.0)
     (= invariant_17_n 1.0))
into
(and (= invariant_23_n 3.0) (= invariant_33_n 3.0) (= invariant_12_n 8.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and invariant_8_n
     (= invariant_25_n 7.0)
     (= invariant_24_n 2.0)
     (= invariant_33_n 7.0)
     (= invariant_12_n 10.0)
     (= invariant_23_n 3.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and invariant_8_n
     (= invariant_25_n 7.0)
     (= invariant_24_n 2.0)
     (= invariant_33_n 7.0)
     (= invariant_12_n 10.0)
     (= invariant_23_n 3.0))
into
(and (= invariant_23_n 3.0) (= invariant_33_n 7.0) (= invariant_12_n 10.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_8_n)
     invariant_11_n
     (not invariant_4_n)
     (not invariant_9_n)
     (= invariant_12_n 6.0)
     (= invariant_0_n 0.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not invariant_8_n)
     invariant_11_n
     (not invariant_4_n)
     (not invariant_9_n)
     (= invariant_12_n 6.0)
     (= invariant_0_n 0.0))
into
(and (not invariant_9_n) (= invariant_12_n 6.0))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not invariant_9_n)
     (not invariant_11_n)
     (= invariant_14_n 2.0)
     (= invariant_12_n 6.0)
     (= invariant_33_n 6.0)
     (= invariant_23_n 3.0)
     (= invariant_0_n 0.0)
     (= invariant_19_n 1.0)
     (= invariant_29_n 5.0)
     (= invariant_17_n 1.0))
------------------------------------------------
er.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n (= state_40_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 4.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 4.0)))
into
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 5.0)))
into
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 6.0)))
into
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 7.0)))
into
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 10.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 10.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_1_n) state_3_n (not state_0_n) (not state_2_n) state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_1_n) state_3_n (not state_0_n) (not state_2_n) state_4_n)
into
(and state_4_n (not state_0_n) (not state_2_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 7.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 8.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 8.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_4_n)
       state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (= state_40_n 9.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_4_n)
       state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (= state_40_n 9.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
into
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 7.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 8.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 8.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
into
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_4_n) state_1_n state_2_n state_3_n (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_4_n) state_1_n state_2_n state_3_n (not state_0_n))
into
(and state_3_n (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 7.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
into
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       (= state_40_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       (= state_40_n 7.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 10.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 10.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_3_n) state_2_n (not state_0_n) state_4_n (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_3_n) state_2_n (not state_0_n) state_4_n (not state_1_n))
into
(and state_4_n (not state_0_n) (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state_40_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state_40_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 4.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 4.0)))
into
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 5.0)))
into
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
into
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 7.0)))
into
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
-------------------------- [spacer.ind_gen] opera-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 10.0)))
------------------- [spacer.ind_gen] operator() .-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 10.0)))
into
(let ((a!1 (not (>= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state_40_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state_40_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 4.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 4.0)))
into
(let ((a!1 (not (<= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 5.0)))
into
(let ((a!1 (not (<= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
into
(let ((a!1 (not (<= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_55_n)) 0.0))))
  (and (not state_0_n) state_4_n (not state_3_n) (= state_37_n 0.0) a!1))
into
(let ((a!1 (not (<= (+ state_47_-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 7.0)))
into
(let ((a!1 (not (<= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
---------------------------------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_55_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_55_n)) 0.0))))
  (and (not state_-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (<= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_55_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_55_n)) 0.0))))
  (and (not state_3_n) (-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (<= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state_40_n 9.-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_55_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 3.0)))
into
(let ((a!1 (not (>= (+ state_55_n (* (- 1.0) state_73_n)) 0.0))))
  (and (not state_3_n) (= state-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
into
(let ((a!1 (not (<= (+ state_82_n (* (- 1.0) state_96_n)) 0.0))))
  (and state_0_n (= state-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_55_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 4.0)))
into
(let ((a!1 (not (>= (+ state_55_n (* (- 1.0) state_73_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/space-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
into
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 7.0)))
into
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and (not state_4_n)
       state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (= state_40_n 8.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and (not state_4_n)
       state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (= state_40_n 8.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n -------- [spacer.ind_gen] operator() ../src/muz/spacer/s-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not st-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not -------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
 -------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
into
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 7.0)))
into
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 10.0)
       a-------- [spacer.ind_gen] operator() ../src/muz/spacer-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n (= state_37_n 2.0) a!1))
--------------------------------------------------------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 5.0)))
into
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_72_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_72_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_72_n (* (- 1.0) state_8-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n
       state_1_n
       (not state_3_n)
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n
       state_1_n
       (not state_3_n)
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_0_n)
       state_1_n
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_0_n)
       state_1_n
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_0_n)
       state_1_n
       a!1
       (= state_37_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_0_n)
       state_1_n
       a!1
       (= state_37_n 5.0)))
into
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n (= state_40_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 5.0)))
into
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  -------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_0_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_0_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_4_n) (not state_1_n) state_2_n state_0_n (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_4_n) (not state_1_n) state_2_n state_0_n (not state_3_n))
into
(and state_2_n (not state_4_n) (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       state_4_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       state_4_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_4_n) state_2_n state_3_n state_0_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_4_n) state_2_n state_3_n state_0_n)
into
(and state_2_n (not state_4_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n a!1 (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and (not state_3_n) a!1 (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and (not state_3_n) a!1 (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n)
     (not state_3_n)
     (not state_1_n)
     (not state_4_n)
     (not state_2_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n)
     (not state_3_n)
     (not state_1_n)
     (not state_4_n)
     (not state_2_n))
into
(and (not state_4_n) (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 5.0)))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 5.0)))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n) state_4_n (not state_1_n) (not state_3_n) (not state_2_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n) state_4_n (not state_1_n) (not state_3_n) (not state_2_n))
into
(and (not state_0_n) (not state_3_n) (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_1_n
       state_4_n
       (= state_37_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_1_n
       state_4_n
       (= state_37_n 7.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_0_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_0_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_0_n state_2_n (not state_1_n) state_4_n (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_0_n state_2_n (not state_1_n) state_4_n (not state_3_n))
into
(and state_2_n (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_4_n state_0_n state_1_n (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_4_n state_0_n state_1_n (not state_3_n))
into
(and state_0_n state_1_n (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and state_1_n
       (not state_3_n)
       state_4_n
       (not state_2_n)
       (= state_37_n 0.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and state_1_n
       (not state_3_n)
       state_4_n
       (not state_2_n)
       (= state_37_n 0.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and state_4_n (= state_37_n 0.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 4.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 4.0)))
into
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 5.0)))
into
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       (not state_2_n)
       (= state_37_n 0.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       (not state_2_n)
       (= state_37_n 0.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 0.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (= state_37_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (= state_37_n 1.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and state_4_n (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_57_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 4.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 4.0)))
into
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 5.0)))
into
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_57_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_3_n) state_4_n state_0_n (not state_2_n) (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_3_n) state_4_n state_0_n (not state_2_n) (not state_1_n))
into
(and (not state_3_n) (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_0_n)
       state_1_n
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_0_n)
       state_1_n
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n) (not state_1_n) (not state_4_n) (not state_2_n) state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n) (not state_1_n) (not state_4_n) (not state_2_n) state_3_n)
into
(and (not state_4_n) (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_2_n) state_4_n (not state_3_n) (= state_37_n 0.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_2_n) state_4_n (not state_3_n) (= state_37_n 0.0) a!1))
into
(let ((a!1 (not (<= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 0.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       state_4_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       state_4_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n (= state_37_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       state_4_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       state_4_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 4.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 4.0)))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       state_4_n
       (not state_0_n)
       a!1
       (= state_37_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       state_4_n
       (not state_0_n)
       a!1
       (= state_37_n 5.0)))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n (not state_3_n) a!1 (= state_37_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n (not state_3_n) a!1 (= state_37_n 0.0)))
into
(let ((a!1 (not (>= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 0.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n (= state_37_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and state_4_n (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_68_n (* (- 1.0) state_74_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 4.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 4.0)))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       state_4_n
       (not state_0_n)
       a!1
       (= state_37_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       state_4_n
       (not state_0_n)
       a!1
       (= state_37_n 5.0)))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_68_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n) (not state_1_n) state_3_n state_4_n (not state_2_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n) (not state_1_n) state_3_n state_4_n (not state_2_n))
into
(and state_3_n state_4_n (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (not state_3_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (not state_3_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 8.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 8.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       state_1_n
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       state_1_n
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (= state_37_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (= state_37_n 7.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 8.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 8.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_0_n state_3_n (not state_4_n) (not state_2_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n state_0_n state_3_n (not state_4_n) (not state_2_n))
into
(and state_0_n (not state_4_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n
       state_1_n
       (not state_2_n)
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n
       state_1_n
       (not state_2_n)
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n (= state_37_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       state_1_n
       a!1
       (= state_37_n 4.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       state_1_n
       a!1
       (= state_37_n 4.0)))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 5.0)))
into
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n (= state_37_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 5.0)))
into
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_4_n state_0_n state_3_n (not state_1_n) (not state_2_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_4_n state_0_n state_3_n (not state_1_n) (not state_2_n))
into
(and (not state_2_n) (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 8.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 8.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_2_n)
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_2_n)
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       state_1_n
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       state_1_n
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 7.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 8.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 8.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n (not state_1_n) state_2_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n (not state_1_n) state_2_n state_4_n)
into
(not state_1_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n) (not state_3_n) (not state_2_n) (not state_4_n) state_1_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n) (not state_3_n) (not state_2_n) (not state_4_n) state_1_n)
into
(and state_1_n (not state_4_n) (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_64_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n a!1 (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and (not state_3_n) a!1 (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_64_n)) 0.0))))
  (and (not state_3_n) a!1 (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n)
     (not state_3_n)
     (not state_1_n)
     (not state_2_n)
     (not state_4_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n)
     (not state_3_n)
     (not state_1_n)
     (not state_2_n)
     (not state_4_n))
into
(and (not state_2_n) (not state_4_n) (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       state_1_n
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       state_1_n
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       state_1_n
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       state_1_n
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (= state_37_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (= state_37_n 7.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_94_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_4_n state_0_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (= state_37_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (= state_37_n 7.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 8.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 8.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (not state_2_n)
       (= state_37_n 9.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (not state_2_n)
       (= state_37_n 9.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 8.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 8.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_93_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_93_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_0_n state_3_n (not state_4_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n state_0_n state_3_n (not state_4_n))
into
(and state_0_n state_1_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 1.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_0_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_0_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 1.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n (= state_37_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_59_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_59_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n (not state_1_n) (not state_4_n) (not state_3_n) state_0_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_2_n (not state_1_n) (not state_4_n) (not state_3_n) state_0_n)
into
(and (not state_4_n) (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_4_n) (not state_1_n) (not state_2_n) state_0_n state_3_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_4_n) (not state_1_n) (not state_2_n) state_0_n state_3_n)
into
(and state_0_n (not state_2_n) (not state_4_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (not state_3_n) a!1 (= state_37_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (not state_3_n) a!1 (= state_37_n 0.0)))
into
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 0.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 1.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 5.0)))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_1_n
       (not state_0_n)
       state_4_n
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_1_n state_4_n (not state_2_n) (= state_37_n 0.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_1_n state_4_n (not state_2_n) (= state_37_n 0.0) a!1))
into
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 0.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 1.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 5.0)))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n) (not state_1_n) (not state_3_n) (not state_2_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n) (not state_1_n) (not state_3_n) (not state_2_n))
into
(and (not state_2_n) (not state_3_n) (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (not state_2_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (not state_2_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_40_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_78_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_2_n state_0_n (not state_1_n) (not state_3_n) state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_2_n state_0_n (not state_1_n) (not state_3_n) state_4_n)
into
(and (not state_3_n) (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n (= state_37_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n (= state_37_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_2_n)
       (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_2_n)
       (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_65_n (* (- 1.0) state_76_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_42_n (* (- 1.0) state_65_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n (not state_1_n) (not state_2_n) (not state_4_n) (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n (not state_1_n) (not state_2_n) (not state_4_n) (not state_0_n))
into
(and (not state_2_n) (not state_4_n) (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 7.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 8.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 8.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_79_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (= state_37_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (= state_37_n 7.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 8.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 8.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_38_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_79_n (* (- 1.0) state_87_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_4_n (not state_1_n) state_3_n state_0_n state_2_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_4_n (not state_1_n) state_3_n state_0_n state_2_n)
into
(and state_2_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       state_1_n
       (= state_37_n 0.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       state_1_n
       (= state_37_n 0.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 0.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       state_4_n
       (= state_37_n 1.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n (= state_37_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 5.0)))
into
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 0.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 0.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 0.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 1.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and state_4_n (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       state_1_n
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_0_n)
       state_4_n
       (not state_3_n)
       state_1_n
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       state_1_n
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_0_n)
       (not state_3_n)
       state_4_n
       state_1_n
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_58_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 5.0)))
into
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 6.0)))
into
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_58_n (* (- 1.0) state_75_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_4_n state_0_n state_3_n (not state_1_n) (not state_2_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_4_n state_0_n state_3_n (not state_1_n) (not state_2_n))
into
(and (not state_2_n) (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_0_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_0_n)
       (not state_2_n)
       state_1_n
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_2_n)
       (not state_3_n)
       (not state_0_n)
       state_1_n
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (not state_2_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (>= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n (= state_37_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       (not state_2_n)
       state_1_n
       (not state_0_n)
       (= state_37_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and (not state_3_n)
       state_4_n
       state_1_n
       (not state_0_n)
       (= state_37_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_41_n (* (- 1.0) state_60_n)) 0.0))))
  (and state_4_n (= state_37_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 7.0)))
into
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 8.0)))
into
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and state_4_n
       (not state_3_n)
       state_1_n
       (not state_0_n)
       a!1
       (= state_37_n 9.0)))
into
(let ((a!1 (not (<= (+ state_60_n (* (- 1.0) state_77_n)) 0.0))))
  (and (not state_3_n) (= state_37_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_3_n state_2_n (not state_1_n) (not state_4_n) state_0_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_3_n state_2_n (not state_1_n) (not state_4_n) state_0_n)
into
(not state_1_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_0_n) (not state_3_n) (not state_2_n) (not state_4_n) state_1_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_0_n) (not state_3_n) (not state_2_n) (not state_4_n) state_1_n)
into
(and state_1_n (not state_4_n) (not state_3_n))
------------------------------------------------
 [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_72_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_72_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_72_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_72_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_72_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_72_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_72_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_72_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_72_n (* (- 1.0) state_85_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_49_n (* (- 1.0) state_72_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_49_n (* (- 1.0) state_72_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 7.0)))
into
(let ((a!1 (not (>= (+ state_49_n (* (- 1.0) state_72_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_49_n (* (- 1.0) state_72_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_49_n (* (- 1.0) state_72_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (>= (+ state_49_n (* (- 1.0) state_72_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_49_n (* (- 1.0) state_72_n)) 0.0))))
  (and state_0_n
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       (not state_2_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_49_n (* (- 1.0) state_72_n)) 0.0))))
  (and state_0_n
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       (not state_2_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (>= (+ state_49_n (* (- 1.0) state_72_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_49_n (* (- 1.0) state_72_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 10.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_49_n (* (- 1.0) state_72_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 10.0)))
into
(let ((a!1 (not (>= (+ state_49_n (* (- 1.0) state_72_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_1_n) state_2_n (not state_3_n) state_4_n state_0_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_1_n) state_2_n (not state_3_n) state_4_n state_0_n)
into
(and state_0_n state_4_n (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 7.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 8.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 8.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 7.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 8.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 8.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_87_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 10.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 10.0)))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_105_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_0_n state_4_n state_1_n (not state_2_n) (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_0_n state_4_n state_1_n (not state_2_n) (not state_3_n))
into
(and state_0_n state_1_n (not state_2_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 1.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n (= state_40_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n (= state_40_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n (= state_40_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 5.0)))
into
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
into
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 7.0)))
into
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 10.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 10.0)))
into
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 1.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n (= state_40_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n (= state_40_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n (= state_40_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_75_n (* (- 1.0) state_83_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 5.0)))
into
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
into
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 7.0)))
into
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 10.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 10.0)))
into
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_75_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_0_n (not state_3_n) state_4_n state_2_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n state_0_n (not state_3_n) state_4_n state_2_n)
into
(and state_0_n state_4_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n (= state_40_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n (= state_40_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
into
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 7.0)))
into
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
into
(let ((a!1 (not (<= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n (= state_40_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n (= state_40_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_73_n (* (- 1.0) state_84_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
into
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 7.0)))
into
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       (= state_40_n 10.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       (= state_40_n 10.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_51_n (* (- 1.0) state_73_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and state_1_n state_2_n (not state_0_n) state_4_n (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and state_1_n state_2_n (not state_0_n) state_4_n (not state_3_n))
into
(and state_1_n state_2_n (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 7.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (>= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (>= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
into
(let ((a!1 (not (>= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 7.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_66_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (<= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (<= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
into
(let ((a!1 (not (<= (+ state_66_n (* (- 1.0) state_86_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_4_n) state_3_n (not state_1_n) state_0_n state_2_n)
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_4_n) state_3_n (not state_1_n) state_0_n state_2_n)
into
(and state_0_n state_2_n (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 7.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       (= state_40_n 10.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       (= state_40_n 10.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 7.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_86_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       (= state_40_n 10.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       (= state_40_n 10.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_47_n (* (- 1.0) state_106_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_3_n) state_4_n (not state_0_n) state_2_n (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_3_n) state_4_n (not state_0_n) state_2_n (not state_1_n))
into
(and state_2_n (not state_1_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 7.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 8.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 8.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       (not state_2_n)
       (= state_40_n 9.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       (not state_2_n)
       (= state_40_n 9.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       (= state_40_n 10.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       (= state_40_n 10.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_44_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 7.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 8.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 8.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (= state_40_n 9.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (= state_40_n 9.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_88_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       (= state_40_n 10.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       (= state_40_n 10.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_44_n (* (- 1.0) state_99_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_2_n) state_4_n (not state_3_n) state_1_n (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_2_n) state_4_n (not state_3_n) state_1_n (not state_0_n))
into
(and state_4_n (not state_3_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 5.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 7.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 8.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 8.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       (= state_40_n 10.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       (= state_40_n 10.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 5.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 5.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 6.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 7.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 7.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 8.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 8.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_45_n (* (- 1.0) state_67_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 10.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 10.0)))
into
(let ((a!1 (not (<= (+ state_67_n (* (- 1.0) state_87_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_4_n) state_1_n state_2_n state_3_n (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_4_n) state_1_n state_2_n state_3_n (not state_0_n))
into
(and state_2_n (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 1.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       (= state_40_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       (= state_40_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 4.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 5.0)))
into
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 6.0)))
into
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 7.0)))
into
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_3_n)
       (not state_1_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
into
(let ((a!1 (not (>= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 1.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 4.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       (= state_40_n 4.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_52_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 5.0)))
into
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
into
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 7.0)))
into
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
into
(let ((a!1 (not (<= (+ state_83_n (* (- 1.0) state_98_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(and (not state_2_n) state_1_n (not state_0_n) state_3_n (not state_4_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(and (not state_2_n) state_1_n (not state_0_n) state_3_n (not state_4_n))
into
(and state_1_n (not state_0_n))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and (not state_4_n)
       state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (= state_40_n 0.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and (not state_4_n)
       state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (= state_40_n 0.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n a!1 (= state_40_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 1.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n a!1 (= state_40_n 1.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 2.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n a!1 (= state_40_n 2.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 3.0)
       a!1))
into
(let ((a!1 (not (<= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n a!1 (= state_40_n 3.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 4.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_4_n)
       (not state_3_n)
       a!1
       (= state_40_n 4.0)))
into
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 5.0)))
into
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
into
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 7.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 7.0)))
into
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n (= state_40_n 7.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 8.0)))
into
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n (= state_40_n 8.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       (not state_2_n)
       a!1
       (= state_40_n 9.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       (not state_2_n)
       a!1
       (= state_40_n 9.0)))
into
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n (= state_40_n 9.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_1_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 10.0)))
into
(let ((a!1 (not (>= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n (= state_40_n 10.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and (not state_3_n) state_0_n (not state_2_n) (= state_40_n 0.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and (not state_3_n) state_0_n (not state_2_n) (= state_40_n 0.0) a!1))
into
(let ((a!1 (not (>= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n (= state_40_n 0.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 1.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 1.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n (= state_40_n 1.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 2.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 2.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n (= state_40_n 2.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 3.0)
       a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       (= state_40_n 3.0)
       a!1))
into
(let ((a!1 (not (>= (+ state_76_n (* (- 1.0) state_82_n)) 0.0))))
  (and state_0_n (= state_40_n 3.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 4.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 4.0)))
into
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n (= state_40_n 4.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 5.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 5.0)))
into
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n (= state_40_n 5.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_1_n)
       (not state_2_n)
       (not state_3_n)
       (not state_4_n)
       a!1
       (= state_40_n 6.0)))
into
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n (= state_40_n 6.0) a!1))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ state_53_n (* (- 1.0) state_76_n)) 0.0))))
  (and state_0_n
       (not state_2_n)
       (not state_4_n)
       (not state_1_n)
       (not state_3_n)
       a!1
       (= state_40_n 7.0)))
------------------------------------------------
9_n)) 0.0)))
      (a!3 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (>= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!6 (not (>= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!7 (not (>= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_70_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (>= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!6 (not (>= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!7 (not (>= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7))
into
(let ((a!1 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n invariant_100_n a!1 (= invariant_120_n 2.0) a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n invariant_100_n a!1 (= invariant_120_n 2.0) a!2 a!3))
into
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (<= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_102_n invariant_100_n a!1 (= invariant_120_n 2.0) a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (<= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_102_n invariant_100_n a!1 (= invariant_120_n 2.0) a!2 a!3))
into
(let ((a!1 (not (<= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6))
into
(let ((a!1 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!2 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (<= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!5 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!7 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (>= (+ invariant_55_n (* (- 1.0) invariant_58_n)) 0.0)
       a!4
       a!5
       a!6
       a!7))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!2 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (<= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!5 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!7 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (>= (+ invariant_55_n (* (- 1.0) invariant_58_n)) 0.0)
       a!4
       a!5
       a!6
       a!7))
into
(let ((a!1 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!3 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (<= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (>= (+ invariant_63_n (* (- 1.0) invariant_69_n)) 0.0)
       a!4
       a!5))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (<= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (>= (+ invariant_63_n (* (- 1.0) invariant_69_n)) 0.0)
       a!4
       a!5))
into
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (<= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!3 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (<= (+ invariant_62_n (* (- 1.0) invariant_63_n)) 0.0)))
      (a!5 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (>= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!7 (not (<= (+ invariant_56_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)
       a!3
       a!4
       a!5
       a!6
       a!7))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (<= (+ invariant_62_n (* (- 1.0) invariant_63_n)) 0.0)))
      (a!5 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (>= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!7 (not (<= (+ invariant_56_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)
       a!3
       a!4
       a!5
       a!6
       a!7))
into
(let ((a!1 (not (>= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3 a!4))
into
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (<= (+ invariant_51_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!4 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_102_n invariant_100_n (= invariant_120_n 2.0) a!1 a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (<= (+ invariant_51_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!4 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_102_n invariant_100_n (= invariant_120_n 2.0) a!1 a!2 a!3 a!4))
into
(let ((a!1 (not (<= (+ invariant_51_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!3 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (<= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_51_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!2 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_65_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (<= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_67_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       a!2
       (= invariant_120_n 2.0)
       (= (+ invariant_64_n (* (- 1.0) invariant_65_n)) 0.0)
       a!3
       a!4
       a!5
       a!6))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_51_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!2 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_65_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (<= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_67_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       a!2
       (= invariant_120_n 2.0)
       (= (+ invariant_64_n (* (- 1.0) invariant_65_n)) 0.0)
       a!3
       a!4
       a!5
       a!6))
into
(let ((a!1 (not (<= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_65_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!4 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       (not (>= invariant_53_n 0.0))
       (= invariant_120_n 2.0)
       (>= (+ invariant_54_n (* (- 1.0) invariant_59_n)) 0.0)
       a!1
       a!2
       a!3
       (not (>= invariant_51_n 0.0))
       a!4
       (= invariant_73_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!4 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       (not (>= invariant_53_n 0.0))
       (= invariant_120_n 2.0)
       (>= (+ invariant_54_n (* (- 1.0) invariant_59_n)) 0.0)
       a!1
       a!2
       a!3
       (not (>= invariant_51_n 0.0))
       a!4
       (= invariant_73_n 0.0)))
into
(let ((a!1 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!2 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ (* (- 1.0) invariant_74_n) invariant_77_n) 0.0)
       a!2
       a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!2 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ (* (- 1.0) invariant_74_n) invariant_77_n) 0.0)
       a!2
       a!3))
into
(let ((a!1 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!5 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (<= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!7 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       (= (+ invariant_52_n (* (- 1.0) invariant_55_n)) 0.0)
       a!7))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!5 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (<= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!7 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       (= (+ invariant_52_n (* (- 1.0) invariant_55_n)) 0.0)
       a!7))
into
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (<= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_54_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_51_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!5 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (>= (+ invariant_71_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!7 (not (<= (+ invariant_61_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       (= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)
       a!3
       a!4
       a!5
       a!6
       a!7))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_54_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_51_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!5 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (>= (+ invariant_71_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!7 (not (<= (+ invariant_61_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       (= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)
       a!3
       a!4
       a!5
       a!6
       a!7))
into
(let ((a!1 (not (<= (+ invariant_51_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_54_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!5 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!6 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (>= (+ invariant_67_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!5 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!6 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (>= (+ invariant_67_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8))
into
(let ((a!1 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ (* (- 1.0) invariant_71_n) invariant_79_n) 0.0)
       a!2
       a!3
       a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ (* (- 1.0) invariant_71_n) invariant_79_n) 0.0)
       a!2
       a!3
       a!4))
into
(let ((a!1 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_61_n (* (- 1.0) invariant_68_n)) 0.0)))
      (a!2 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!5 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)
       a!3
       a!4
       a!5
       a!6))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_61_n (* (- 1.0) invariant_68_n)) 0.0)))
      (a!2 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!5 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)
       a!3
       a!4
       a!5
       a!6))
into
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!3 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!5 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!6 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!8 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!9 (not (<= (+ invariant_72_n (* (- 1.0) invariant_75_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)
       a!3
       a!4
       a!5
       (= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)
       a!6
       (>= (+ invariant_72_n (* (- 1.0) invariant_77_n)) 0.0)
       (= (+ invariant_52_n (* (- 1.0) invariant_55_n)) 0.0)
       a!7
       a!8
       a!9))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!3 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!5 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!6 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!8 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!9 (not (<= (+ invariant_72_n (* (- 1.0) invariant_75_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)
       a!3
       a!4
       a!5
       (= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)
       a!6
       (>= (+ invariant_72_n (* (- 1.0) invariant_77_n)) 0.0)
       (= (+ invariant_52_n (* (- 1.0) invariant_55_n)) 0.0)
       a!7
       a!8
       a!9))
into
(let ((a!1 (not (<= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!4 (not (<= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!5 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (>= (+ (* (- 1.0) invariant_73_n) invariant_79_n) 0.0)
       a!4
       a!5))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!4 (not (<= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!5 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (>= (+ (* (- 1.0) invariant_73_n) invariant_79_n) 0.0)
       a!4
       a!5))
into
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (>= (+ (* (- 1.0) invariant_63_n) invariant_67_n) 0.0)
       a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (>= (+ (* (- 1.0) invariant_63_n) invariant_67_n) 0.0)
       a!3))
into
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (<= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_65_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)
       a!5
       (= (+ invariant_64_n (* (- 1.0) invariant_65_n)) 0.0)
       a!6))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_65_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)
       a!5
       (= (+ invariant_64_n (* (- 1.0) invariant_65_n)) 0.0)
       a!6))
into
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (<= (+ invariant_65_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_52_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (>= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!3 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_51_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!5 (not (<= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!6 (not (>= (+ invariant_71_n (* (- 1.0) invariant_72_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_50_n (* (- 1.0) invariant_51_n)) 0.0)
       a!6))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_52_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (>= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!3 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_51_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!5 (not (<= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!6 (not (>= (+ invariant_71_n (* (- 1.0) invariant_72_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_50_n (* (- 1.0) invariant_51_n)) 0.0)
       a!6))
into
(let ((a!1 (not (<= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_63_n (* (- 1.0) invariant_64_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       (>= (+ (* (- 1.0) invariant_64_n) invariant_67_n) 0.0)
       a!5))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_63_n (* (- 1.0) invariant_64_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       (>= (+ (* (- 1.0) invariant_64_n) invariant_67_n) 0.0)
       a!5))
into
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n invariant_100_n (= invariant_120_n 2.0) a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n invariant_100_n (= invariant_120_n 2.0) a!1 a!2 a!3))
into
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n invariant_100_n (= invariant_120_n 2.0) a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n invariant_100_n (= invariant_120_n 2.0) a!1 a!2 a!3))
into
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!5 (not (>= (+ invariant_73_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!6 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ (* (- 1.0) invariant_73_n) invariant_79_n) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       (= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!5 (not (>= (+ invariant_73_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!6 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ (* (- 1.0) invariant_73_n) invariant_79_n) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       (= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
into
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!2 (not (>= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!4 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!4 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (= (+ invariant_55_n (* (- 1.0) invariant_58_n)) 0.0)
       a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!4 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (= (+ invariant_55_n (* (- 1.0) invariant_58_n)) 0.0)
       a!4))
into
(let ((a!1 (not (<= (+ invariant_77_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!2 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!6 (not (>= (+ invariant_51_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!7 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!8 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_51_n (* (- 1.0) invariant_54_n)) 0.0)
       a!6
       a!7
       a!8))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!6 (not (>= (+ invariant_51_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!7 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!8 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_51_n (* (- 1.0) invariant_54_n)) 0.0)
       a!6
       a!7
       a!8))
into
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!2 (not (>= (+ invariant_51_n (* (- 1.0) invariant_71_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3))
into
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!3 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3 a!4))
into
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!4 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       a!2
       a!3
       (= invariant_120_n 2.0)
       (= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)
       a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!4 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       a!2
       a!3
       (= invariant_120_n 2.0)
       (= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)
       a!4))
into
(let ((a!1 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_51_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!5 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!7 (not (>= (+ invariant_56_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (>= (+ invariant_51_n (* (- 1.0) invariant_56_n)) 0.0)
       a!4
       a!5
       a!6
       a!7))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_51_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!5 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!7 (not (>= (+ invariant_56_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (>= (+ invariant_51_n (* (- 1.0) invariant_56_n)) 0.0)
       a!4
       a!5
       a!6
       a!7))
into
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       a!2
       (>= (+ invariant_51_n (* (- 1.0) invariant_56_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_56_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_56_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3 a!4))
into
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (>= (+ invariant_56_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_73_n (* (- 1.0) invariant_74_n)) 0.0)))
      (a!4 (not (<= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!5 (not (<= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (>= (+ invariant_70_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)
       a!4
       a!5
       (= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)
       a!6))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_73_n (* (- 1.0) invariant_74_n)) 0.0)))
      (a!4 (not (<= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!5 (not (<= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (>= (+ invariant_70_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)
       a!4
       a!5
       (= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)
       a!6))
into
(let ((a!1 (not (<= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!2 (not (>= (+ invariant_70_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)
       (= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)
       a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!3 (not (>= (+ invariant_50_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_54_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (<= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!8 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!9 (not (<= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       (= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       a!5
       (= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)
       (= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)
       a!6
       a!7
       a!8
       a!9
       (= (+ invariant_56_n (* (- 1.0) invariant_59_n)) 0.0)
       (= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)
       (= (+ invariant_73_n (* (- 1.0) invariant_78_n)) 0.0)
       (= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!3 (not (>= (+ invariant_50_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_54_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (<= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!8 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!9 (not (<= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       (= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       a!5
       (= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)
       (= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)
       a!6
       a!7
       a!8
       a!9
       (= (+ invariant_56_n (* (- 1.0) invariant_59_n)) 0.0)
       (= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)
       (= (+ invariant_73_n (* (- 1.0) invariant_78_n)) 0.0)
       (= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
into
(let ((a!1 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and (= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       (= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)
       a!3
       a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)
       a!3
       a!4))
into
(let ((a!1 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_61_n (* (- 1.0) invariant_68_n)) 0.0)))
      (a!2 (not (>= (+ invariant_51_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!3 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (>= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_61_n (* (- 1.0) invariant_68_n)) 0.0)))
      (a!2 (not (>= (+ invariant_51_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!3 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (>= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7))
into
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!2 (not (>= (+ invariant_51_n (* (- 1.0) invariant_58_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_67_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (>= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!7 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!9 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!10 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!11 (not (<= (+ invariant_77_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!12 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!13 (not (>= (+ invariant_52_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!14 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!15 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!16 (not (>= (+ invariant_63_n (* (- 1.0) invariant_65_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9
       (= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       a!10
       a!11
       a!12
       a!13
       a!14
       a!15
       a!16))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_67_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (>= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!7 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!9 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!10 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!11 (not (<= (+ invariant_77_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!12 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!13 (not (>= (+ invariant_52_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!14 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!15 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!16 (not (>= (+ invariant_63_n (* (- 1.0) invariant_65_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9
       (= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       a!10
       a!11
       a!12
       a!13
       a!14
       a!15
       a!16))
into
(let ((a!1 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_52_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_63_n (* (- 1.0) invariant_65_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_70_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (<= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!8 (not (<= (+ invariant_75_n (* (- 1.0) invariant_76_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       a!6
       (= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0)
       a!7
       (= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)
       (= (+ invariant_55_n (* (- 1.0) invariant_56_n)) 0.0)
       a!8))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_70_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (<= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!8 (not (<= (+ invariant_75_n (* (- 1.0) invariant_76_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       a!6
       (= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0)
       a!7
       (= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)
       (= (+ invariant_55_n (* (- 1.0) invariant_56_n)) 0.0)
       a!8))
into
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_63_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_74_n)) 0.0)))
      (a!3 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!4 (not (>= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!6 (not (>= (+ invariant_71_n (* (- 1.0) invariant_72_n)) 0.0)))
      (a!7 (not (>= (+ invariant_71_n (* (- 1.0) invariant_75_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ (* (- 1.0) invariant_74_n) invariant_77_n) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       (>= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)
       a!7))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_63_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_74_n)) 0.0)))
      (a!3 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!4 (not (>= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!6 (not (>= (+ invariant_71_n (* (- 1.0) invariant_72_n)) 0.0)))
      (a!7 (not (>= (+ invariant_71_n (* (- 1.0) invariant_75_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ (* (- 1.0) invariant_74_n) invariant_77_n) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       (>= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)
       a!7))
into
(let ((a!1 (not (>= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_71_n (* (- 1.0) invariant_72_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_74_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       a!2
       a!3
       (>= (+ (* (- 1.0) invariant_74_n) invariant_77_n) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!2 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_74_n)) 0.0)))
      (a!4 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!6 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)
       a!5
       a!6))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!2 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_74_n)) 0.0)))
      (a!4 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!6 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)
       a!5
       a!6))
into
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_74_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_74_n)) 0.0)))
      (a!2 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!4 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (<= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (>= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!9 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!10 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (>= (+ (* (- 1.0) invariant_76_n) invariant_79_n) 0.0)
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9
       a!10))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_74_n)) 0.0)))
      (a!2 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!4 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (<= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (>= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!9 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!10 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (>= (+ (* (- 1.0) invariant_76_n) invariant_79_n) 0.0)
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9
       a!10))
into
(let ((a!1 (not (<= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_63_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!3 (not (>= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!5 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!6 (not (<= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!7 (not (>= (+ invariant_71_n (* (- 1.0) invariant_72_n)) 0.0)))
      (a!8 (not (>= (+ invariant_71_n (* (- 1.0) invariant_75_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_51_n (* (- 1.0) invariant_56_n)) 0.0)
       a!6
       a!7
       (>= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)
       a!8))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_63_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!3 (not (>= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!5 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!6 (not (<= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!7 (not (>= (+ invariant_71_n (* (- 1.0) invariant_72_n)) 0.0)))
      (a!8 (not (>= (+ invariant_71_n (* (- 1.0) invariant_75_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_51_n (* (- 1.0) invariant_56_n)) 0.0)
       a!6
       a!7
       (>= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)
       a!8))
into
(let ((a!1 (not (<= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!2 (not (>= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_71_n (* (- 1.0) invariant_72_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       (= (+ invariant_51_n (* (- 1.0) invariant_56_n)) 0.0)
       a!1
       a!2
       a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!2 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!5 (not (>= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!2 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!5 (not (>= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
into
(let ((a!1 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!5 (not (<= (+ invariant_61_n (* (- 1.0) invariant_68_n)) 0.0)))
      (a!6 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!8 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)
       a!4
       a!5
       a!6
       a!7
       a!8))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!5 (not (<= (+ invariant_61_n (* (- 1.0) invariant_68_n)) 0.0)))
      (a!6 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!8 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)
       a!4
       a!5
       a!6
       a!7
       a!8))
into
(let ((a!1 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_53_n (* (- 1.0) invariant_71_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
into
(let ((a!1 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!2 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!7 (not (<= (+ invariant_75_n (* (- 1.0) invariant_76_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)
       a!3
       a!4
       a!5
       a!6
       a!7))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!2 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!7 (not (<= (+ invariant_75_n (* (- 1.0) invariant_76_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)
       a!3
       a!4
       a!5
       a!6
       a!7))
into
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!2 (not (<= (+ invariant_75_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!2 (not (<= (+ invariant_75_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)
       a!2
       a!3
       a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!2 (not (<= (+ invariant_75_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)
       a!2
       a!3
       a!4))
into
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!2 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_75_n (* (- 1.0) invariant_76_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       a!2
       a!3
       (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_70_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (>= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!7 (not (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (= (+ invariant_51_n (* (- 1.0) invariant_54_n)) 0.0)
       a!3
       (= (+ invariant_64_n (* (- 1.0) invariant_65_n)) 0.0)
       a!4
       (= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)
       a!5
       a!6
       a!7))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_70_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (>= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!7 (not (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (= (+ invariant_51_n (* (- 1.0) invariant_54_n)) 0.0)
       a!3
       (= (+ invariant_64_n (* (- 1.0) invariant_65_n)) 0.0)
       a!4
       (= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)
       a!5
       a!6
       a!7))
into
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!3 (not (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!2 (not (>= (+ invariant_50_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_60_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!7 (not (<= (+ invariant_60_n (* (- 1.0) invariant_61_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!2 (not (>= (+ invariant_50_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_60_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!7 (not (<= (+ invariant_60_n (* (- 1.0) invariant_61_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7))
into
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (<= (+ invariant_60_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_50_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!5 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_50_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!5 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
into
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_50_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_65_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!2 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       (= (+ invariant_64_n (* (- 1.0) invariant_67_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_65_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!2 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       (= (+ invariant_64_n (* (- 1.0) invariant_67_n)) 0.0)))
into
(let ((a!1 (not (<= (+ invariant_65_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!2 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_50_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!5 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!6 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!8 (not (>= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!9 (not (<= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!10 (not (>= (+ invariant_61_n (* (- 1.0) invariant_67_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9
       a!10
       (= (+ invariant_63_n (* (- 1.0) invariant_69_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_50_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!5 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!6 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!8 (not (>= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!9 (not (<= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!10 (not (>= (+ invariant_61_n (* (- 1.0) invariant_67_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9
       a!10
       (= (+ invariant_63_n (* (- 1.0) invariant_69_n)) 0.0)))
into
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_50_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_72_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_65_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!5 (not (>= (+ invariant_67_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (= (+ invariant_64_n (* (- 1.0) invariant_65_n)) 0.0)
       a!4
       a!5
       a!6
       a!7
       (= (+ invariant_52_n (* (- 1.0) invariant_55_n)) 0.0)
       (= (+ invariant_55_n (* (- 1.0) invariant_58_n)) 0.0)
       a!8
       (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_72_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_65_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!5 (not (>= (+ invariant_67_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (= (+ invariant_64_n (* (- 1.0) invariant_65_n)) 0.0)
       a!4
       a!5
       a!6
       a!7
       (= (+ invariant_52_n (* (- 1.0) invariant_55_n)) 0.0)
       (= (+ invariant_55_n (* (- 1.0) invariant_58_n)) 0.0)
       a!8
       (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
into
(let ((a!1 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_65_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_72_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and a!1
       a!2
       (= (+ invariant_52_n (* (- 1.0) invariant_55_n)) 0.0)
       a!3
       (= (+ invariant_55_n (* (- 1.0) invariant_58_n)) 0.0)
       (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!5 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       (= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)
       (= invariant_120_n 2.0)
       a!1
       a!2
       a!3
       (= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)
       a!4
       a!5
       a!6))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!5 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       (= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)
       (= invariant_120_n 2.0)
       a!1
       a!2
       a!3
       (= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)
       a!4
       a!5
       a!6))
into
(let ((a!1 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       (= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)
       (= invariant_120_n 2.0)
       a!1
       a!2
       a!3
       a!4
       (= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)
       a!5))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       (= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)
       (= invariant_120_n 2.0)
       a!1
       a!2
       a!3
       a!4
       (= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)
       a!5))
into
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!3 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_70_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!5 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!8 (not (>= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!9 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!10 (not (<= (+ invariant_62_n (* (- 1.0) invariant_63_n)) 0.0)))
      (a!11 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!12 (not (>= (+ invariant_70_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!13 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!14 (not (>= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)
       a!9
       a!10
       a!11
       a!12
       a!13
       a!14))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_70_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!5 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!8 (not (>= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!9 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!10 (not (<= (+ invariant_62_n (* (- 1.0) invariant_63_n)) 0.0)))
      (a!11 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!12 (not (>= (+ invariant_70_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!13 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!14 (not (>= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)
       a!9
       a!10
       a!11
       a!12
       a!13
       a!14))
into
(let ((a!1 (not (>= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_65_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (>= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)
       (>= (+ (* (- 1.0) invariant_53_n) invariant_55_n) 0.0)
       a!6))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_65_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (>= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)
       (>= (+ (* (- 1.0) invariant_53_n) invariant_55_n) 0.0)
       a!6))
into
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_65_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       a!3
       a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       a!3
       a!4))
into
(let ((a!1 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_64_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!2 (not (<= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!8 (not (>= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ (* (- 1.0) invariant_71_n) invariant_79_n) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_64_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!2 (not (<= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (>= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!8 (not (>= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ (* (- 1.0) invariant_71_n) invariant_79_n) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8))
into
(let ((a!1 (not (<= (+ invariant_64_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!2 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_67_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (<= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!4 (not (<= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (>= (+ invariant_71_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!6 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!7 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_70_n (* (- 1.0) invariant_73_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       (>= (+ (* (- 1.0) invariant_73_n) invariant_76_n) 0.0)
       a!6
       (>= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)
       a!7))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_67_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (<= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!4 (not (<= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (>= (+ invariant_71_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!6 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!7 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_70_n (* (- 1.0) invariant_73_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       (>= (+ (* (- 1.0) invariant_73_n) invariant_76_n) 0.0)
       a!6
       (>= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)
       a!7))
into
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!3 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!2 (not (>= (+ invariant_52_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_63_n (* (- 1.0) invariant_65_n)) 0.0)))
      (a!4 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!6 (not (<= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (<= (+ invariant_71_n (* (- 1.0) invariant_73_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       (= (+ invariant_62_n (* (- 1.0) invariant_63_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!2 (not (>= (+ invariant_52_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_63_n (* (- 1.0) invariant_65_n)) 0.0)))
      (a!4 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!6 (not (<= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (<= (+ invariant_71_n (* (- 1.0) invariant_73_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       (= (+ invariant_62_n (* (- 1.0) invariant_63_n)) 0.0)))
into
(let ((a!1 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_52_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_63_n (* (- 1.0) invariant_65_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!3 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!5 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (>= (+ invariant_73_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!7 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!8 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!9 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!10 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_55_n (* (- 1.0) invariant_58_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       (>= (+ (* (- 1.0) invariant_53_n) invariant_57_n) 0.0)
       a!7
       a!8
       a!9
       a!10))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!3 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!5 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (>= (+ invariant_73_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!7 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!8 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!9 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!10 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_55_n (* (- 1.0) invariant_58_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       (>= (+ (* (- 1.0) invariant_53_n) invariant_57_n) 0.0)
       a!7
       a!8
       a!9
       a!10))
into
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_72_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!4 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (>= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!8 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!9 (not (<= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_72_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!4 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (>= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!8 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!9 (not (<= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9))
into
(let ((a!1 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_72_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_51_n (* (- 1.0) invariant_52_n)) 0.0)))
      (a!5 (not (<= (+ invariant_72_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!8 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!9 (not (>= (+ invariant_56_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (>= (+ invariant_71_n (* (- 1.0) invariant_72_n)) 0.0)
       a!4
       (>= (+ (* (- 1.0) invariant_72_n) invariant_79_n) 0.0)
       a!5
       a!6
       (= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)
       a!7
       a!8
       a!9))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_51_n (* (- 1.0) invariant_52_n)) 0.0)))
      (a!5 (not (<= (+ invariant_72_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!8 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!9 (not (>= (+ invariant_56_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (>= (+ invariant_71_n (* (- 1.0) invariant_72_n)) 0.0)
       a!4
       (>= (+ (* (- 1.0) invariant_72_n) invariant_79_n) 0.0)
       a!5
       a!6
       (= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)
       a!7
       a!8
       a!9))
into
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (>= (+ invariant_63_n (* (- 1.0) invariant_64_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (>= (+ invariant_63_n (* (- 1.0) invariant_64_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7))
into
(let ((a!1 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_63_n (* (- 1.0) invariant_64_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (<= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!8 (not (<= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (<= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!8 (not (<= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8))
into
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!3 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_74_n)) 0.0)))
      (a!2 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!3 (not (<= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!4 (not (>= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!5 (not (<= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_74_n)) 0.0)))
      (a!2 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!3 (not (<= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!4 (not (>= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!5 (not (<= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6))
into
(let ((a!1 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!2 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!4 (not (<= (+ invariant_54_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (<= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!6 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (>= (+ invariant_51_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!8 (not (<= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!9 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       (= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)
       a!8
       (= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)
       (= (+ invariant_71_n (* (- 1.0) invariant_74_n)) 0.0)
       a!9))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!4 (not (<= (+ invariant_54_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (<= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!6 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (>= (+ invariant_51_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!8 (not (<= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!9 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       (= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)
       a!8
       (= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)
       (= (+ invariant_71_n (* (- 1.0) invariant_74_n)) 0.0)
       a!9))
into
(let ((a!1 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_62_n (* (- 1.0) invariant_63_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_62_n (* (- 1.0) invariant_63_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
into
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!2 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!5 (not (<= (+ invariant_61_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       (= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       (not (<= invariant_74_n 0.0))
       (not (<= invariant_77_n 0.0))
       (>= (+ invariant_54_n (* (- 1.0) invariant_59_n)) 0.0)
       a!1
       a!2
       (not (<= invariant_78_n 0.0))
       (not (<= invariant_79_n 0.0))
       (= invariant_120_n 2.0)
       a!3
       (not (<= invariant_73_n 0.0))
       (= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)
       a!4
       a!5
       a!6
       a!7
       (= invariant_53_n 0.0)
       (not (<= invariant_71_n 0.0))
       (= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)
       (not (<= invariant_75_n 0.0))
       (= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)
       (not (<= invariant_76_n 0.0))
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)
       (= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)
       (= (+ invariant_71_n (* (- 1.0) invariant_76_n)) 0.0)
       (= (+ invariant_56_n (* (- 1.0) invariant_59_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!2 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!5 (not (<= (+ invariant_61_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       (= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       (not (<= invariant_74_n 0.0))
       (not (<= invariant_77_n 0.0))
       (>= (+ invariant_54_n (* (- 1.0) invariant_59_n)) 0.0)
       a!1
       a!2
       (not (<= invariant_78_n 0.0))
       (not (<= invariant_79_n 0.0))
       (= invariant_120_n 2.0)
       a!3
       (not (<= invariant_73_n 0.0))
       (= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)
       a!4
       a!5
       a!6
       a!7
       (= invariant_53_n 0.0)
       (not (<= invariant_71_n 0.0))
       (= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)
       (not (<= invariant_75_n 0.0))
       (= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)
       (not (<= invariant_76_n 0.0))
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)
       (= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)
       (= (+ invariant_71_n (* (- 1.0) invariant_76_n)) 0.0)
       (= (+ invariant_56_n (* (- 1.0) invariant_59_n)) 0.0)))
into
(let ((a!1 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and a!1
       (not (<= invariant_73_n 0.0))
       (= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)
       (= invariant_53_n 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!5 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!8 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       (= (+ invariant_71_n (* (- 1.0) invariant_74_n)) 0.0)
       (= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)
       a!7
       (= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)
       a!8))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!5 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!8 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       (= (+ invariant_71_n (* (- 1.0) invariant_74_n)) 0.0)
       (= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)
       a!7
       (= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)
       a!8))
into
(let ((a!1 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_71_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)
       (= (+ invariant_71_n (* (- 1.0) invariant_74_n)) 0.0)
       a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!4 (not (>= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!5 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!6 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (>= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!8 (not (<= (+ invariant_72_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!9 (not (<= (+ invariant_71_n (* (- 1.0) invariant_74_n)) 0.0)))
      (a!10 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       (>= (+ (* (- 1.0) invariant_71_n) invariant_79_n) 0.0)
       a!9
       a!10))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!4 (not (>= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!5 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!6 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (>= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!8 (not (<= (+ invariant_72_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!9 (not (<= (+ invariant_71_n (* (- 1.0) invariant_74_n)) 0.0)))
      (a!10 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       (>= (+ (* (- 1.0) invariant_71_n) invariant_79_n) 0.0)
       a!9
       a!10))
into
(let ((a!1 (not (<= (+ invariant_72_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!4 (not (<= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!5 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (<= (+ invariant_50_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)
       a!6))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!4 (not (<= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!5 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (<= (+ invariant_50_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)
       a!6))
into
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (<= (+ invariant_50_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!5 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_61_n (* (- 1.0) invariant_68_n)) 0.0)))
      (a!7 (not (>= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_52_n (* (- 1.0) invariant_57_n)) 0.0)
       a!6
       a!7))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!5 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_61_n (* (- 1.0) invariant_68_n)) 0.0)))
      (a!7 (not (>= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_52_n (* (- 1.0) invariant_57_n)) 0.0)
       a!6
       a!7))
into
(let ((a!1 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (<= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_72_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (<= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!7 (not (>= (+ invariant_53_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!8 (not (<= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       (= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)
       a!5
       (= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0)
       a!6
       a!7
       a!8))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_72_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (<= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!7 (not (>= (+ invariant_53_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!8 (not (<= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       (= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)
       a!5
       (= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0)
       a!6
       a!7
       a!8))
into
(let ((a!1 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_53_n (* (- 1.0) invariant_71_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       (= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0)
       a!1
       a!2
       (= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)
       a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_61_n (* (- 1.0) invariant_63_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_61_n (* (- 1.0) invariant_63_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
into
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!2 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (<= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!4 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!8 (not (>= (+ invariant_57_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!9 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!10 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!11 (not (<= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!12 (not (<= (+ invariant_72_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!13 (not (>= (+ invariant_71_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!14 (not (>= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)
       a!10
       a!11
       (>= (+ invariant_51_n (* (- 1.0) invariant_52_n)) 0.0)
       a!12
       a!13
       a!14))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!2 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (<= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!4 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!8 (not (>= (+ invariant_57_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!9 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!10 (not (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!11 (not (<= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!12 (not (<= (+ invariant_72_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!13 (not (>= (+ invariant_71_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!14 (not (>= (+ invariant_53_n (* (- 1.0) invariant_58_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)
       a!10
       a!11
       (>= (+ invariant_51_n (* (- 1.0) invariant_52_n)) 0.0)
       a!12
       a!13
       a!14))
into
(let ((a!1 (not (<= (+ invariant_72_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_57_n (* (- 1.0) invariant_58_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (<= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!7 (not (<= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)
       a!3
       a!4
       a!5
       a!6
       a!7))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (<= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!7 (not (<= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)
       a!3
       a!4
       a!5
       a!6
       a!7))
into
(let ((a!1 (not (<= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_56_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (<= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_56_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (<= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6))
into
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       (= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)
       a!3
       (= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       (= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)
       a!3
       (= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
into
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and (= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)
       a!1
       (= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)
       (= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)
       a!2
       a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_102_n invariant_100_n (= invariant_120_n 2.0) a!1 a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_102_n invariant_100_n (= invariant_120_n 2.0) a!1 a!2 a!3 a!4))
into
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (<= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_56_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!3 (not (<= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)
       (= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_56_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!3 (not (<= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)
       (= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
into
(let ((a!1 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!5 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (<= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!9 (not (<= (+ invariant_61_n (* (- 1.0) invariant_68_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!5 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (<= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!9 (not (<= (+ invariant_61_n (* (- 1.0) invariant_68_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9))
into
(let ((a!1 (not (<= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!4 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!4 (not (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
into
(let ((a!1 (not (<= (+ invariant_77_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!3 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_72_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!5 (not (>= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!6 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!8 (not (<= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!9 (not (<= (+ invariant_51_n (* (- 1.0) invariant_56_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_72_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!5 (not (>= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!6 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!8 (not (<= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!9 (not (<= (+ invariant_51_n (* (- 1.0) invariant_56_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9))
into
(let ((a!1 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!5 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (>= (+ invariant_73_n (* (- 1.0) invariant_74_n)) 0.0)))
      (a!8 (not (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!9 (not (>= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!10 (not (>= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!11 (not (>= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!12 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!13 (not (>= (+ invariant_66_n (* (- 1.0) invariant_67_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9
       a!10
       a!11
       a!12
       a!13))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!5 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (>= (+ invariant_73_n (* (- 1.0) invariant_74_n)) 0.0)))
      (a!8 (not (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!9 (not (>= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!10 (not (>= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!11 (not (>= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!12 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!13 (not (>= (+ invariant_66_n (* (- 1.0) invariant_67_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9
       a!10
       a!11
       a!12
       a!13))
into
(let ((a!1 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_74_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (>= (+ (* (- 1.0) invariant_51_n) invariant_59_n) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       (>= (+ (* (- 1.0) invariant_51_n) invariant_59_n) 0.0)))
into
(let ((a!1 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_51_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_51_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3 a!4))
into
(let ((a!1 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_54_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!2 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!5 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!7 (not (>= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       (= (+ invariant_71_n (* (- 1.0) invariant_75_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!2 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!5 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!7 (not (>= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       (= (+ invariant_71_n (* (- 1.0) invariant_75_n)) 0.0)))
into
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_73_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!5 (not (<= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!6 (not (<= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!8 (not (>= (+ invariant_71_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!9 (not (>= (+ invariant_51_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!10 (not (>= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!11 (not (>= (+ invariant_57_n (* (- 1.0) invariant_58_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)
       a!6
       a!7
       (>= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)
       a!8
       a!9
       a!10
       a!11))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_73_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!5 (not (<= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!6 (not (<= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!8 (not (>= (+ invariant_71_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!9 (not (>= (+ invariant_51_n (* (- 1.0) invariant_58_n)) 0.0)))
      (a!10 (not (>= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!11 (not (>= (+ invariant_57_n (* (- 1.0) invariant_58_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)
       a!6
       a!7
       (>= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)
       a!8
       a!9
       a!10
       a!11))
into
(let ((a!1 (not (>= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_51_n (* (- 1.0) invariant_58_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       a!2
       (>= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (>= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!5 (not (<= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (<= (+ invariant_52_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       (= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)
       (= invariant_120_n 2.0)
       (>= (+ (* (- 1.0) invariant_73_n) invariant_77_n) 0.0)
       a!1
       a!2
       a!3
       (>= (+ (* (- 1.0) invariant_71_n) invariant_78_n) 0.0)
       a!4
       (= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)
       a!5
       a!6
       a!7
       a!8))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (>= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!5 (not (<= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (<= (+ invariant_52_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       (= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)
       (= invariant_120_n 2.0)
       (>= (+ (* (- 1.0) invariant_73_n) invariant_77_n) 0.0)
       a!1
       a!2
       a!3
       (>= (+ (* (- 1.0) invariant_71_n) invariant_78_n) 0.0)
       a!4
       (= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)
       a!5
       a!6
       a!7
       a!8))
into
(let ((a!1 (not (<= (+ invariant_52_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3 a!4))
into
(let ((a!1 (not (<= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!2 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n invariant_102_n (= invariant_120_n 2.0) a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!2 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n invariant_102_n (= invariant_120_n 2.0) a!1 a!2 a!3))
into
(let ((a!1 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_73_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!3 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!3 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3))
into
(let ((a!1 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!3 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!5 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)
       (>= (+ (* (- 1.0) invariant_74_n) invariant_75_n) 0.0)
       a!2
       a!3
       a!4
       a!5))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!5 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)
       (>= (+ (* (- 1.0) invariant_74_n) invariant_75_n) 0.0)
       a!2
       a!3
       a!4
       a!5))
into
(let ((a!1 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!3 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!5 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       a!3
       (= (+ invariant_72_n (* (- 1.0) invariant_77_n)) 0.0)
       a!4
       (>= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       a!5))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!5 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       a!3
       (= (+ invariant_72_n (* (- 1.0) invariant_77_n)) 0.0)
       a!4
       (>= (+ invariant_74_n (* (- 1.0) invariant_77_n)) 0.0)
       a!5))
into
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!2 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!2 (not (<= (+ invariant_73_n (* (- 1.0) invariant_74_n)) 0.0)))
      (a!3 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n invariant_100_n a!1 (= invariant_120_n 2.0) a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!2 (not (<= (+ invariant_73_n (* (- 1.0) invariant_74_n)) 0.0)))
      (a!3 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n invariant_100_n a!1 (= invariant_120_n 2.0) a!2 a!3))
into
(let ((a!1 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!3 (not (<= (+ invariant_73_n (* (- 1.0) invariant_74_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_54_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!3 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (>= (+ invariant_56_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (<= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!6 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (>= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!8 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)
       a!7
       a!8))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_54_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!3 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (>= (+ invariant_56_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (<= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!6 (not (<= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (>= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!8 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)
       a!7
       a!8))
into
(let ((a!1 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!3 (not (>= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (<= (+ invariant_61_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (<= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!7 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!8 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!9 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!10 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!11 (not (>= (+ invariant_52_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       (>= (+ (* (- 1.0) invariant_71_n) invariant_79_n) 0.0)
       (= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)
       a!5
       a!6
       a!7
       a!8
       (>= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)
       a!9
       a!10
       a!11
       (= (+ invariant_64_n (* (- 1.0) invariant_65_n)) 0.0)
       (= (+ invariant_66_n (* (- 1.0) invariant_67_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (<= (+ invariant_61_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (<= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!7 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!8 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!9 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!10 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!11 (not (>= (+ invariant_52_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       (>= (+ (* (- 1.0) invariant_71_n) invariant_79_n) 0.0)
       (= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)
       a!5
       a!6
       a!7
       a!8
       (>= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)
       a!9
       a!10
       a!11
       (= (+ invariant_64_n (* (- 1.0) invariant_65_n)) 0.0)
       (= (+ invariant_66_n (* (- 1.0) invariant_67_n)) 0.0)))
into
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!2 (not (<= (+ invariant_51_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!3 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!2 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ (* (- 1.0) invariant_73_n) invariant_77_n) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0)))
      (a!2 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (>= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ (* (- 1.0) invariant_73_n) invariant_77_n) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6))
into
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!4 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (<= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)
       a!2
       a!3
       a!4
       (= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)
       (= (+ invariant_71_n (* (- 1.0) invariant_74_n)) 0.0)
       a!5
       a!6
       a!7))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!4 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (<= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!6 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)
       a!2
       a!3
       a!4
       (= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)
       (= (+ invariant_71_n (* (- 1.0) invariant_74_n)) 0.0)
       a!5
       a!6
       a!7))
into
(let ((a!1 (not (<= (+ invariant_64_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!2 (not (>= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_65_n (* (- 1.0) invariant_66_n)) 0.0)))
      (a!4 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!5 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!7 (not (>= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (>= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       (>= (+ (* (- 1.0) invariant_52_n) invariant_55_n) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!2 (not (>= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_65_n (* (- 1.0) invariant_66_n)) 0.0)))
      (a!4 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!5 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!6 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!7 (not (>= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (>= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ invariant_62_n (* (- 1.0) invariant_69_n)) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       (>= (+ (* (- 1.0) invariant_52_n) invariant_55_n) 0.0)))
into
(let ((a!1 (not (<= (+ invariant_63_n (* (- 1.0) invariant_67_n)) 0.0)))
      (a!2 (not (>= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (>= (+ invariant_65_n (* (- 1.0) invariant_66_n)) 0.0)))
      (a!4 (not (>= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!5 (not (<= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!3 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!5 (not (<= (+ invariant_52_n (* (- 1.0) invariant_53_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
into
(let ((a!1 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!3 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (<= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_65_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!5 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (>= (+ invariant_65_n (* (- 1.0) invariant_68_n)) 0.0)))
      (a!8 (not (>= (+ invariant_51_n (* (- 1.0) invariant_73_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (= (+ invariant_64_n (* (- 1.0) invariant_65_n)) 0.0)
       a!3
       a!4
       a!5
       a!6
       a!7
       (= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)
       a!8
       (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)
       (= (+ invariant_70_n (* (- 1.0) invariant_73_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (<= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_65_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!5 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_52_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (>= (+ invariant_65_n (* (- 1.0) invariant_68_n)) 0.0)))
      (a!8 (not (>= (+ invariant_51_n (* (- 1.0) invariant_73_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (= (+ invariant_64_n (* (- 1.0) invariant_65_n)) 0.0)
       a!3
       a!4
       a!5
       a!6
       a!7
       (= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)
       a!8
       (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)
       (= (+ invariant_70_n (* (- 1.0) invariant_73_n)) 0.0)))
into
(let ((a!1 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!2 (not (>= (+ invariant_65_n (* (- 1.0) invariant_68_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       (= (+ invariant_70_n (* (- 1.0) invariant_73_n)) 0.0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!2 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!5 (not (<= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!2 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (<= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!4 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!5 (not (<= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
into
(let ((a!1 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (<= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!5 (not (>= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!6 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (<= (+ invariant_61_n (* (- 1.0) invariant_68_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)
       a!3
       a!4
       a!5
       a!6
       (= (+ invariant_52_n (* (- 1.0) invariant_55_n)) 0.0)
       a!7
       (= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)
       a!8))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (<= (+ invariant_75_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!5 (not (>= (+ invariant_72_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!6 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!7 (not (<= (+ invariant_58_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (<= (+ invariant_61_n (* (- 1.0) invariant_68_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_76_n (* (- 1.0) invariant_77_n)) 0.0)
       a!2
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)
       a!3
       a!4
       a!5
       a!6
       (= (+ invariant_52_n (* (- 1.0) invariant_55_n)) 0.0)
       a!7
       (= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)
       a!8))
into
(let ((a!1 (not (<= (+ invariant_61_n (* (- 1.0) invariant_68_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (<= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)
       a!5
       a!6
       a!7
       a!8))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (<= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!8 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)
       a!5
       a!6
       a!7
       a!8))
into
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!3 (not (>= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_51_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!5 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_51_n (* (- 1.0) invariant_54_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_51_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!5 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       (= (+ invariant_51_n (* (- 1.0) invariant_54_n)) 0.0)))
into
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_71_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (>= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (>= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3 a!4))
into
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_51_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_51_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6))
into
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_71_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (>= (+ invariant_55_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!8 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (>= (+ invariant_55_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!8 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8))
into
(let ((a!1 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_55_n (* (- 1.0) invariant_73_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_102_n invariant_100_n (= invariant_120_n 2.0) a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_102_n invariant_100_n (= invariant_120_n 2.0) a!1 a!2 a!3))
into
(let ((a!1 (not (<= (+ invariant_54_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!2 (not (<= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (<= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!5 (not (<= (+ invariant_71_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!6 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (<= (+ invariant_77_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!8 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!9 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (<= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!5 (not (<= (+ invariant_71_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!6 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (<= (+ invariant_77_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!8 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!9 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9
       (= (+ invariant_74_n (* (- 1.0) invariant_75_n)) 0.0)))
into
(let ((a!1 (not (<= (+ invariant_71_n (* (- 1.0) invariant_78_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_66_n (* (- 1.0) invariant_69_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       (= invariant_120_n 2.0)
       a!1
       a!2
       a!3
       a!4
       a!5))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!5 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_102_n
       invariant_100_n
       (= invariant_120_n 2.0)
       a!1
       a!2
       a!3
       a!4
       a!5))
into
(let ((a!1 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!3 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (>= (+ invariant_72_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (<= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!6 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (<= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!8 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!4 (not (>= (+ invariant_72_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!5 (not (<= (+ invariant_70_n (* (- 1.0) invariant_71_n)) 0.0)))
      (a!6 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!7 (not (<= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!8 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8))
into
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!2 (not (<= (+ invariant_51_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!3 (not (>= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_72_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (<= (+ invariant_61_n (* (- 1.0) invariant_68_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!3 (not (>= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (<= (+ invariant_71_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!7 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!8 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!9 (not (>= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!10 (not (<= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ (* (- 1.0) invariant_73_n) invariant_76_n) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9
       a!10))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (<= (+ invariant_61_n (* (- 1.0) invariant_68_n)) 0.0)))
      (a!2 (not (<= (+ invariant_53_n (* (- 1.0) invariant_56_n)) 0.0)))
      (a!3 (not (>= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_55_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0)))
      (a!6 (not (<= (+ invariant_71_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!7 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0)))
      (a!8 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!9 (not (>= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0)))
      (a!10 (not (<= (+ invariant_76_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (>= (+ (* (- 1.0) invariant_73_n) invariant_76_n) 0.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7
       a!8
       a!9
       a!10))
into
(let ((a!1 (not (<= (+ invariant_61_n (* (- 1.0) invariant_68_n)) 0.0)))
      (a!2 (not (>= (+ invariant_54_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_53_n (* (- 1.0) invariant_54_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_102_n invariant_100_n (= invariant_120_n 2.0) a!1 a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!3 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_102_n invariant_100_n (= invariant_120_n 2.0) a!1 a!2 a!3 a!4))
into
(let ((a!1 (not (<= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_53_n (* (- 1.0) invariant_55_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (<= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (<= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (<= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (<= (+ invariant_57_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!6 (not (<= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!7 (not (<= (+ invariant_75_n (* (- 1.0) invariant_77_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5
       a!6
       a!7))
into
(let ((a!1 (not (<= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_52_n (* (- 1.0) invariant_57_n)) 0.0)
       a!2
       a!3
       (>= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)
       a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_75_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!4 (not (>= (+ invariant_75_n (* (- 1.0) invariant_78_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       (= (+ invariant_52_n (* (- 1.0) invariant_57_n)) 0.0)
       a!2
       a!3
       (>= (+ invariant_55_n (* (- 1.0) invariant_59_n)) 0.0)
       a!4))
into
(let ((a!1 (not (<= (+ invariant_68_n (* (- 1.0) invariant_69_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       a!2
       (= (+ invariant_52_n (* (- 1.0) invariant_57_n)) 0.0)))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_71_n (* (- 1.0) invariant_73_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)
       (= (+ invariant_70_n (* (- 1.0) invariant_73_n)) 0.0)
       a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0)))
      (a!2 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!3 (not (>= (+ invariant_71_n (* (- 1.0) invariant_73_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       (>= (+ invariant_51_n (* (- 1.0) invariant_59_n)) 0.0)
       (= (+ invariant_70_n (* (- 1.0) invariant_73_n)) 0.0)
       a!3))
into
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_73_n)) 0.0)))
      (a!2 (not (>= (+ invariant_73_n (* (- 1.0) invariant_76_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       (= (+ invariant_70_n (* (- 1.0) invariant_73_n)) 0.0)
       a!1
       a!2))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3 a!4))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 (= invariant_120_n 2.0) a!2 a!3 a!4))
into
(let ((a!1 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_77_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:164 ---------
Generalized from:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!2 (not (<= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       a!5))
into
(let ((a!1 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!2 (not (<= (+ invariant_74_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (>= (+ invariant_51_n (* (- 1.0) invariant_57_n)) 0.0))))
  (and invariant_100_n invariant_102_n a!1 a!2 a!3))
------------------------------------------------
-------- [spacer.ind_gen] operator() ../src/muz/spacer/spacer_generalizers.cpp:64 ---------
LEMMA:
(let ((a!1 (not (>= (+ invariant_71_n (* (- 1.0) invariant_74_n)) 0.0)))
      (a!2 (not (<= (+ invariant_78_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!3 (not (<= (+ invariant_73_n (* (- 1.0) invariant_79_n)) 0.0)))
      (a!4 (not (>= (+ invariant_53_n (* (- 1.0) invariant_57_n)) 0.0)))
      (a!5 (not (>= (+ invariant_77_n (* (- 1.0) invariant_78_n)) 0.0))))
  (and invariant_100_n
       invariant_102_n
       a!1
       (= invariant_120_n 2.0)
       a!2
       a!3
       a!4
       (>= (+ invariant_73_n (* (- 1.0) invariant_78_n)) 0.0)
       a!5))
------------------------------------------------
